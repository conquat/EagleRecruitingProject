ARM GAS  /tmp/cct0DL0R.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.rodata.fn_StateRunning.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 63686563 		.ascii	"check sys v\012\000"
  23      6B207379 
  23      7320760A 
  23      00
  24 000d 000000   		.align	2
  25              	.LC1:
  26 0010 63686563 		.ascii	"check sensor\012\000"
  26      6B207365 
  26      6E736F72 
  26      0A00
  27              		.section	.text.fn_StateRunning,"ax",%progbits
  28              		.align	1
  29              		.global	fn_StateRunning
  30              		.syntax unified
  31              		.thumb
  32              		.thumb_func
  34              	fn_StateRunning:
  35              	.LFB240:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
ARM GAS  /tmp/cct0DL0R.s 			page 2


  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  44:Core/Src/main.c **** ADC_HandleTypeDef hadc2;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** TIM_HandleTypeDef htim6;
  47:Core/Src/main.c **** TIM_HandleTypeDef htim7;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** UART_HandleTypeDef huart2;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** typedef enum{
  53:Core/Src/main.c ****   STATE_RUNNING,
  54:Core/Src/main.c ****   STATE_WAITING,
  55:Core/Src/main.c ****   NUM_STATES
  56:Core/Src/main.c **** } State_t;
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** typedef struct{
  59:Core/Src/main.c ****   State_t state;
  60:Core/Src/main.c ****   void (*func)(void);
  61:Core/Src/main.c **** } StateMachine_t;
  62:Core/Src/main.c **** /* USER CODE END PV */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  65:Core/Src/main.c **** void SystemClock_Config(void);
  66:Core/Src/main.c **** static void MX_GPIO_Init(void);
  67:Core/Src/main.c **** static void MX_ADC1_Init(void);
  68:Core/Src/main.c **** static void MX_ADC2_Init(void);
  69:Core/Src/main.c **** static void MX_TIM6_Init(void);
  70:Core/Src/main.c **** static void MX_TIM7_Init(void);
  71:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  72:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* USER CODE END PFP */
ARM GAS  /tmp/cct0DL0R.s 			page 3


  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  77:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  78:Core/Src/main.c **** State_t cur_state = STATE_RUNNING;
  79:Core/Src/main.c **** uint8_t emergency_int = 0;
  80:Core/Src/main.c **** uint8_t check_sys_voltage = 0;
  81:Core/Src/main.c **** uint8_t check_sensor = 0;
  82:Core/Src/main.c **** unsigned long last_message_time = 0;
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  85:Core/Src/main.c **** {
  86:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
  87:Core/Src/main.c ****   UNUSED(GPIO_Pin);
  88:Core/Src/main.c ****   emergency_int = 1;
  89:Core/Src/main.c **** }
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  92:Core/Src/main.c **** {
  93:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
  94:Core/Src/main.c ****   UNUSED(htim);
  95:Core/Src/main.c ****   
  96:Core/Src/main.c ****   char tx_data[50];
  97:Core/Src/main.c ****   if (htim == &htim6) {
  98:Core/Src/main.c ****     check_sensor = 1;
  99:Core/Src/main.c ****   } else if (htim == &htim7) {
 100:Core/Src/main.c ****     check_sys_voltage = 1;
 101:Core/Src/main.c ****   } else {
 102:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"timer error: unknown timer\n", 27, 100);
 103:Core/Src/main.c ****   }
 104:Core/Src/main.c **** }
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** void fn_StateRunning(void) {
  36              		.loc 1 106 28 view -0
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 0
  39              		@ frame_needed = 0, uses_anonymous_args = 0
  40 0000 08B5     		push	{r3, lr}
  41              		.cfi_def_cfa_offset 8
  42              		.cfi_offset 3, -8
  43              		.cfi_offset 14, -4
 107:Core/Src/main.c ****   if (emergency_int) {
  44              		.loc 1 107 3 view .LVU1
  45              		.loc 1 107 7 is_stmt 0 view .LVU2
  46 0002 164B     		ldr	r3, .L9
  47 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  48              		.loc 1 107 6 view .LVU3
  49 0006 33B9     		cbnz	r3, .L6
  50              	.L2:
 108:Core/Src/main.c ****     emergency_int = 0;
 109:Core/Src/main.c ****     cur_state = STATE_WAITING;
 110:Core/Src/main.c ****     last_message_time = 0;
 111:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim6);
 112:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim7);
 113:Core/Src/main.c ****   }
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   if (check_sys_voltage) {
  51              		.loc 1 115 3 is_stmt 1 view .LVU4
ARM GAS  /tmp/cct0DL0R.s 			page 4


  52              		.loc 1 115 7 is_stmt 0 view .LVU5
  53 0008 154B     		ldr	r3, .L9+4
  54 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  55              		.loc 1 115 6 view .LVU6
  56 000c 93B9     		cbnz	r3, .L7
  57              	.L3:
 116:Core/Src/main.c ****     check_sys_voltage = 0;
 117:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"check sys v\n", 12, 20);
 118:Core/Src/main.c ****   }
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   if (check_sensor) {
  58              		.loc 1 120 3 is_stmt 1 view .LVU7
  59              		.loc 1 120 7 is_stmt 0 view .LVU8
  60 000e 154B     		ldr	r3, .L9+8
  61 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  62              		.loc 1 120 6 view .LVU9
  63 0012 CBB9     		cbnz	r3, .L8
  64              	.L1:
 121:Core/Src/main.c ****     check_sensor = 0;
 122:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"check sensor\n", 13, 20);
 123:Core/Src/main.c ****   }
 124:Core/Src/main.c **** }
  65              		.loc 1 124 1 view .LVU10
  66 0014 08BD     		pop	{r3, pc}
  67              	.L6:
 108:Core/Src/main.c ****     cur_state = STATE_WAITING;
  68              		.loc 1 108 5 is_stmt 1 view .LVU11
 108:Core/Src/main.c ****     cur_state = STATE_WAITING;
  69              		.loc 1 108 19 is_stmt 0 view .LVU12
  70 0016 0023     		movs	r3, #0
  71 0018 104A     		ldr	r2, .L9
  72 001a 1370     		strb	r3, [r2]
 109:Core/Src/main.c ****     last_message_time = 0;
  73              		.loc 1 109 5 is_stmt 1 view .LVU13
 109:Core/Src/main.c ****     last_message_time = 0;
  74              		.loc 1 109 15 is_stmt 0 view .LVU14
  75 001c 124A     		ldr	r2, .L9+12
  76 001e 0121     		movs	r1, #1
  77 0020 1170     		strb	r1, [r2]
 110:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim6);
  78              		.loc 1 110 5 is_stmt 1 view .LVU15
 110:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim6);
  79              		.loc 1 110 23 is_stmt 0 view .LVU16
  80 0022 124A     		ldr	r2, .L9+16
  81 0024 1360     		str	r3, [r2]
 111:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim7);
  82              		.loc 1 111 5 is_stmt 1 view .LVU17
  83 0026 1248     		ldr	r0, .L9+20
  84 0028 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
  85              	.LVL0:
 112:Core/Src/main.c ****   }
  86              		.loc 1 112 5 view .LVU18
  87 002c 1148     		ldr	r0, .L9+24
  88 002e FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
  89              	.LVL1:
  90 0032 E9E7     		b	.L2
  91              	.L7:
ARM GAS  /tmp/cct0DL0R.s 			page 5


 116:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"check sys v\n", 12, 20);
  92              		.loc 1 116 5 view .LVU19
 116:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"check sys v\n", 12, 20);
  93              		.loc 1 116 23 is_stmt 0 view .LVU20
  94 0034 0A4B     		ldr	r3, .L9+4
  95 0036 0022     		movs	r2, #0
  96 0038 1A70     		strb	r2, [r3]
 117:Core/Src/main.c ****   }
  97              		.loc 1 117 5 is_stmt 1 view .LVU21
  98 003a 1423     		movs	r3, #20
  99 003c 0C22     		movs	r2, #12
 100 003e 0E49     		ldr	r1, .L9+28
 101 0040 0E48     		ldr	r0, .L9+32
 102 0042 FFF7FEFF 		bl	HAL_UART_Transmit
 103              	.LVL2:
 104 0046 E2E7     		b	.L3
 105              	.L8:
 121:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"check sensor\n", 13, 20);
 106              		.loc 1 121 5 view .LVU22
 121:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"check sensor\n", 13, 20);
 107              		.loc 1 121 18 is_stmt 0 view .LVU23
 108 0048 064B     		ldr	r3, .L9+8
 109 004a 0022     		movs	r2, #0
 110 004c 1A70     		strb	r2, [r3]
 122:Core/Src/main.c ****   }
 111              		.loc 1 122 5 is_stmt 1 view .LVU24
 112 004e 1423     		movs	r3, #20
 113 0050 0D22     		movs	r2, #13
 114 0052 0B49     		ldr	r1, .L9+36
 115 0054 0948     		ldr	r0, .L9+32
 116 0056 FFF7FEFF 		bl	HAL_UART_Transmit
 117              	.LVL3:
 118              		.loc 1 124 1 is_stmt 0 view .LVU25
 119 005a DBE7     		b	.L1
 120              	.L10:
 121              		.align	2
 122              	.L9:
 123 005c 00000000 		.word	emergency_int
 124 0060 00000000 		.word	check_sys_voltage
 125 0064 00000000 		.word	check_sensor
 126 0068 00000000 		.word	cur_state
 127 006c 00000000 		.word	last_message_time
 128 0070 00000000 		.word	htim6
 129 0074 00000000 		.word	htim7
 130 0078 00000000 		.word	.LC0
 131 007c 00000000 		.word	huart2
 132 0080 10000000 		.word	.LC1
 133              		.cfi_endproc
 134              	.LFE240:
 136              		.section	.rodata.fn_StateWaiting.str1.4,"aMS",%progbits,1
 137              		.align	2
 138              	.LC2:
 139 0000 426F6172 		.ascii	"Board in waiting state - please press the emergency"
 139      6420696E 
 139      20776169 
 139      74696E67 
 139      20737461 
ARM GAS  /tmp/cct0DL0R.s 			page 6


 140 0033 20627574 		.ascii	" button\012\000"
 140      746F6E0A 
 140      00
 141              		.section	.text.fn_StateWaiting,"ax",%progbits
 142              		.align	1
 143              		.global	fn_StateWaiting
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 148              	fn_StateWaiting:
 149              	.LFB241:
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** void fn_StateWaiting(void) {
 150              		.loc 1 126 28 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154 0000 08B5     		push	{r3, lr}
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 3, -8
 157              		.cfi_offset 14, -4
 127:Core/Src/main.c ****   if (emergency_int) {
 158              		.loc 1 127 3 view .LVU27
 159              		.loc 1 127 7 is_stmt 0 view .LVU28
 160 0002 114B     		ldr	r3, .L17
 161 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 162              		.loc 1 127 6 view .LVU29
 163 0006 43B9     		cbnz	r3, .L15
 164              	.L12:
 128:Core/Src/main.c ****     emergency_int = 0;
 129:Core/Src/main.c ****     cur_state = STATE_RUNNING;
 130:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim6);
 131:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim7);
 132:Core/Src/main.c ****   }
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   if (HAL_GetTick() - last_message_time > 500) {
 165              		.loc 1 134 3 is_stmt 1 view .LVU30
 166              		.loc 1 134 7 is_stmt 0 view .LVU31
 167 0008 FFF7FEFF 		bl	HAL_GetTick
 168              	.LVL4:
 169              		.loc 1 134 21 view .LVU32
 170 000c 0F4B     		ldr	r3, .L17+4
 171 000e 1B68     		ldr	r3, [r3]
 172 0010 C01A     		subs	r0, r0, r3
 173              		.loc 1 134 6 view .LVU33
 174 0012 B0F5FA7F 		cmp	r0, #500
 175 0016 0CD8     		bhi	.L16
 176              	.L11:
 135:Core/Src/main.c ****     last_message_time = HAL_GetTick();
 136:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"Board in waiting state - please press the emergenc
 137:Core/Src/main.c ****   }
 138:Core/Src/main.c ****   
 139:Core/Src/main.c **** }
 177              		.loc 1 139 1 view .LVU34
 178 0018 08BD     		pop	{r3, pc}
 179              	.L15:
 128:Core/Src/main.c ****     emergency_int = 0;
ARM GAS  /tmp/cct0DL0R.s 			page 7


 180              		.loc 1 128 5 is_stmt 1 view .LVU35
 128:Core/Src/main.c ****     emergency_int = 0;
 181              		.loc 1 128 19 is_stmt 0 view .LVU36
 182 001a 0023     		movs	r3, #0
 183 001c 0A4A     		ldr	r2, .L17
 184 001e 1370     		strb	r3, [r2]
 129:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim6);
 185              		.loc 1 129 5 is_stmt 1 view .LVU37
 129:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim6);
 186              		.loc 1 129 15 is_stmt 0 view .LVU38
 187 0020 0B4A     		ldr	r2, .L17+8
 188 0022 1370     		strb	r3, [r2]
 130:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim7);
 189              		.loc 1 130 5 is_stmt 1 view .LVU39
 190 0024 0B48     		ldr	r0, .L17+12
 191 0026 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 192              	.LVL5:
 131:Core/Src/main.c ****   }
 193              		.loc 1 131 5 view .LVU40
 194 002a 0B48     		ldr	r0, .L17+16
 195 002c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 196              	.LVL6:
 197 0030 EAE7     		b	.L12
 198              	.L16:
 135:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"Board in waiting state - please press the emergenc
 199              		.loc 1 135 5 view .LVU41
 135:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"Board in waiting state - please press the emergenc
 200              		.loc 1 135 25 is_stmt 0 view .LVU42
 201 0032 FFF7FEFF 		bl	HAL_GetTick
 202              	.LVL7:
 135:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"Board in waiting state - please press the emergenc
 203              		.loc 1 135 23 view .LVU43
 204 0036 054B     		ldr	r3, .L17+4
 205 0038 1860     		str	r0, [r3]
 136:Core/Src/main.c ****   }
 206              		.loc 1 136 5 is_stmt 1 view .LVU44
 207 003a 6423     		movs	r3, #100
 208 003c 3B22     		movs	r2, #59
 209 003e 0749     		ldr	r1, .L17+20
 210 0040 0748     		ldr	r0, .L17+24
 211 0042 FFF7FEFF 		bl	HAL_UART_Transmit
 212              	.LVL8:
 213              		.loc 1 139 1 is_stmt 0 view .LVU45
 214 0046 E7E7     		b	.L11
 215              	.L18:
 216              		.align	2
 217              	.L17:
 218 0048 00000000 		.word	emergency_int
 219 004c 00000000 		.word	last_message_time
 220 0050 00000000 		.word	cur_state
 221 0054 00000000 		.word	htim6
 222 0058 00000000 		.word	htim7
 223 005c 00000000 		.word	.LC2
 224 0060 00000000 		.word	huart2
 225              		.cfi_endproc
 226              	.LFE241:
 228              		.section	.text.MX_GPIO_Init,"ax",%progbits
ARM GAS  /tmp/cct0DL0R.s 			page 8


 229              		.align	1
 230              		.syntax unified
 231              		.thumb
 232              		.thumb_func
 234              	MX_GPIO_Init:
 235              	.LFB250:
 140:Core/Src/main.c **** 
 141:Core/Src/main.c **** StateMachine_t StateMachine[] = {
 142:Core/Src/main.c ****   {STATE_RUNNING, fn_StateRunning},
 143:Core/Src/main.c ****   {STATE_WAITING, fn_StateWaiting}
 144:Core/Src/main.c **** } ;
 145:Core/Src/main.c **** 
 146:Core/Src/main.c **** void FSM_run(void){
 147:Core/Src/main.c ****   if(cur_state < NUM_STATES){
 148:Core/Src/main.c ****     (*StateMachine[cur_state].func)();
 149:Core/Src/main.c ****   }
 150:Core/Src/main.c ****   else{
 151:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"FSM error\n", 10, 10);
 152:Core/Src/main.c ****   }
 153:Core/Src/main.c **** }
 154:Core/Src/main.c **** /* USER CODE END 0 */
 155:Core/Src/main.c **** 
 156:Core/Src/main.c **** /**
 157:Core/Src/main.c ****   * @brief  The application entry point.
 158:Core/Src/main.c ****   * @retval int
 159:Core/Src/main.c ****   */
 160:Core/Src/main.c **** int main(void)
 161:Core/Src/main.c **** {
 162:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   /* USER CODE END 1 */
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 169:Core/Src/main.c ****   HAL_Init();
 170:Core/Src/main.c **** 
 171:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****   /* USER CODE END Init */
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /* Configure the system clock */
 176:Core/Src/main.c ****   SystemClock_Config();
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   /* USER CODE END SysInit */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   /* Initialize all configured peripherals */
 183:Core/Src/main.c ****   MX_GPIO_Init();
 184:Core/Src/main.c ****   MX_ADC1_Init();
 185:Core/Src/main.c ****   MX_ADC2_Init();
 186:Core/Src/main.c ****   MX_TIM6_Init();
 187:Core/Src/main.c ****   MX_TIM7_Init();
 188:Core/Src/main.c ****   MX_USART2_UART_Init();
 189:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 190:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim6);
ARM GAS  /tmp/cct0DL0R.s 			page 9


 191:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim7);
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   cur_state = STATE_RUNNING;
 194:Core/Src/main.c ****   emergency_int = 0;
 195:Core/Src/main.c ****   check_sys_voltage = 0;
 196:Core/Src/main.c ****   check_sensor = 0;
 197:Core/Src/main.c ****   /* USER CODE END 2 */
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   /* Infinite loop */
 200:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 201:Core/Src/main.c ****   while (1)
 202:Core/Src/main.c ****   {
 203:Core/Src/main.c ****     /* USER CODE END WHILE */
 204:Core/Src/main.c ****     FSM_run();
 205:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 206:Core/Src/main.c ****   }
 207:Core/Src/main.c ****   /* USER CODE END 3 */
 208:Core/Src/main.c **** }
 209:Core/Src/main.c **** 
 210:Core/Src/main.c **** /**
 211:Core/Src/main.c ****   * @brief System Clock Configuration
 212:Core/Src/main.c ****   * @retval None
 213:Core/Src/main.c ****   */
 214:Core/Src/main.c **** void SystemClock_Config(void)
 215:Core/Src/main.c **** {
 216:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 217:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 220:Core/Src/main.c ****   */
 221:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 222:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 225:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 226:Core/Src/main.c ****   */
 227:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 228:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 229:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 231:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 232:Core/Src/main.c ****   {
 233:Core/Src/main.c ****     Error_Handler();
 234:Core/Src/main.c ****   }
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 237:Core/Src/main.c ****   */
 238:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 239:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 240:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 241:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 242:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 243:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 246:Core/Src/main.c ****   {
 247:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/cct0DL0R.s 			page 10


 248:Core/Src/main.c ****   }
 249:Core/Src/main.c **** }
 250:Core/Src/main.c **** 
 251:Core/Src/main.c **** /**
 252:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 253:Core/Src/main.c ****   * @param None
 254:Core/Src/main.c ****   * @retval None
 255:Core/Src/main.c ****   */
 256:Core/Src/main.c **** static void MX_ADC1_Init(void)
 257:Core/Src/main.c **** {
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 268:Core/Src/main.c **** 
 269:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 270:Core/Src/main.c ****   */
 271:Core/Src/main.c ****   hadc1.Instance = ADC1;
 272:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 273:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 274:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 275:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 276:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 277:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 278:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 279:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 280:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 281:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 282:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 283:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 284:Core/Src/main.c ****   {
 285:Core/Src/main.c ****     Error_Handler();
 286:Core/Src/main.c ****   }
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 289:Core/Src/main.c ****   */
 290:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 291:Core/Src/main.c ****   sConfig.Rank = 1;
 292:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 293:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 294:Core/Src/main.c ****   {
 295:Core/Src/main.c ****     Error_Handler();
 296:Core/Src/main.c ****   }
 297:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 300:Core/Src/main.c **** 
 301:Core/Src/main.c **** }
 302:Core/Src/main.c **** 
 303:Core/Src/main.c **** /**
 304:Core/Src/main.c ****   * @brief ADC2 Initialization Function
ARM GAS  /tmp/cct0DL0R.s 			page 11


 305:Core/Src/main.c ****   * @param None
 306:Core/Src/main.c ****   * @retval None
 307:Core/Src/main.c ****   */
 308:Core/Src/main.c **** static void MX_ADC2_Init(void)
 309:Core/Src/main.c **** {
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 0 */
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* USER CODE END ADC2_Init 0 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 316:Core/Src/main.c **** 
 317:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 1 */
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /* USER CODE END ADC2_Init 1 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 322:Core/Src/main.c ****   */
 323:Core/Src/main.c ****   hadc2.Instance = ADC2;
 324:Core/Src/main.c ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 325:Core/Src/main.c ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 326:Core/Src/main.c ****   hadc2.Init.ScanConvMode = DISABLE;
 327:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 328:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 329:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 330:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 331:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 332:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 333:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 334:Core/Src/main.c ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 335:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 336:Core/Src/main.c ****   {
 337:Core/Src/main.c ****     Error_Handler();
 338:Core/Src/main.c ****   }
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 341:Core/Src/main.c ****   */
 342:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 343:Core/Src/main.c ****   sConfig.Rank = 1;
 344:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 345:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 346:Core/Src/main.c ****   {
 347:Core/Src/main.c ****     Error_Handler();
 348:Core/Src/main.c ****   }
 349:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 2 */
 350:Core/Src/main.c **** 
 351:Core/Src/main.c ****   /* USER CODE END ADC2_Init 2 */
 352:Core/Src/main.c **** 
 353:Core/Src/main.c **** }
 354:Core/Src/main.c **** 
 355:Core/Src/main.c **** /**
 356:Core/Src/main.c ****   * @brief TIM6 Initialization Function
 357:Core/Src/main.c ****   * @param None
 358:Core/Src/main.c ****   * @retval None
 359:Core/Src/main.c ****   */
 360:Core/Src/main.c **** static void MX_TIM6_Init(void)
 361:Core/Src/main.c **** {
ARM GAS  /tmp/cct0DL0R.s 			page 12


 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 0 */
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /* USER CODE END TIM6_Init 0 */
 366:Core/Src/main.c **** 
 367:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 1 */
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* USER CODE END TIM6_Init 1 */
 372:Core/Src/main.c ****   htim6.Instance = TIM6;
 373:Core/Src/main.c ****   htim6.Init.Prescaler = 15999;
 374:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 375:Core/Src/main.c ****   htim6.Init.Period = 200;
 376:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 377:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 378:Core/Src/main.c ****   {
 379:Core/Src/main.c ****     Error_Handler();
 380:Core/Src/main.c ****   }
 381:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 382:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 383:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 384:Core/Src/main.c ****   {
 385:Core/Src/main.c ****     Error_Handler();
 386:Core/Src/main.c ****   }
 387:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 2 */
 388:Core/Src/main.c **** 
 389:Core/Src/main.c ****   /* USER CODE END TIM6_Init 2 */
 390:Core/Src/main.c **** 
 391:Core/Src/main.c **** }
 392:Core/Src/main.c **** 
 393:Core/Src/main.c **** /**
 394:Core/Src/main.c ****   * @brief TIM7 Initialization Function
 395:Core/Src/main.c ****   * @param None
 396:Core/Src/main.c ****   * @retval None
 397:Core/Src/main.c ****   */
 398:Core/Src/main.c **** static void MX_TIM7_Init(void)
 399:Core/Src/main.c **** {
 400:Core/Src/main.c **** 
 401:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 0 */
 402:Core/Src/main.c **** 
 403:Core/Src/main.c ****   /* USER CODE END TIM7_Init 0 */
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 406:Core/Src/main.c **** 
 407:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 1 */
 408:Core/Src/main.c **** 
 409:Core/Src/main.c ****   /* USER CODE END TIM7_Init 1 */
 410:Core/Src/main.c ****   htim7.Instance = TIM7;
 411:Core/Src/main.c ****   htim7.Init.Prescaler = 15999;
 412:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 413:Core/Src/main.c ****   htim7.Init.Period = 350;
 414:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 415:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 416:Core/Src/main.c ****   {
 417:Core/Src/main.c ****     Error_Handler();
 418:Core/Src/main.c ****   }
ARM GAS  /tmp/cct0DL0R.s 			page 13


 419:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 420:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 421:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 422:Core/Src/main.c ****   {
 423:Core/Src/main.c ****     Error_Handler();
 424:Core/Src/main.c ****   }
 425:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 2 */
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****   /* USER CODE END TIM7_Init 2 */
 428:Core/Src/main.c **** 
 429:Core/Src/main.c **** }
 430:Core/Src/main.c **** 
 431:Core/Src/main.c **** /**
 432:Core/Src/main.c ****   * @brief USART2 Initialization Function
 433:Core/Src/main.c ****   * @param None
 434:Core/Src/main.c ****   * @retval None
 435:Core/Src/main.c ****   */
 436:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 437:Core/Src/main.c **** {
 438:Core/Src/main.c **** 
 439:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 440:Core/Src/main.c **** 
 441:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 442:Core/Src/main.c **** 
 443:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 446:Core/Src/main.c ****   huart2.Instance = USART2;
 447:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 448:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 449:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 450:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 451:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 452:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 453:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 454:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 455:Core/Src/main.c ****   {
 456:Core/Src/main.c ****     Error_Handler();
 457:Core/Src/main.c ****   }
 458:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 459:Core/Src/main.c **** 
 460:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 461:Core/Src/main.c **** 
 462:Core/Src/main.c **** }
 463:Core/Src/main.c **** 
 464:Core/Src/main.c **** /**
 465:Core/Src/main.c ****   * @brief GPIO Initialization Function
 466:Core/Src/main.c ****   * @param None
 467:Core/Src/main.c ****   * @retval None
 468:Core/Src/main.c ****   */
 469:Core/Src/main.c **** static void MX_GPIO_Init(void)
 470:Core/Src/main.c **** {
 236              		.loc 1 470 1 is_stmt 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 40
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/cct0DL0R.s 			page 14


 241              		.cfi_def_cfa_offset 16
 242              		.cfi_offset 4, -16
 243              		.cfi_offset 5, -12
 244              		.cfi_offset 6, -8
 245              		.cfi_offset 14, -4
 246 0002 8AB0     		sub	sp, sp, #40
 247              		.cfi_def_cfa_offset 56
 471:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 248              		.loc 1 471 3 view .LVU47
 249              		.loc 1 471 20 is_stmt 0 view .LVU48
 250 0004 0024     		movs	r4, #0
 251 0006 0594     		str	r4, [sp, #20]
 252 0008 0694     		str	r4, [sp, #24]
 253 000a 0794     		str	r4, [sp, #28]
 254 000c 0894     		str	r4, [sp, #32]
 255 000e 0994     		str	r4, [sp, #36]
 472:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 473:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 476:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 256              		.loc 1 476 3 is_stmt 1 view .LVU49
 257              	.LBB4:
 258              		.loc 1 476 3 view .LVU50
 259 0010 0194     		str	r4, [sp, #4]
 260              		.loc 1 476 3 view .LVU51
 261 0012 264B     		ldr	r3, .L21
 262 0014 1A6B     		ldr	r2, [r3, #48]
 263 0016 42F00402 		orr	r2, r2, #4
 264 001a 1A63     		str	r2, [r3, #48]
 265              		.loc 1 476 3 view .LVU52
 266 001c 1A6B     		ldr	r2, [r3, #48]
 267 001e 02F00402 		and	r2, r2, #4
 268 0022 0192     		str	r2, [sp, #4]
 269              		.loc 1 476 3 view .LVU53
 270 0024 019A     		ldr	r2, [sp, #4]
 271              	.LBE4:
 272              		.loc 1 476 3 view .LVU54
 477:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 273              		.loc 1 477 3 view .LVU55
 274              	.LBB5:
 275              		.loc 1 477 3 view .LVU56
 276 0026 0294     		str	r4, [sp, #8]
 277              		.loc 1 477 3 view .LVU57
 278 0028 1A6B     		ldr	r2, [r3, #48]
 279 002a 42F08002 		orr	r2, r2, #128
 280 002e 1A63     		str	r2, [r3, #48]
 281              		.loc 1 477 3 view .LVU58
 282 0030 1A6B     		ldr	r2, [r3, #48]
 283 0032 02F08002 		and	r2, r2, #128
 284 0036 0292     		str	r2, [sp, #8]
 285              		.loc 1 477 3 view .LVU59
 286 0038 029A     		ldr	r2, [sp, #8]
 287              	.LBE5:
 288              		.loc 1 477 3 view .LVU60
 478:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 289              		.loc 1 478 3 view .LVU61
ARM GAS  /tmp/cct0DL0R.s 			page 15


 290              	.LBB6:
 291              		.loc 1 478 3 view .LVU62
 292 003a 0394     		str	r4, [sp, #12]
 293              		.loc 1 478 3 view .LVU63
 294 003c 1A6B     		ldr	r2, [r3, #48]
 295 003e 42F00102 		orr	r2, r2, #1
 296 0042 1A63     		str	r2, [r3, #48]
 297              		.loc 1 478 3 view .LVU64
 298 0044 1A6B     		ldr	r2, [r3, #48]
 299 0046 02F00102 		and	r2, r2, #1
 300 004a 0392     		str	r2, [sp, #12]
 301              		.loc 1 478 3 view .LVU65
 302 004c 039A     		ldr	r2, [sp, #12]
 303              	.LBE6:
 304              		.loc 1 478 3 view .LVU66
 479:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 305              		.loc 1 479 3 view .LVU67
 306              	.LBB7:
 307              		.loc 1 479 3 view .LVU68
 308 004e 0494     		str	r4, [sp, #16]
 309              		.loc 1 479 3 view .LVU69
 310 0050 1A6B     		ldr	r2, [r3, #48]
 311 0052 42F00202 		orr	r2, r2, #2
 312 0056 1A63     		str	r2, [r3, #48]
 313              		.loc 1 479 3 view .LVU70
 314 0058 1B6B     		ldr	r3, [r3, #48]
 315 005a 03F00203 		and	r3, r3, #2
 316 005e 0493     		str	r3, [sp, #16]
 317              		.loc 1 479 3 view .LVU71
 318 0060 049B     		ldr	r3, [sp, #16]
 319              	.LBE7:
 320              		.loc 1 479 3 view .LVU72
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 482:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 321              		.loc 1 482 3 view .LVU73
 322 0062 134E     		ldr	r6, .L21+4
 323 0064 2246     		mov	r2, r4
 324 0066 6021     		movs	r1, #96
 325 0068 3046     		mov	r0, r6
 326 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 327              	.LVL9:
 483:Core/Src/main.c **** 
 484:Core/Src/main.c ****   /*Configure GPIO pin : PC13 */
 485:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 328              		.loc 1 485 3 view .LVU74
 329              		.loc 1 485 23 is_stmt 0 view .LVU75
 330 006e 4FF40053 		mov	r3, #8192
 331 0072 0593     		str	r3, [sp, #20]
 486:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 332              		.loc 1 486 3 is_stmt 1 view .LVU76
 333              		.loc 1 486 24 is_stmt 0 view .LVU77
 334 0074 4FF40413 		mov	r3, #2162688
 335 0078 0693     		str	r3, [sp, #24]
 487:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 336              		.loc 1 487 3 is_stmt 1 view .LVU78
 337              		.loc 1 487 24 is_stmt 0 view .LVU79
ARM GAS  /tmp/cct0DL0R.s 			page 16


 338 007a 0125     		movs	r5, #1
 339 007c 0795     		str	r5, [sp, #28]
 488:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 340              		.loc 1 488 3 is_stmt 1 view .LVU80
 341 007e 05A9     		add	r1, sp, #20
 342 0080 0C48     		ldr	r0, .L21+8
 343 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 344              	.LVL10:
 489:Core/Src/main.c **** 
 490:Core/Src/main.c ****   /*Configure GPIO pins : LD2_Pin PA6 */
 491:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 345              		.loc 1 491 3 view .LVU81
 346              		.loc 1 491 23 is_stmt 0 view .LVU82
 347 0086 6023     		movs	r3, #96
 348 0088 0593     		str	r3, [sp, #20]
 492:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 349              		.loc 1 492 3 is_stmt 1 view .LVU83
 350              		.loc 1 492 24 is_stmt 0 view .LVU84
 351 008a 0695     		str	r5, [sp, #24]
 493:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 352              		.loc 1 493 3 is_stmt 1 view .LVU85
 353              		.loc 1 493 24 is_stmt 0 view .LVU86
 354 008c 0794     		str	r4, [sp, #28]
 494:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 355              		.loc 1 494 3 is_stmt 1 view .LVU87
 356              		.loc 1 494 25 is_stmt 0 view .LVU88
 357 008e 0894     		str	r4, [sp, #32]
 495:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 358              		.loc 1 495 3 is_stmt 1 view .LVU89
 359 0090 05A9     		add	r1, sp, #20
 360 0092 3046     		mov	r0, r6
 361 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 362              	.LVL11:
 496:Core/Src/main.c **** 
 497:Core/Src/main.c ****   /* EXTI interrupt init*/
 498:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 363              		.loc 1 498 3 view .LVU90
 364 0098 2A46     		mov	r2, r5
 365 009a 2146     		mov	r1, r4
 366 009c 2820     		movs	r0, #40
 367 009e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 368              	.LVL12:
 499:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 369              		.loc 1 499 3 view .LVU91
 370 00a2 2820     		movs	r0, #40
 371 00a4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 372              	.LVL13:
 500:Core/Src/main.c **** 
 501:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 502:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 503:Core/Src/main.c **** }
 373              		.loc 1 503 1 is_stmt 0 view .LVU92
 374 00a8 0AB0     		add	sp, sp, #40
 375              		.cfi_def_cfa_offset 16
 376              		@ sp needed
 377 00aa 70BD     		pop	{r4, r5, r6, pc}
 378              	.L22:
ARM GAS  /tmp/cct0DL0R.s 			page 17


 379              		.align	2
 380              	.L21:
 381 00ac 00380240 		.word	1073887232
 382 00b0 00000240 		.word	1073872896
 383 00b4 00080240 		.word	1073874944
 384              		.cfi_endproc
 385              	.LFE250:
 387              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 388              		.align	1
 389              		.global	HAL_GPIO_EXTI_Callback
 390              		.syntax unified
 391              		.thumb
 392              		.thumb_func
 394              	HAL_GPIO_EXTI_Callback:
 395              	.LVL14:
 396              	.LFB238:
  85:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
 397              		.loc 1 85 1 is_stmt 1 view -0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 0
 400              		@ frame_needed = 0, uses_anonymous_args = 0
 401              		@ link register save eliminated.
  87:Core/Src/main.c ****   emergency_int = 1;
 402              		.loc 1 87 3 view .LVU94
  88:Core/Src/main.c **** }
 403              		.loc 1 88 3 view .LVU95
  88:Core/Src/main.c **** }
 404              		.loc 1 88 17 is_stmt 0 view .LVU96
 405 0000 014B     		ldr	r3, .L24
 406 0002 0122     		movs	r2, #1
 407 0004 1A70     		strb	r2, [r3]
  89:Core/Src/main.c **** 
 408              		.loc 1 89 1 view .LVU97
 409 0006 7047     		bx	lr
 410              	.L25:
 411              		.align	2
 412              	.L24:
 413 0008 00000000 		.word	emergency_int
 414              		.cfi_endproc
 415              	.LFE238:
 417              		.section	.rodata.HAL_TIM_PeriodElapsedCallback.str1.4,"aMS",%progbits,1
 418              		.align	2
 419              	.LC3:
 420 0000 74696D65 		.ascii	"timer error: unknown timer\012\000"
 420      72206572 
 420      726F723A 
 420      20756E6B 
 420      6E6F776E 
 421              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 422              		.align	1
 423              		.global	HAL_TIM_PeriodElapsedCallback
 424              		.syntax unified
 425              		.thumb
 426              		.thumb_func
 428              	HAL_TIM_PeriodElapsedCallback:
 429              	.LVL15:
 430              	.LFB239:
ARM GAS  /tmp/cct0DL0R.s 			page 18


  92:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
 431              		.loc 1 92 1 is_stmt 1 view -0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
  92:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
 435              		.loc 1 92 1 is_stmt 0 view .LVU99
 436 0000 08B5     		push	{r3, lr}
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 3, -8
 439              		.cfi_offset 14, -4
  94:Core/Src/main.c ****   
 440              		.loc 1 94 3 is_stmt 1 view .LVU100
  96:Core/Src/main.c ****   if (htim == &htim6) {
 441              		.loc 1 96 3 view .LVU101
  97:Core/Src/main.c ****     check_sensor = 1;
 442              		.loc 1 97 3 view .LVU102
  97:Core/Src/main.c ****     check_sensor = 1;
 443              		.loc 1 97 6 is_stmt 0 view .LVU103
 444 0002 0A4B     		ldr	r3, .L33
 445 0004 9842     		cmp	r0, r3
 446 0006 09D0     		beq	.L31
  99:Core/Src/main.c ****     check_sys_voltage = 1;
 447              		.loc 1 99 10 is_stmt 1 view .LVU104
  99:Core/Src/main.c ****     check_sys_voltage = 1;
 448              		.loc 1 99 13 is_stmt 0 view .LVU105
 449 0008 094B     		ldr	r3, .L33+4
 450 000a 9842     		cmp	r0, r3
 451 000c 0AD0     		beq	.L32
 102:Core/Src/main.c ****   }
 452              		.loc 1 102 5 is_stmt 1 view .LVU106
 453 000e 6423     		movs	r3, #100
 454 0010 1B22     		movs	r2, #27
 455 0012 0849     		ldr	r1, .L33+8
 456 0014 0848     		ldr	r0, .L33+12
 457              	.LVL16:
 102:Core/Src/main.c ****   }
 458              		.loc 1 102 5 is_stmt 0 view .LVU107
 459 0016 FFF7FEFF 		bl	HAL_UART_Transmit
 460              	.LVL17:
 461              	.L26:
 104:Core/Src/main.c **** 
 462              		.loc 1 104 1 view .LVU108
 463 001a 08BD     		pop	{r3, pc}
 464              	.LVL18:
 465              	.L31:
  98:Core/Src/main.c ****   } else if (htim == &htim7) {
 466              		.loc 1 98 5 is_stmt 1 view .LVU109
  98:Core/Src/main.c ****   } else if (htim == &htim7) {
 467              		.loc 1 98 18 is_stmt 0 view .LVU110
 468 001c 074B     		ldr	r3, .L33+16
 469 001e 0122     		movs	r2, #1
 470 0020 1A70     		strb	r2, [r3]
 471 0022 FAE7     		b	.L26
 472              	.L32:
 100:Core/Src/main.c ****   } else {
 473              		.loc 1 100 5 is_stmt 1 view .LVU111
ARM GAS  /tmp/cct0DL0R.s 			page 19


 100:Core/Src/main.c ****   } else {
 474              		.loc 1 100 23 is_stmt 0 view .LVU112
 475 0024 064B     		ldr	r3, .L33+20
 476 0026 0122     		movs	r2, #1
 477 0028 1A70     		strb	r2, [r3]
 478 002a F6E7     		b	.L26
 479              	.L34:
 480              		.align	2
 481              	.L33:
 482 002c 00000000 		.word	htim6
 483 0030 00000000 		.word	htim7
 484 0034 00000000 		.word	.LC3
 485 0038 00000000 		.word	huart2
 486 003c 00000000 		.word	check_sensor
 487 0040 00000000 		.word	check_sys_voltage
 488              		.cfi_endproc
 489              	.LFE239:
 491              		.section	.rodata.FSM_run.str1.4,"aMS",%progbits,1
 492              		.align	2
 493              	.LC4:
 494 0000 46534D20 		.ascii	"FSM error\012\000"
 494      6572726F 
 494      720A00
 495              		.section	.text.FSM_run,"ax",%progbits
 496              		.align	1
 497              		.global	FSM_run
 498              		.syntax unified
 499              		.thumb
 500              		.thumb_func
 502              	FSM_run:
 503              	.LFB242:
 146:Core/Src/main.c ****   if(cur_state < NUM_STATES){
 504              		.loc 1 146 19 is_stmt 1 view -0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 0
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 508 0000 08B5     		push	{r3, lr}
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 3, -8
 511              		.cfi_offset 14, -4
 147:Core/Src/main.c ****     (*StateMachine[cur_state].func)();
 512              		.loc 1 147 3 view .LVU114
 147:Core/Src/main.c ****     (*StateMachine[cur_state].func)();
 513              		.loc 1 147 16 is_stmt 0 view .LVU115
 514 0002 084B     		ldr	r3, .L39
 515 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 147:Core/Src/main.c ****     (*StateMachine[cur_state].func)();
 516              		.loc 1 147 5 view .LVU116
 517 0006 012B     		cmp	r3, #1
 518 0008 05D8     		bhi	.L36
 148:Core/Src/main.c ****   }
 519              		.loc 1 148 5 is_stmt 1 view .LVU117
 148:Core/Src/main.c ****   }
 520              		.loc 1 148 6 is_stmt 0 view .LVU118
 521 000a 074A     		ldr	r2, .L39+4
 522 000c 02EBC303 		add	r3, r2, r3, lsl #3
 523 0010 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/cct0DL0R.s 			page 20


 524 0012 9847     		blx	r3
 525              	.LVL19:
 526              	.L35:
 153:Core/Src/main.c **** /* USER CODE END 0 */
 527              		.loc 1 153 1 view .LVU119
 528 0014 08BD     		pop	{r3, pc}
 529              	.L36:
 151:Core/Src/main.c ****   }
 530              		.loc 1 151 5 is_stmt 1 view .LVU120
 531 0016 0A23     		movs	r3, #10
 532 0018 1A46     		mov	r2, r3
 533 001a 0449     		ldr	r1, .L39+8
 534 001c 0448     		ldr	r0, .L39+12
 535 001e FFF7FEFF 		bl	HAL_UART_Transmit
 536              	.LVL20:
 153:Core/Src/main.c **** /* USER CODE END 0 */
 537              		.loc 1 153 1 is_stmt 0 view .LVU121
 538 0022 F7E7     		b	.L35
 539              	.L40:
 540              		.align	2
 541              	.L39:
 542 0024 00000000 		.word	cur_state
 543 0028 00000000 		.word	StateMachine
 544 002c 00000000 		.word	.LC4
 545 0030 00000000 		.word	huart2
 546              		.cfi_endproc
 547              	.LFE242:
 549              		.section	.text.Error_Handler,"ax",%progbits
 550              		.align	1
 551              		.global	Error_Handler
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 556              	Error_Handler:
 557              	.LFB251:
 504:Core/Src/main.c **** 
 505:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 506:Core/Src/main.c **** 
 507:Core/Src/main.c **** /* USER CODE END 4 */
 508:Core/Src/main.c **** 
 509:Core/Src/main.c **** /**
 510:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 511:Core/Src/main.c ****   * @retval None
 512:Core/Src/main.c ****   */
 513:Core/Src/main.c **** void Error_Handler(void)
 514:Core/Src/main.c **** {
 558              		.loc 1 514 1 is_stmt 1 view -0
 559              		.cfi_startproc
 560              		@ Volatile: function does not return.
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563              		@ link register save eliminated.
 515:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 516:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 517:Core/Src/main.c ****   __disable_irq();
 564              		.loc 1 517 3 view .LVU123
 565              	.LBB8:
ARM GAS  /tmp/cct0DL0R.s 			page 21


 566              	.LBI8:
 567              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
ARM GAS  /tmp/cct0DL0R.s 			page 22


  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cct0DL0R.s 			page 23


 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 568              		.loc 2 140 27 view .LVU124
 569              	.LBB9:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 570              		.loc 2 142 3 view .LVU125
 571              		.syntax unified
 572              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 573 0000 72B6     		cpsid i
 574              	@ 0 "" 2
 575              		.thumb
 576              		.syntax unified
 577              	.L42:
 578              	.LBE9:
 579              	.LBE8:
 518:Core/Src/main.c ****   while (1)
 580              		.loc 1 518 3 discriminator 1 view .LVU126
 519:Core/Src/main.c ****   {
 520:Core/Src/main.c ****   }
 581              		.loc 1 520 3 discriminator 1 view .LVU127
 518:Core/Src/main.c ****   while (1)
 582              		.loc 1 518 9 discriminator 1 view .LVU128
 583 0002 FEE7     		b	.L42
 584              		.cfi_endproc
 585              	.LFE251:
 587              		.section	.text.MX_ADC1_Init,"ax",%progbits
 588              		.align	1
 589              		.syntax unified
 590              		.thumb
 591              		.thumb_func
ARM GAS  /tmp/cct0DL0R.s 			page 24


 593              	MX_ADC1_Init:
 594              	.LFB245:
 257:Core/Src/main.c **** 
 595              		.loc 1 257 1 view -0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 16
 598              		@ frame_needed = 0, uses_anonymous_args = 0
 599 0000 00B5     		push	{lr}
 600              		.cfi_def_cfa_offset 4
 601              		.cfi_offset 14, -4
 602 0002 85B0     		sub	sp, sp, #20
 603              		.cfi_def_cfa_offset 24
 263:Core/Src/main.c **** 
 604              		.loc 1 263 3 view .LVU130
 263:Core/Src/main.c **** 
 605              		.loc 1 263 26 is_stmt 0 view .LVU131
 606 0004 0023     		movs	r3, #0
 607 0006 0093     		str	r3, [sp]
 608 0008 0193     		str	r3, [sp, #4]
 609 000a 0293     		str	r3, [sp, #8]
 610 000c 0393     		str	r3, [sp, #12]
 271:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 611              		.loc 1 271 3 is_stmt 1 view .LVU132
 271:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 612              		.loc 1 271 18 is_stmt 0 view .LVU133
 613 000e 1348     		ldr	r0, .L49
 614 0010 134A     		ldr	r2, .L49+4
 615 0012 0260     		str	r2, [r0]
 272:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 616              		.loc 1 272 3 is_stmt 1 view .LVU134
 272:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 617              		.loc 1 272 29 is_stmt 0 view .LVU135
 618 0014 4360     		str	r3, [r0, #4]
 273:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 619              		.loc 1 273 3 is_stmt 1 view .LVU136
 273:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 620              		.loc 1 273 25 is_stmt 0 view .LVU137
 621 0016 8360     		str	r3, [r0, #8]
 274:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 622              		.loc 1 274 3 is_stmt 1 view .LVU138
 274:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 623              		.loc 1 274 27 is_stmt 0 view .LVU139
 624 0018 0361     		str	r3, [r0, #16]
 275:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 625              		.loc 1 275 3 is_stmt 1 view .LVU140
 275:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 626              		.loc 1 275 33 is_stmt 0 view .LVU141
 627 001a 0376     		strb	r3, [r0, #24]
 276:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 628              		.loc 1 276 3 is_stmt 1 view .LVU142
 276:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 629              		.loc 1 276 36 is_stmt 0 view .LVU143
 630 001c 80F82030 		strb	r3, [r0, #32]
 277:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 631              		.loc 1 277 3 is_stmt 1 view .LVU144
 277:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 632              		.loc 1 277 35 is_stmt 0 view .LVU145
ARM GAS  /tmp/cct0DL0R.s 			page 25


 633 0020 C362     		str	r3, [r0, #44]
 278:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 634              		.loc 1 278 3 is_stmt 1 view .LVU146
 278:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 635              		.loc 1 278 31 is_stmt 0 view .LVU147
 636 0022 104A     		ldr	r2, .L49+8
 637 0024 8262     		str	r2, [r0, #40]
 279:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 638              		.loc 1 279 3 is_stmt 1 view .LVU148
 279:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 639              		.loc 1 279 24 is_stmt 0 view .LVU149
 640 0026 C360     		str	r3, [r0, #12]
 280:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 641              		.loc 1 280 3 is_stmt 1 view .LVU150
 280:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 642              		.loc 1 280 30 is_stmt 0 view .LVU151
 643 0028 0122     		movs	r2, #1
 644 002a C261     		str	r2, [r0, #28]
 281:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 645              		.loc 1 281 3 is_stmt 1 view .LVU152
 281:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 646              		.loc 1 281 36 is_stmt 0 view .LVU153
 647 002c 80F83030 		strb	r3, [r0, #48]
 282:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 648              		.loc 1 282 3 is_stmt 1 view .LVU154
 282:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 649              		.loc 1 282 27 is_stmt 0 view .LVU155
 650 0030 4261     		str	r2, [r0, #20]
 283:Core/Src/main.c ****   {
 651              		.loc 1 283 3 is_stmt 1 view .LVU156
 283:Core/Src/main.c ****   {
 652              		.loc 1 283 7 is_stmt 0 view .LVU157
 653 0032 FFF7FEFF 		bl	HAL_ADC_Init
 654              	.LVL21:
 283:Core/Src/main.c ****   {
 655              		.loc 1 283 6 view .LVU158
 656 0036 60B9     		cbnz	r0, .L47
 290:Core/Src/main.c ****   sConfig.Rank = 1;
 657              		.loc 1 290 3 is_stmt 1 view .LVU159
 290:Core/Src/main.c ****   sConfig.Rank = 1;
 658              		.loc 1 290 19 is_stmt 0 view .LVU160
 659 0038 0023     		movs	r3, #0
 660 003a 0093     		str	r3, [sp]
 291:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 661              		.loc 1 291 3 is_stmt 1 view .LVU161
 291:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 662              		.loc 1 291 16 is_stmt 0 view .LVU162
 663 003c 0122     		movs	r2, #1
 664 003e 0192     		str	r2, [sp, #4]
 292:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 665              		.loc 1 292 3 is_stmt 1 view .LVU163
 292:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 666              		.loc 1 292 24 is_stmt 0 view .LVU164
 667 0040 0293     		str	r3, [sp, #8]
 293:Core/Src/main.c ****   {
 668              		.loc 1 293 3 is_stmt 1 view .LVU165
 293:Core/Src/main.c ****   {
ARM GAS  /tmp/cct0DL0R.s 			page 26


 669              		.loc 1 293 7 is_stmt 0 view .LVU166
 670 0042 6946     		mov	r1, sp
 671 0044 0548     		ldr	r0, .L49
 672 0046 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 673              	.LVL22:
 293:Core/Src/main.c ****   {
 674              		.loc 1 293 6 view .LVU167
 675 004a 20B9     		cbnz	r0, .L48
 301:Core/Src/main.c **** 
 676              		.loc 1 301 1 view .LVU168
 677 004c 05B0     		add	sp, sp, #20
 678              		.cfi_remember_state
 679              		.cfi_def_cfa_offset 4
 680              		@ sp needed
 681 004e 5DF804FB 		ldr	pc, [sp], #4
 682              	.L47:
 683              		.cfi_restore_state
 285:Core/Src/main.c ****   }
 684              		.loc 1 285 5 is_stmt 1 view .LVU169
 685 0052 FFF7FEFF 		bl	Error_Handler
 686              	.LVL23:
 687              	.L48:
 295:Core/Src/main.c ****   }
 688              		.loc 1 295 5 view .LVU170
 689 0056 FFF7FEFF 		bl	Error_Handler
 690              	.LVL24:
 691              	.L50:
 692 005a 00BF     		.align	2
 693              	.L49:
 694 005c 00000000 		.word	hadc1
 695 0060 00200140 		.word	1073815552
 696 0064 0100000F 		.word	251658241
 697              		.cfi_endproc
 698              	.LFE245:
 700              		.section	.text.MX_ADC2_Init,"ax",%progbits
 701              		.align	1
 702              		.syntax unified
 703              		.thumb
 704              		.thumb_func
 706              	MX_ADC2_Init:
 707              	.LFB246:
 309:Core/Src/main.c **** 
 708              		.loc 1 309 1 view -0
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 16
 711              		@ frame_needed = 0, uses_anonymous_args = 0
 712 0000 00B5     		push	{lr}
 713              		.cfi_def_cfa_offset 4
 714              		.cfi_offset 14, -4
 715 0002 85B0     		sub	sp, sp, #20
 716              		.cfi_def_cfa_offset 24
 315:Core/Src/main.c **** 
 717              		.loc 1 315 3 view .LVU172
 315:Core/Src/main.c **** 
 718              		.loc 1 315 26 is_stmt 0 view .LVU173
 719 0004 0023     		movs	r3, #0
 720 0006 0093     		str	r3, [sp]
ARM GAS  /tmp/cct0DL0R.s 			page 27


 721 0008 0193     		str	r3, [sp, #4]
 722 000a 0293     		str	r3, [sp, #8]
 723 000c 0393     		str	r3, [sp, #12]
 323:Core/Src/main.c ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 724              		.loc 1 323 3 is_stmt 1 view .LVU174
 323:Core/Src/main.c ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 725              		.loc 1 323 18 is_stmt 0 view .LVU175
 726 000e 1348     		ldr	r0, .L57
 727 0010 134A     		ldr	r2, .L57+4
 728 0012 0260     		str	r2, [r0]
 324:Core/Src/main.c ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 729              		.loc 1 324 3 is_stmt 1 view .LVU176
 324:Core/Src/main.c ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 730              		.loc 1 324 29 is_stmt 0 view .LVU177
 731 0014 4360     		str	r3, [r0, #4]
 325:Core/Src/main.c ****   hadc2.Init.ScanConvMode = DISABLE;
 732              		.loc 1 325 3 is_stmt 1 view .LVU178
 325:Core/Src/main.c ****   hadc2.Init.ScanConvMode = DISABLE;
 733              		.loc 1 325 25 is_stmt 0 view .LVU179
 734 0016 8360     		str	r3, [r0, #8]
 326:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 735              		.loc 1 326 3 is_stmt 1 view .LVU180
 326:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 736              		.loc 1 326 27 is_stmt 0 view .LVU181
 737 0018 0361     		str	r3, [r0, #16]
 327:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 738              		.loc 1 327 3 is_stmt 1 view .LVU182
 327:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 739              		.loc 1 327 33 is_stmt 0 view .LVU183
 740 001a 0376     		strb	r3, [r0, #24]
 328:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 741              		.loc 1 328 3 is_stmt 1 view .LVU184
 328:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 742              		.loc 1 328 36 is_stmt 0 view .LVU185
 743 001c 80F82030 		strb	r3, [r0, #32]
 329:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 744              		.loc 1 329 3 is_stmt 1 view .LVU186
 329:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 745              		.loc 1 329 35 is_stmt 0 view .LVU187
 746 0020 C362     		str	r3, [r0, #44]
 330:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 747              		.loc 1 330 3 is_stmt 1 view .LVU188
 330:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 748              		.loc 1 330 31 is_stmt 0 view .LVU189
 749 0022 104A     		ldr	r2, .L57+8
 750 0024 8262     		str	r2, [r0, #40]
 331:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 751              		.loc 1 331 3 is_stmt 1 view .LVU190
 331:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 752              		.loc 1 331 24 is_stmt 0 view .LVU191
 753 0026 C360     		str	r3, [r0, #12]
 332:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 754              		.loc 1 332 3 is_stmt 1 view .LVU192
 332:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 755              		.loc 1 332 30 is_stmt 0 view .LVU193
 756 0028 0122     		movs	r2, #1
 757 002a C261     		str	r2, [r0, #28]
ARM GAS  /tmp/cct0DL0R.s 			page 28


 333:Core/Src/main.c ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 758              		.loc 1 333 3 is_stmt 1 view .LVU194
 333:Core/Src/main.c ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 759              		.loc 1 333 36 is_stmt 0 view .LVU195
 760 002c 80F83030 		strb	r3, [r0, #48]
 334:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 761              		.loc 1 334 3 is_stmt 1 view .LVU196
 334:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 762              		.loc 1 334 27 is_stmt 0 view .LVU197
 763 0030 4261     		str	r2, [r0, #20]
 335:Core/Src/main.c ****   {
 764              		.loc 1 335 3 is_stmt 1 view .LVU198
 335:Core/Src/main.c ****   {
 765              		.loc 1 335 7 is_stmt 0 view .LVU199
 766 0032 FFF7FEFF 		bl	HAL_ADC_Init
 767              	.LVL25:
 335:Core/Src/main.c ****   {
 768              		.loc 1 335 6 view .LVU200
 769 0036 60B9     		cbnz	r0, .L55
 342:Core/Src/main.c ****   sConfig.Rank = 1;
 770              		.loc 1 342 3 is_stmt 1 view .LVU201
 342:Core/Src/main.c ****   sConfig.Rank = 1;
 771              		.loc 1 342 19 is_stmt 0 view .LVU202
 772 0038 0123     		movs	r3, #1
 773 003a 0093     		str	r3, [sp]
 343:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 774              		.loc 1 343 3 is_stmt 1 view .LVU203
 343:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 775              		.loc 1 343 16 is_stmt 0 view .LVU204
 776 003c 0193     		str	r3, [sp, #4]
 344:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 777              		.loc 1 344 3 is_stmt 1 view .LVU205
 344:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 778              		.loc 1 344 24 is_stmt 0 view .LVU206
 779 003e 0023     		movs	r3, #0
 780 0040 0293     		str	r3, [sp, #8]
 345:Core/Src/main.c ****   {
 781              		.loc 1 345 3 is_stmt 1 view .LVU207
 345:Core/Src/main.c ****   {
 782              		.loc 1 345 7 is_stmt 0 view .LVU208
 783 0042 6946     		mov	r1, sp
 784 0044 0548     		ldr	r0, .L57
 785 0046 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 786              	.LVL26:
 345:Core/Src/main.c ****   {
 787              		.loc 1 345 6 view .LVU209
 788 004a 20B9     		cbnz	r0, .L56
 353:Core/Src/main.c **** 
 789              		.loc 1 353 1 view .LVU210
 790 004c 05B0     		add	sp, sp, #20
 791              		.cfi_remember_state
 792              		.cfi_def_cfa_offset 4
 793              		@ sp needed
 794 004e 5DF804FB 		ldr	pc, [sp], #4
 795              	.L55:
 796              		.cfi_restore_state
 337:Core/Src/main.c ****   }
ARM GAS  /tmp/cct0DL0R.s 			page 29


 797              		.loc 1 337 5 is_stmt 1 view .LVU211
 798 0052 FFF7FEFF 		bl	Error_Handler
 799              	.LVL27:
 800              	.L56:
 347:Core/Src/main.c ****   }
 801              		.loc 1 347 5 view .LVU212
 802 0056 FFF7FEFF 		bl	Error_Handler
 803              	.LVL28:
 804              	.L58:
 805 005a 00BF     		.align	2
 806              	.L57:
 807 005c 00000000 		.word	hadc2
 808 0060 00210140 		.word	1073815808
 809 0064 0100000F 		.word	251658241
 810              		.cfi_endproc
 811              	.LFE246:
 813              		.section	.text.MX_TIM6_Init,"ax",%progbits
 814              		.align	1
 815              		.syntax unified
 816              		.thumb
 817              		.thumb_func
 819              	MX_TIM6_Init:
 820              	.LFB247:
 361:Core/Src/main.c **** 
 821              		.loc 1 361 1 view -0
 822              		.cfi_startproc
 823              		@ args = 0, pretend = 0, frame = 8
 824              		@ frame_needed = 0, uses_anonymous_args = 0
 825 0000 00B5     		push	{lr}
 826              		.cfi_def_cfa_offset 4
 827              		.cfi_offset 14, -4
 828 0002 83B0     		sub	sp, sp, #12
 829              		.cfi_def_cfa_offset 16
 367:Core/Src/main.c **** 
 830              		.loc 1 367 3 view .LVU214
 367:Core/Src/main.c **** 
 831              		.loc 1 367 27 is_stmt 0 view .LVU215
 832 0004 0023     		movs	r3, #0
 833 0006 0093     		str	r3, [sp]
 834 0008 0193     		str	r3, [sp, #4]
 372:Core/Src/main.c ****   htim6.Init.Prescaler = 15999;
 835              		.loc 1 372 3 is_stmt 1 view .LVU216
 372:Core/Src/main.c ****   htim6.Init.Prescaler = 15999;
 836              		.loc 1 372 18 is_stmt 0 view .LVU217
 837 000a 0E48     		ldr	r0, .L65
 838 000c 0E4A     		ldr	r2, .L65+4
 839 000e 0260     		str	r2, [r0]
 373:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 840              		.loc 1 373 3 is_stmt 1 view .LVU218
 373:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 841              		.loc 1 373 24 is_stmt 0 view .LVU219
 842 0010 43F67F62 		movw	r2, #15999
 843 0014 4260     		str	r2, [r0, #4]
 374:Core/Src/main.c ****   htim6.Init.Period = 200;
 844              		.loc 1 374 3 is_stmt 1 view .LVU220
 374:Core/Src/main.c ****   htim6.Init.Period = 200;
 845              		.loc 1 374 26 is_stmt 0 view .LVU221
ARM GAS  /tmp/cct0DL0R.s 			page 30


 846 0016 8360     		str	r3, [r0, #8]
 375:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 847              		.loc 1 375 3 is_stmt 1 view .LVU222
 375:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 848              		.loc 1 375 21 is_stmt 0 view .LVU223
 849 0018 C822     		movs	r2, #200
 850 001a C260     		str	r2, [r0, #12]
 376:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 851              		.loc 1 376 3 is_stmt 1 view .LVU224
 376:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 852              		.loc 1 376 32 is_stmt 0 view .LVU225
 853 001c 8361     		str	r3, [r0, #24]
 377:Core/Src/main.c ****   {
 854              		.loc 1 377 3 is_stmt 1 view .LVU226
 377:Core/Src/main.c ****   {
 855              		.loc 1 377 7 is_stmt 0 view .LVU227
 856 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 857              	.LVL29:
 377:Core/Src/main.c ****   {
 858              		.loc 1 377 6 view .LVU228
 859 0022 50B9     		cbnz	r0, .L63
 381:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 860              		.loc 1 381 3 is_stmt 1 view .LVU229
 381:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 861              		.loc 1 381 37 is_stmt 0 view .LVU230
 862 0024 0023     		movs	r3, #0
 863 0026 0093     		str	r3, [sp]
 382:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 864              		.loc 1 382 3 is_stmt 1 view .LVU231
 382:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 865              		.loc 1 382 33 is_stmt 0 view .LVU232
 866 0028 0193     		str	r3, [sp, #4]
 383:Core/Src/main.c ****   {
 867              		.loc 1 383 3 is_stmt 1 view .LVU233
 383:Core/Src/main.c ****   {
 868              		.loc 1 383 7 is_stmt 0 view .LVU234
 869 002a 6946     		mov	r1, sp
 870 002c 0548     		ldr	r0, .L65
 871 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 872              	.LVL30:
 383:Core/Src/main.c ****   {
 873              		.loc 1 383 6 view .LVU235
 874 0032 20B9     		cbnz	r0, .L64
 391:Core/Src/main.c **** 
 875              		.loc 1 391 1 view .LVU236
 876 0034 03B0     		add	sp, sp, #12
 877              		.cfi_remember_state
 878              		.cfi_def_cfa_offset 4
 879              		@ sp needed
 880 0036 5DF804FB 		ldr	pc, [sp], #4
 881              	.L63:
 882              		.cfi_restore_state
 379:Core/Src/main.c ****   }
 883              		.loc 1 379 5 is_stmt 1 view .LVU237
 884 003a FFF7FEFF 		bl	Error_Handler
 885              	.LVL31:
 886              	.L64:
ARM GAS  /tmp/cct0DL0R.s 			page 31


 385:Core/Src/main.c ****   }
 887              		.loc 1 385 5 view .LVU238
 888 003e FFF7FEFF 		bl	Error_Handler
 889              	.LVL32:
 890              	.L66:
 891 0042 00BF     		.align	2
 892              	.L65:
 893 0044 00000000 		.word	htim6
 894 0048 00100040 		.word	1073745920
 895              		.cfi_endproc
 896              	.LFE247:
 898              		.section	.text.MX_TIM7_Init,"ax",%progbits
 899              		.align	1
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 904              	MX_TIM7_Init:
 905              	.LFB248:
 399:Core/Src/main.c **** 
 906              		.loc 1 399 1 view -0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 8
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910 0000 00B5     		push	{lr}
 911              		.cfi_def_cfa_offset 4
 912              		.cfi_offset 14, -4
 913 0002 83B0     		sub	sp, sp, #12
 914              		.cfi_def_cfa_offset 16
 405:Core/Src/main.c **** 
 915              		.loc 1 405 3 view .LVU240
 405:Core/Src/main.c **** 
 916              		.loc 1 405 27 is_stmt 0 view .LVU241
 917 0004 0023     		movs	r3, #0
 918 0006 0093     		str	r3, [sp]
 919 0008 0193     		str	r3, [sp, #4]
 410:Core/Src/main.c ****   htim7.Init.Prescaler = 15999;
 920              		.loc 1 410 3 is_stmt 1 view .LVU242
 410:Core/Src/main.c ****   htim7.Init.Prescaler = 15999;
 921              		.loc 1 410 18 is_stmt 0 view .LVU243
 922 000a 0E48     		ldr	r0, .L73
 923 000c 0E4A     		ldr	r2, .L73+4
 924 000e 0260     		str	r2, [r0]
 411:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 925              		.loc 1 411 3 is_stmt 1 view .LVU244
 411:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 926              		.loc 1 411 24 is_stmt 0 view .LVU245
 927 0010 43F67F62 		movw	r2, #15999
 928 0014 4260     		str	r2, [r0, #4]
 412:Core/Src/main.c ****   htim7.Init.Period = 350;
 929              		.loc 1 412 3 is_stmt 1 view .LVU246
 412:Core/Src/main.c ****   htim7.Init.Period = 350;
 930              		.loc 1 412 26 is_stmt 0 view .LVU247
 931 0016 8360     		str	r3, [r0, #8]
 413:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 932              		.loc 1 413 3 is_stmt 1 view .LVU248
 413:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 933              		.loc 1 413 21 is_stmt 0 view .LVU249
ARM GAS  /tmp/cct0DL0R.s 			page 32


 934 0018 4FF4AF72 		mov	r2, #350
 935 001c C260     		str	r2, [r0, #12]
 414:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 936              		.loc 1 414 3 is_stmt 1 view .LVU250
 414:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 937              		.loc 1 414 32 is_stmt 0 view .LVU251
 938 001e 8361     		str	r3, [r0, #24]
 415:Core/Src/main.c ****   {
 939              		.loc 1 415 3 is_stmt 1 view .LVU252
 415:Core/Src/main.c ****   {
 940              		.loc 1 415 7 is_stmt 0 view .LVU253
 941 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 942              	.LVL33:
 415:Core/Src/main.c ****   {
 943              		.loc 1 415 6 view .LVU254
 944 0024 50B9     		cbnz	r0, .L71
 419:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 945              		.loc 1 419 3 is_stmt 1 view .LVU255
 419:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 946              		.loc 1 419 37 is_stmt 0 view .LVU256
 947 0026 0023     		movs	r3, #0
 948 0028 0093     		str	r3, [sp]
 420:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 949              		.loc 1 420 3 is_stmt 1 view .LVU257
 420:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 950              		.loc 1 420 33 is_stmt 0 view .LVU258
 951 002a 0193     		str	r3, [sp, #4]
 421:Core/Src/main.c ****   {
 952              		.loc 1 421 3 is_stmt 1 view .LVU259
 421:Core/Src/main.c ****   {
 953              		.loc 1 421 7 is_stmt 0 view .LVU260
 954 002c 6946     		mov	r1, sp
 955 002e 0548     		ldr	r0, .L73
 956 0030 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 957              	.LVL34:
 421:Core/Src/main.c ****   {
 958              		.loc 1 421 6 view .LVU261
 959 0034 20B9     		cbnz	r0, .L72
 429:Core/Src/main.c **** 
 960              		.loc 1 429 1 view .LVU262
 961 0036 03B0     		add	sp, sp, #12
 962              		.cfi_remember_state
 963              		.cfi_def_cfa_offset 4
 964              		@ sp needed
 965 0038 5DF804FB 		ldr	pc, [sp], #4
 966              	.L71:
 967              		.cfi_restore_state
 417:Core/Src/main.c ****   }
 968              		.loc 1 417 5 is_stmt 1 view .LVU263
 969 003c FFF7FEFF 		bl	Error_Handler
 970              	.LVL35:
 971              	.L72:
 423:Core/Src/main.c ****   }
 972              		.loc 1 423 5 view .LVU264
 973 0040 FFF7FEFF 		bl	Error_Handler
 974              	.LVL36:
 975              	.L74:
ARM GAS  /tmp/cct0DL0R.s 			page 33


 976              		.align	2
 977              	.L73:
 978 0044 00000000 		.word	htim7
 979 0048 00140040 		.word	1073746944
 980              		.cfi_endproc
 981              	.LFE248:
 983              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 984              		.align	1
 985              		.syntax unified
 986              		.thumb
 987              		.thumb_func
 989              	MX_USART2_UART_Init:
 990              	.LFB249:
 437:Core/Src/main.c **** 
 991              		.loc 1 437 1 view -0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 0
 994              		@ frame_needed = 0, uses_anonymous_args = 0
 995 0000 08B5     		push	{r3, lr}
 996              		.cfi_def_cfa_offset 8
 997              		.cfi_offset 3, -8
 998              		.cfi_offset 14, -4
 446:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 999              		.loc 1 446 3 view .LVU266
 446:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 1000              		.loc 1 446 19 is_stmt 0 view .LVU267
 1001 0002 0A48     		ldr	r0, .L79
 1002 0004 0A4B     		ldr	r3, .L79+4
 1003 0006 0360     		str	r3, [r0]
 447:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1004              		.loc 1 447 3 is_stmt 1 view .LVU268
 447:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1005              		.loc 1 447 24 is_stmt 0 view .LVU269
 1006 0008 4FF41653 		mov	r3, #9600
 1007 000c 4360     		str	r3, [r0, #4]
 448:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1008              		.loc 1 448 3 is_stmt 1 view .LVU270
 448:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1009              		.loc 1 448 26 is_stmt 0 view .LVU271
 1010 000e 0023     		movs	r3, #0
 1011 0010 8360     		str	r3, [r0, #8]
 449:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1012              		.loc 1 449 3 is_stmt 1 view .LVU272
 449:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1013              		.loc 1 449 24 is_stmt 0 view .LVU273
 1014 0012 C360     		str	r3, [r0, #12]
 450:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1015              		.loc 1 450 3 is_stmt 1 view .LVU274
 450:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1016              		.loc 1 450 22 is_stmt 0 view .LVU275
 1017 0014 0361     		str	r3, [r0, #16]
 451:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1018              		.loc 1 451 3 is_stmt 1 view .LVU276
 451:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1019              		.loc 1 451 20 is_stmt 0 view .LVU277
 1020 0016 0C22     		movs	r2, #12
 1021 0018 4261     		str	r2, [r0, #20]
ARM GAS  /tmp/cct0DL0R.s 			page 34


 452:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1022              		.loc 1 452 3 is_stmt 1 view .LVU278
 452:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1023              		.loc 1 452 25 is_stmt 0 view .LVU279
 1024 001a 8361     		str	r3, [r0, #24]
 453:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1025              		.loc 1 453 3 is_stmt 1 view .LVU280
 453:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1026              		.loc 1 453 28 is_stmt 0 view .LVU281
 1027 001c C361     		str	r3, [r0, #28]
 454:Core/Src/main.c ****   {
 1028              		.loc 1 454 3 is_stmt 1 view .LVU282
 454:Core/Src/main.c ****   {
 1029              		.loc 1 454 7 is_stmt 0 view .LVU283
 1030 001e FFF7FEFF 		bl	HAL_UART_Init
 1031              	.LVL37:
 454:Core/Src/main.c ****   {
 1032              		.loc 1 454 6 view .LVU284
 1033 0022 00B9     		cbnz	r0, .L78
 462:Core/Src/main.c **** 
 1034              		.loc 1 462 1 view .LVU285
 1035 0024 08BD     		pop	{r3, pc}
 1036              	.L78:
 456:Core/Src/main.c ****   }
 1037              		.loc 1 456 5 is_stmt 1 view .LVU286
 1038 0026 FFF7FEFF 		bl	Error_Handler
 1039              	.LVL38:
 1040              	.L80:
 1041 002a 00BF     		.align	2
 1042              	.L79:
 1043 002c 00000000 		.word	huart2
 1044 0030 00440040 		.word	1073759232
 1045              		.cfi_endproc
 1046              	.LFE249:
 1048              		.section	.text.SystemClock_Config,"ax",%progbits
 1049              		.align	1
 1050              		.global	SystemClock_Config
 1051              		.syntax unified
 1052              		.thumb
 1053              		.thumb_func
 1055              	SystemClock_Config:
 1056              	.LFB244:
 215:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1057              		.loc 1 215 1 view -0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 80
 1060              		@ frame_needed = 0, uses_anonymous_args = 0
 1061 0000 00B5     		push	{lr}
 1062              		.cfi_def_cfa_offset 4
 1063              		.cfi_offset 14, -4
 1064 0002 95B0     		sub	sp, sp, #84
 1065              		.cfi_def_cfa_offset 88
 216:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1066              		.loc 1 216 3 view .LVU288
 216:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1067              		.loc 1 216 22 is_stmt 0 view .LVU289
 1068 0004 3422     		movs	r2, #52
ARM GAS  /tmp/cct0DL0R.s 			page 35


 1069 0006 0021     		movs	r1, #0
 1070 0008 07A8     		add	r0, sp, #28
 1071 000a FFF7FEFF 		bl	memset
 1072              	.LVL39:
 217:Core/Src/main.c **** 
 1073              		.loc 1 217 3 is_stmt 1 view .LVU290
 217:Core/Src/main.c **** 
 1074              		.loc 1 217 22 is_stmt 0 view .LVU291
 1075 000e 0023     		movs	r3, #0
 1076 0010 0293     		str	r3, [sp, #8]
 1077 0012 0393     		str	r3, [sp, #12]
 1078 0014 0493     		str	r3, [sp, #16]
 1079 0016 0593     		str	r3, [sp, #20]
 1080 0018 0693     		str	r3, [sp, #24]
 221:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1081              		.loc 1 221 3 is_stmt 1 view .LVU292
 1082              	.LBB10:
 221:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1083              		.loc 1 221 3 view .LVU293
 1084 001a 0093     		str	r3, [sp]
 221:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1085              		.loc 1 221 3 view .LVU294
 1086 001c 1A4A     		ldr	r2, .L87
 1087 001e 116C     		ldr	r1, [r2, #64]
 1088 0020 41F08051 		orr	r1, r1, #268435456
 1089 0024 1164     		str	r1, [r2, #64]
 221:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1090              		.loc 1 221 3 view .LVU295
 1091 0026 126C     		ldr	r2, [r2, #64]
 1092 0028 02F08052 		and	r2, r2, #268435456
 1093 002c 0092     		str	r2, [sp]
 221:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1094              		.loc 1 221 3 view .LVU296
 1095 002e 009A     		ldr	r2, [sp]
 1096              	.LBE10:
 221:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1097              		.loc 1 221 3 view .LVU297
 222:Core/Src/main.c **** 
 1098              		.loc 1 222 3 view .LVU298
 1099              	.LBB11:
 222:Core/Src/main.c **** 
 1100              		.loc 1 222 3 view .LVU299
 1101 0030 0193     		str	r3, [sp, #4]
 222:Core/Src/main.c **** 
 1102              		.loc 1 222 3 view .LVU300
 1103 0032 1649     		ldr	r1, .L87+4
 1104 0034 0A68     		ldr	r2, [r1]
 1105 0036 22F44042 		bic	r2, r2, #49152
 1106 003a 42F48042 		orr	r2, r2, #16384
 1107 003e 0A60     		str	r2, [r1]
 222:Core/Src/main.c **** 
 1108              		.loc 1 222 3 view .LVU301
 1109 0040 0A68     		ldr	r2, [r1]
 1110 0042 02F44042 		and	r2, r2, #49152
 1111 0046 0192     		str	r2, [sp, #4]
 222:Core/Src/main.c **** 
 1112              		.loc 1 222 3 view .LVU302
ARM GAS  /tmp/cct0DL0R.s 			page 36


 1113 0048 019A     		ldr	r2, [sp, #4]
 1114              	.LBE11:
 222:Core/Src/main.c **** 
 1115              		.loc 1 222 3 view .LVU303
 227:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1116              		.loc 1 227 3 view .LVU304
 227:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1117              		.loc 1 227 36 is_stmt 0 view .LVU305
 1118 004a 0222     		movs	r2, #2
 1119 004c 0792     		str	r2, [sp, #28]
 228:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1120              		.loc 1 228 3 is_stmt 1 view .LVU306
 228:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1121              		.loc 1 228 30 is_stmt 0 view .LVU307
 1122 004e 0122     		movs	r2, #1
 1123 0050 0A92     		str	r2, [sp, #40]
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1124              		.loc 1 229 3 is_stmt 1 view .LVU308
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1125              		.loc 1 229 41 is_stmt 0 view .LVU309
 1126 0052 1022     		movs	r2, #16
 1127 0054 0B92     		str	r2, [sp, #44]
 230:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1128              		.loc 1 230 3 is_stmt 1 view .LVU310
 230:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1129              		.loc 1 230 34 is_stmt 0 view .LVU311
 1130 0056 0D93     		str	r3, [sp, #52]
 231:Core/Src/main.c ****   {
 1131              		.loc 1 231 3 is_stmt 1 view .LVU312
 231:Core/Src/main.c ****   {
 1132              		.loc 1 231 7 is_stmt 0 view .LVU313
 1133 0058 07A8     		add	r0, sp, #28
 1134 005a FFF7FEFF 		bl	HAL_RCC_OscConfig
 1135              	.LVL40:
 231:Core/Src/main.c ****   {
 1136              		.loc 1 231 6 view .LVU314
 1137 005e 78B9     		cbnz	r0, .L85
 238:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1138              		.loc 1 238 3 is_stmt 1 view .LVU315
 238:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1139              		.loc 1 238 31 is_stmt 0 view .LVU316
 1140 0060 0F23     		movs	r3, #15
 1141 0062 0293     		str	r3, [sp, #8]
 240:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1142              		.loc 1 240 3 is_stmt 1 view .LVU317
 240:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1143              		.loc 1 240 34 is_stmt 0 view .LVU318
 1144 0064 0021     		movs	r1, #0
 1145 0066 0391     		str	r1, [sp, #12]
 241:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1146              		.loc 1 241 3 is_stmt 1 view .LVU319
 241:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1147              		.loc 1 241 35 is_stmt 0 view .LVU320
 1148 0068 0491     		str	r1, [sp, #16]
 242:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1149              		.loc 1 242 3 is_stmt 1 view .LVU321
 242:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
ARM GAS  /tmp/cct0DL0R.s 			page 37


 1150              		.loc 1 242 36 is_stmt 0 view .LVU322
 1151 006a 4FF48053 		mov	r3, #4096
 1152 006e 0593     		str	r3, [sp, #20]
 243:Core/Src/main.c **** 
 1153              		.loc 1 243 3 is_stmt 1 view .LVU323
 243:Core/Src/main.c **** 
 1154              		.loc 1 243 36 is_stmt 0 view .LVU324
 1155 0070 0691     		str	r1, [sp, #24]
 245:Core/Src/main.c ****   {
 1156              		.loc 1 245 3 is_stmt 1 view .LVU325
 245:Core/Src/main.c ****   {
 1157              		.loc 1 245 7 is_stmt 0 view .LVU326
 1158 0072 02A8     		add	r0, sp, #8
 1159 0074 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1160              	.LVL41:
 245:Core/Src/main.c ****   {
 1161              		.loc 1 245 6 view .LVU327
 1162 0078 20B9     		cbnz	r0, .L86
 249:Core/Src/main.c **** 
 1163              		.loc 1 249 1 view .LVU328
 1164 007a 15B0     		add	sp, sp, #84
 1165              		.cfi_remember_state
 1166              		.cfi_def_cfa_offset 4
 1167              		@ sp needed
 1168 007c 5DF804FB 		ldr	pc, [sp], #4
 1169              	.L85:
 1170              		.cfi_restore_state
 233:Core/Src/main.c ****   }
 1171              		.loc 1 233 5 is_stmt 1 view .LVU329
 1172 0080 FFF7FEFF 		bl	Error_Handler
 1173              	.LVL42:
 1174              	.L86:
 247:Core/Src/main.c ****   }
 1175              		.loc 1 247 5 view .LVU330
 1176 0084 FFF7FEFF 		bl	Error_Handler
 1177              	.LVL43:
 1178              	.L88:
 1179              		.align	2
 1180              	.L87:
 1181 0088 00380240 		.word	1073887232
 1182 008c 00700040 		.word	1073770496
 1183              		.cfi_endproc
 1184              	.LFE244:
 1186              		.section	.text.main,"ax",%progbits
 1187              		.align	1
 1188              		.global	main
 1189              		.syntax unified
 1190              		.thumb
 1191              		.thumb_func
 1193              	main:
 1194              	.LFB243:
 161:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1195              		.loc 1 161 1 view -0
 1196              		.cfi_startproc
 1197              		@ Volatile: function does not return.
 1198              		@ args = 0, pretend = 0, frame = 0
 1199              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cct0DL0R.s 			page 38


 1200 0000 08B5     		push	{r3, lr}
 1201              		.cfi_def_cfa_offset 8
 1202              		.cfi_offset 3, -8
 1203              		.cfi_offset 14, -4
 169:Core/Src/main.c **** 
 1204              		.loc 1 169 3 view .LVU332
 1205 0002 FFF7FEFF 		bl	HAL_Init
 1206              	.LVL44:
 176:Core/Src/main.c **** 
 1207              		.loc 1 176 3 view .LVU333
 1208 0006 FFF7FEFF 		bl	SystemClock_Config
 1209              	.LVL45:
 183:Core/Src/main.c ****   MX_ADC1_Init();
 1210              		.loc 1 183 3 view .LVU334
 1211 000a FFF7FEFF 		bl	MX_GPIO_Init
 1212              	.LVL46:
 184:Core/Src/main.c ****   MX_ADC2_Init();
 1213              		.loc 1 184 3 view .LVU335
 1214 000e FFF7FEFF 		bl	MX_ADC1_Init
 1215              	.LVL47:
 185:Core/Src/main.c ****   MX_TIM6_Init();
 1216              		.loc 1 185 3 view .LVU336
 1217 0012 FFF7FEFF 		bl	MX_ADC2_Init
 1218              	.LVL48:
 186:Core/Src/main.c ****   MX_TIM7_Init();
 1219              		.loc 1 186 3 view .LVU337
 1220 0016 FFF7FEFF 		bl	MX_TIM6_Init
 1221              	.LVL49:
 187:Core/Src/main.c ****   MX_USART2_UART_Init();
 1222              		.loc 1 187 3 view .LVU338
 1223 001a FFF7FEFF 		bl	MX_TIM7_Init
 1224              	.LVL50:
 188:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1225              		.loc 1 188 3 view .LVU339
 1226 001e FFF7FEFF 		bl	MX_USART2_UART_Init
 1227              	.LVL51:
 190:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim7);
 1228              		.loc 1 190 3 view .LVU340
 1229 0022 0948     		ldr	r0, .L92
 1230 0024 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1231              	.LVL52:
 191:Core/Src/main.c **** 
 1232              		.loc 1 191 3 view .LVU341
 1233 0028 0848     		ldr	r0, .L92+4
 1234 002a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1235              	.LVL53:
 193:Core/Src/main.c ****   emergency_int = 0;
 1236              		.loc 1 193 3 view .LVU342
 193:Core/Src/main.c ****   emergency_int = 0;
 1237              		.loc 1 193 13 is_stmt 0 view .LVU343
 1238 002e 0023     		movs	r3, #0
 1239 0030 074A     		ldr	r2, .L92+8
 1240 0032 1370     		strb	r3, [r2]
 194:Core/Src/main.c ****   check_sys_voltage = 0;
 1241              		.loc 1 194 3 is_stmt 1 view .LVU344
 194:Core/Src/main.c ****   check_sys_voltage = 0;
 1242              		.loc 1 194 17 is_stmt 0 view .LVU345
ARM GAS  /tmp/cct0DL0R.s 			page 39


 1243 0034 074A     		ldr	r2, .L92+12
 1244 0036 1370     		strb	r3, [r2]
 195:Core/Src/main.c ****   check_sensor = 0;
 1245              		.loc 1 195 3 is_stmt 1 view .LVU346
 195:Core/Src/main.c ****   check_sensor = 0;
 1246              		.loc 1 195 21 is_stmt 0 view .LVU347
 1247 0038 074A     		ldr	r2, .L92+16
 1248 003a 1370     		strb	r3, [r2]
 196:Core/Src/main.c ****   /* USER CODE END 2 */
 1249              		.loc 1 196 3 is_stmt 1 view .LVU348
 196:Core/Src/main.c ****   /* USER CODE END 2 */
 1250              		.loc 1 196 16 is_stmt 0 view .LVU349
 1251 003c 074A     		ldr	r2, .L92+20
 1252 003e 1370     		strb	r3, [r2]
 1253              	.L90:
 201:Core/Src/main.c ****   {
 1254              		.loc 1 201 3 is_stmt 1 discriminator 1 view .LVU350
 204:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 1255              		.loc 1 204 5 discriminator 1 view .LVU351
 1256 0040 FFF7FEFF 		bl	FSM_run
 1257              	.LVL54:
 201:Core/Src/main.c ****   {
 1258              		.loc 1 201 9 discriminator 1 view .LVU352
 1259 0044 FCE7     		b	.L90
 1260              	.L93:
 1261 0046 00BF     		.align	2
 1262              	.L92:
 1263 0048 00000000 		.word	htim6
 1264 004c 00000000 		.word	htim7
 1265 0050 00000000 		.word	cur_state
 1266 0054 00000000 		.word	emergency_int
 1267 0058 00000000 		.word	check_sys_voltage
 1268 005c 00000000 		.word	check_sensor
 1269              		.cfi_endproc
 1270              	.LFE243:
 1272              		.global	StateMachine
 1273              		.section	.data.StateMachine,"aw"
 1274              		.align	2
 1277              	StateMachine:
 1278 0000 00       		.byte	0
 1279 0001 000000   		.space	3
 1280 0004 00000000 		.word	fn_StateRunning
 1281 0008 01       		.byte	1
 1282 0009 000000   		.space	3
 1283 000c 00000000 		.word	fn_StateWaiting
 1284              		.global	last_message_time
 1285              		.section	.bss.last_message_time,"aw",%nobits
 1286              		.align	2
 1289              	last_message_time:
 1290 0000 00000000 		.space	4
 1291              		.global	check_sensor
 1292              		.section	.bss.check_sensor,"aw",%nobits
 1295              	check_sensor:
 1296 0000 00       		.space	1
 1297              		.global	check_sys_voltage
 1298              		.section	.bss.check_sys_voltage,"aw",%nobits
 1301              	check_sys_voltage:
ARM GAS  /tmp/cct0DL0R.s 			page 40


 1302 0000 00       		.space	1
 1303              		.global	emergency_int
 1304              		.section	.bss.emergency_int,"aw",%nobits
 1307              	emergency_int:
 1308 0000 00       		.space	1
 1309              		.global	cur_state
 1310              		.section	.bss.cur_state,"aw",%nobits
 1313              	cur_state:
 1314 0000 00       		.space	1
 1315              		.global	huart2
 1316              		.section	.bss.huart2,"aw",%nobits
 1317              		.align	2
 1320              	huart2:
 1321 0000 00000000 		.space	68
 1321      00000000 
 1321      00000000 
 1321      00000000 
 1321      00000000 
 1322              		.global	htim7
 1323              		.section	.bss.htim7,"aw",%nobits
 1324              		.align	2
 1327              	htim7:
 1328 0000 00000000 		.space	72
 1328      00000000 
 1328      00000000 
 1328      00000000 
 1328      00000000 
 1329              		.global	htim6
 1330              		.section	.bss.htim6,"aw",%nobits
 1331              		.align	2
 1334              	htim6:
 1335 0000 00000000 		.space	72
 1335      00000000 
 1335      00000000 
 1335      00000000 
 1335      00000000 
 1336              		.global	hadc2
 1337              		.section	.bss.hadc2,"aw",%nobits
 1338              		.align	2
 1341              	hadc2:
 1342 0000 00000000 		.space	72
 1342      00000000 
 1342      00000000 
 1342      00000000 
 1342      00000000 
 1343              		.global	hadc1
 1344              		.section	.bss.hadc1,"aw",%nobits
 1345              		.align	2
 1348              	hadc1:
 1349 0000 00000000 		.space	72
 1349      00000000 
 1349      00000000 
 1349      00000000 
 1349      00000000 
 1350              		.text
 1351              	.Letext0:
 1352              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
ARM GAS  /tmp/cct0DL0R.s 			page 41


 1353              		.file 4 "/home/alessandro/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 1354              		.file 5 "/home/alessandro/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 1355              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1356              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1357              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1358              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1359              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1360              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1361              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1362              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1363              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1364              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1365              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1366              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1367              		.file 18 "<built-in>"
ARM GAS  /tmp/cct0DL0R.s 			page 42


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cct0DL0R.s:21     .rodata.fn_StateRunning.str1.4:00000000 $d
     /tmp/cct0DL0R.s:28     .text.fn_StateRunning:00000000 $t
     /tmp/cct0DL0R.s:34     .text.fn_StateRunning:00000000 fn_StateRunning
     /tmp/cct0DL0R.s:123    .text.fn_StateRunning:0000005c $d
     /tmp/cct0DL0R.s:1307   .bss.emergency_int:00000000 emergency_int
     /tmp/cct0DL0R.s:1301   .bss.check_sys_voltage:00000000 check_sys_voltage
     /tmp/cct0DL0R.s:1295   .bss.check_sensor:00000000 check_sensor
     /tmp/cct0DL0R.s:1313   .bss.cur_state:00000000 cur_state
     /tmp/cct0DL0R.s:1289   .bss.last_message_time:00000000 last_message_time
     /tmp/cct0DL0R.s:1334   .bss.htim6:00000000 htim6
     /tmp/cct0DL0R.s:1327   .bss.htim7:00000000 htim7
     /tmp/cct0DL0R.s:1320   .bss.huart2:00000000 huart2
     /tmp/cct0DL0R.s:137    .rodata.fn_StateWaiting.str1.4:00000000 $d
     /tmp/cct0DL0R.s:142    .text.fn_StateWaiting:00000000 $t
     /tmp/cct0DL0R.s:148    .text.fn_StateWaiting:00000000 fn_StateWaiting
     /tmp/cct0DL0R.s:218    .text.fn_StateWaiting:00000048 $d
     /tmp/cct0DL0R.s:229    .text.MX_GPIO_Init:00000000 $t
     /tmp/cct0DL0R.s:234    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cct0DL0R.s:381    .text.MX_GPIO_Init:000000ac $d
     /tmp/cct0DL0R.s:388    .text.HAL_GPIO_EXTI_Callback:00000000 $t
     /tmp/cct0DL0R.s:394    .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
     /tmp/cct0DL0R.s:413    .text.HAL_GPIO_EXTI_Callback:00000008 $d
     /tmp/cct0DL0R.s:418    .rodata.HAL_TIM_PeriodElapsedCallback.str1.4:00000000 $d
     /tmp/cct0DL0R.s:422    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/cct0DL0R.s:428    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cct0DL0R.s:482    .text.HAL_TIM_PeriodElapsedCallback:0000002c $d
     /tmp/cct0DL0R.s:492    .rodata.FSM_run.str1.4:00000000 $d
     /tmp/cct0DL0R.s:496    .text.FSM_run:00000000 $t
     /tmp/cct0DL0R.s:502    .text.FSM_run:00000000 FSM_run
     /tmp/cct0DL0R.s:542    .text.FSM_run:00000024 $d
     /tmp/cct0DL0R.s:1277   .data.StateMachine:00000000 StateMachine
     /tmp/cct0DL0R.s:550    .text.Error_Handler:00000000 $t
     /tmp/cct0DL0R.s:556    .text.Error_Handler:00000000 Error_Handler
     /tmp/cct0DL0R.s:588    .text.MX_ADC1_Init:00000000 $t
     /tmp/cct0DL0R.s:593    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/cct0DL0R.s:694    .text.MX_ADC1_Init:0000005c $d
     /tmp/cct0DL0R.s:1348   .bss.hadc1:00000000 hadc1
     /tmp/cct0DL0R.s:701    .text.MX_ADC2_Init:00000000 $t
     /tmp/cct0DL0R.s:706    .text.MX_ADC2_Init:00000000 MX_ADC2_Init
     /tmp/cct0DL0R.s:807    .text.MX_ADC2_Init:0000005c $d
     /tmp/cct0DL0R.s:1341   .bss.hadc2:00000000 hadc2
     /tmp/cct0DL0R.s:814    .text.MX_TIM6_Init:00000000 $t
     /tmp/cct0DL0R.s:819    .text.MX_TIM6_Init:00000000 MX_TIM6_Init
     /tmp/cct0DL0R.s:893    .text.MX_TIM6_Init:00000044 $d
     /tmp/cct0DL0R.s:899    .text.MX_TIM7_Init:00000000 $t
     /tmp/cct0DL0R.s:904    .text.MX_TIM7_Init:00000000 MX_TIM7_Init
     /tmp/cct0DL0R.s:978    .text.MX_TIM7_Init:00000044 $d
     /tmp/cct0DL0R.s:984    .text.MX_USART2_UART_Init:00000000 $t
     /tmp/cct0DL0R.s:989    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/cct0DL0R.s:1043   .text.MX_USART2_UART_Init:0000002c $d
     /tmp/cct0DL0R.s:1049   .text.SystemClock_Config:00000000 $t
     /tmp/cct0DL0R.s:1055   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cct0DL0R.s:1181   .text.SystemClock_Config:00000088 $d
     /tmp/cct0DL0R.s:1187   .text.main:00000000 $t
     /tmp/cct0DL0R.s:1193   .text.main:00000000 main
ARM GAS  /tmp/cct0DL0R.s 			page 43


     /tmp/cct0DL0R.s:1263   .text.main:00000048 $d
     /tmp/cct0DL0R.s:1274   .data.StateMachine:00000000 $d
     /tmp/cct0DL0R.s:1286   .bss.last_message_time:00000000 $d
     /tmp/cct0DL0R.s:1296   .bss.check_sensor:00000000 $d
     /tmp/cct0DL0R.s:1302   .bss.check_sys_voltage:00000000 $d
     /tmp/cct0DL0R.s:1308   .bss.emergency_int:00000000 $d
     /tmp/cct0DL0R.s:1314   .bss.cur_state:00000000 $d
     /tmp/cct0DL0R.s:1317   .bss.huart2:00000000 $d
     /tmp/cct0DL0R.s:1324   .bss.htim7:00000000 $d
     /tmp/cct0DL0R.s:1331   .bss.htim6:00000000 $d
     /tmp/cct0DL0R.s:1338   .bss.hadc2:00000000 $d
     /tmp/cct0DL0R.s:1345   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_TIM_Base_Stop_IT
HAL_UART_Transmit
HAL_GetTick
HAL_TIM_Base_Start_IT
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
