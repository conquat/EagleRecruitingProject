ARM GAS  /tmp/cc8tt0S9.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.rodata.fn_StateWaiting.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 426F6172 		.ascii	"Board in waiting state - please press the emergency"
  23      6420696E 
  23      20776169 
  23      74696E67 
  23      20737461 
  24 0033 20627574 		.ascii	" button\012\000"
  24      746F6E0A 
  24      00
  25              		.section	.text.fn_StateWaiting,"ax",%progbits
  26              		.align	1
  27              		.global	fn_StateWaiting
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	fn_StateWaiting:
  33              	.LFB243:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/cc8tt0S9.s 			page 2


  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  44:Core/Src/main.c **** ADC_HandleTypeDef hadc2;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** TIM_HandleTypeDef htim6;
  47:Core/Src/main.c **** TIM_HandleTypeDef htim7;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** UART_HandleTypeDef huart2;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE END PV */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  56:Core/Src/main.c **** void SystemClock_Config(void);
  57:Core/Src/main.c **** static void MX_GPIO_Init(void);
  58:Core/Src/main.c **** static void MX_ADC1_Init(void);
  59:Core/Src/main.c **** static void MX_ADC2_Init(void);
  60:Core/Src/main.c **** static void MX_TIM6_Init(void);
  61:Core/Src/main.c **** static void MX_TIM7_Init(void);
  62:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  63:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* USER CODE END PFP */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  68:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  69:Core/Src/main.c **** State_t cur_state = STATE_RUNNING;
  70:Core/Src/main.c **** volatile uint8_t emergency_int = 0;
  71:Core/Src/main.c **** volatile uint8_t check_sys_voltage_int = 0;
  72:Core/Src/main.c **** volatile uint8_t check_sensor_int = 0;
  73:Core/Src/main.c **** unsigned long last_message_time = 0;
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  76:Core/Src/main.c **** {
ARM GAS  /tmp/cc8tt0S9.s 			page 3


  77:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
  78:Core/Src/main.c ****   UNUSED(GPIO_Pin);
  79:Core/Src/main.c ****   emergency_int = 1;
  80:Core/Src/main.c **** }
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  83:Core/Src/main.c **** {
  84:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
  85:Core/Src/main.c ****   UNUSED(htim);
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   if (htim == &htim6) {
  88:Core/Src/main.c ****     check_sensor_int = 1;
  89:Core/Src/main.c ****   } else if (htim == &htim7) {
  90:Core/Src/main.c ****     check_sys_voltage_int = 1;
  91:Core/Src/main.c ****   } else {
  92:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"timer error: unknown timer\n", 27, 100);
  93:Core/Src/main.c ****   }
  94:Core/Src/main.c **** }
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** void checkSensor(void) {
  97:Core/Src/main.c ****   int16_t sensor_value = 0;
  98:Core/Src/main.c ****   HAL_ADC_Start(&hadc1);
  99:Core/Src/main.c ****   if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 100:Core/Src/main.c ****     sensor_value = HAL_ADC_GetValue(&hadc1);
 101:Core/Src/main.c ****   }
 102:Core/Src/main.c ****   HAL_ADC_Stop(&hadc1);
 103:Core/Src/main.c ****   char tx_data[50];
 104:Core/Src/main.c ****   float force = (float)(sensor_value - 1265) / 2830.0 * 1500.0;
 105:Core/Src/main.c ****   snprintf(tx_data, 50, "%lu force: %f\n", HAL_GetTick(), force);
 106:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (const uint8_t *)tx_data, strlen(tx_data), 100);
 107:Core/Src/main.c **** }
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** float checkSystemVoltage(void) {
 110:Core/Src/main.c ****   float system_voltage = 0.0;
 111:Core/Src/main.c ****   HAL_ADC_Start(&hadc2);
 112:Core/Src/main.c ****   if (HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK) {
 113:Core/Src/main.c ****     system_voltage = (float)HAL_ADC_GetValue(&hadc2) / 4095.0 * 5.0;
 114:Core/Src/main.c ****   }
 115:Core/Src/main.c ****   HAL_ADC_Stop(&hadc2);
 116:Core/Src/main.c ****   return system_voltage;
 117:Core/Src/main.c **** }
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** void fn_StateRunning(void) {
 120:Core/Src/main.c ****   if (emergency_int) {
 121:Core/Src/main.c ****     emergency_int = 0;
 122:Core/Src/main.c ****     cur_state = STATE_WAITING;
 123:Core/Src/main.c ****     last_message_time = 0;
 124:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim6);
 125:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim7);
 126:Core/Src/main.c ****   }
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   if (check_sys_voltage_int) {
 129:Core/Src/main.c ****     check_sys_voltage_int = 0;
 130:Core/Src/main.c ****     float system_voltage = checkSystemVoltage();
 131:Core/Src/main.c ****     char tx_data[50];
 132:Core/Src/main.c ****     snprintf(tx_data, 50, "%lu system voltage: %fV\n", HAL_GetTick(), system_voltage);
 133:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)tx_data, strlen(tx_data), 100);
ARM GAS  /tmp/cc8tt0S9.s 			page 4


 134:Core/Src/main.c ****     if (system_voltage < 1.8 || system_voltage > 2.7) {
 135:Core/Src/main.c ****       cur_state = STATE_DANGER;
 136:Core/Src/main.c ****       if (system_voltage < 1.8) {
 137:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 138:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 139:Core/Src/main.c ****       } else {
 140:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 141:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 142:Core/Src/main.c ****       }
 143:Core/Src/main.c ****     }
 144:Core/Src/main.c ****   }
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****   if (check_sensor_int) {
 147:Core/Src/main.c ****     check_sensor_int = 0;
 148:Core/Src/main.c ****     checkSensor();
 149:Core/Src/main.c ****   }
 150:Core/Src/main.c **** }
 151:Core/Src/main.c **** 
 152:Core/Src/main.c **** void fn_StateWaiting(void) {
  34              		.loc 1 152 28 view -0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
  38 0000 10B5     		push	{r4, lr}
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 4, -8
  41              		.cfi_offset 14, -4
 153:Core/Src/main.c ****   if (emergency_int) {
  42              		.loc 1 153 3 view .LVU1
  43              		.loc 1 153 7 is_stmt 0 view .LVU2
  44 0002 134B     		ldr	r3, .L7
  45 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  46              		.loc 1 153 6 view .LVU3
  47 0006 43B9     		cbnz	r3, .L5
  48              	.L2:
 154:Core/Src/main.c ****     emergency_int = 0;
 155:Core/Src/main.c ****     cur_state = STATE_RUNNING;
 156:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim6);
 157:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim7);
 158:Core/Src/main.c ****     check_sys_voltage_int = 0;
 159:Core/Src/main.c ****     check_sensor_int = 0;
 160:Core/Src/main.c ****   }
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   if (HAL_GetTick() - last_message_time > 500) {
  49              		.loc 1 162 3 is_stmt 1 view .LVU4
  50              		.loc 1 162 7 is_stmt 0 view .LVU5
  51 0008 FFF7FEFF 		bl	HAL_GetTick
  52              	.LVL0:
  53              		.loc 1 162 21 view .LVU6
  54 000c 114B     		ldr	r3, .L7+4
  55 000e 1B68     		ldr	r3, [r3]
  56 0010 C01A     		subs	r0, r0, r3
  57              		.loc 1 162 6 view .LVU7
  58 0012 B0F5FA7F 		cmp	r0, #500
  59 0016 10D8     		bhi	.L6
  60              	.L1:
 163:Core/Src/main.c ****     last_message_time = HAL_GetTick();
ARM GAS  /tmp/cc8tt0S9.s 			page 5


 164:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"Board in waiting state - please press the emergenc
 165:Core/Src/main.c ****   }
 166:Core/Src/main.c **** }
  61              		.loc 1 166 1 view .LVU8
  62 0018 10BD     		pop	{r4, pc}
  63              	.L5:
 154:Core/Src/main.c ****     emergency_int = 0;
  64              		.loc 1 154 5 is_stmt 1 view .LVU9
 154:Core/Src/main.c ****     emergency_int = 0;
  65              		.loc 1 154 19 is_stmt 0 view .LVU10
  66 001a 0024     		movs	r4, #0
  67 001c 0C4B     		ldr	r3, .L7
  68 001e 1C70     		strb	r4, [r3]
 155:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim6);
  69              		.loc 1 155 5 is_stmt 1 view .LVU11
 155:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim6);
  70              		.loc 1 155 15 is_stmt 0 view .LVU12
  71 0020 0D4B     		ldr	r3, .L7+8
  72 0022 1C70     		strb	r4, [r3]
 156:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim7);
  73              		.loc 1 156 5 is_stmt 1 view .LVU13
  74 0024 0D48     		ldr	r0, .L7+12
  75 0026 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
  76              	.LVL1:
 157:Core/Src/main.c ****     check_sys_voltage_int = 0;
  77              		.loc 1 157 5 view .LVU14
  78 002a 0D48     		ldr	r0, .L7+16
  79 002c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
  80              	.LVL2:
 158:Core/Src/main.c ****     check_sensor_int = 0;
  81              		.loc 1 158 5 view .LVU15
 158:Core/Src/main.c ****     check_sensor_int = 0;
  82              		.loc 1 158 27 is_stmt 0 view .LVU16
  83 0030 0C4B     		ldr	r3, .L7+20
  84 0032 1C70     		strb	r4, [r3]
 159:Core/Src/main.c ****   }
  85              		.loc 1 159 5 is_stmt 1 view .LVU17
 159:Core/Src/main.c ****   }
  86              		.loc 1 159 22 is_stmt 0 view .LVU18
  87 0034 0C4B     		ldr	r3, .L7+24
  88 0036 1C70     		strb	r4, [r3]
  89 0038 E6E7     		b	.L2
  90              	.L6:
 163:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"Board in waiting state - please press the emergenc
  91              		.loc 1 163 5 is_stmt 1 view .LVU19
 163:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"Board in waiting state - please press the emergenc
  92              		.loc 1 163 25 is_stmt 0 view .LVU20
  93 003a FFF7FEFF 		bl	HAL_GetTick
  94              	.LVL3:
 163:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"Board in waiting state - please press the emergenc
  95              		.loc 1 163 23 view .LVU21
  96 003e 054B     		ldr	r3, .L7+4
  97 0040 1860     		str	r0, [r3]
 164:Core/Src/main.c ****   }
  98              		.loc 1 164 5 is_stmt 1 view .LVU22
  99 0042 6423     		movs	r3, #100
 100 0044 3B22     		movs	r2, #59
ARM GAS  /tmp/cc8tt0S9.s 			page 6


 101 0046 0949     		ldr	r1, .L7+28
 102 0048 0948     		ldr	r0, .L7+32
 103 004a FFF7FEFF 		bl	HAL_UART_Transmit
 104              	.LVL4:
 105              		.loc 1 166 1 is_stmt 0 view .LVU23
 106 004e E3E7     		b	.L1
 107              	.L8:
 108              		.align	2
 109              	.L7:
 110 0050 00000000 		.word	emergency_int
 111 0054 00000000 		.word	last_message_time
 112 0058 00000000 		.word	cur_state
 113 005c 00000000 		.word	htim6
 114 0060 00000000 		.word	htim7
 115 0064 00000000 		.word	check_sys_voltage_int
 116 0068 00000000 		.word	check_sensor_int
 117 006c 00000000 		.word	.LC0
 118 0070 00000000 		.word	huart2
 119              		.cfi_endproc
 120              	.LFE243:
 122              		.section	.text.MX_GPIO_Init,"ax",%progbits
 123              		.align	1
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 128              	MX_GPIO_Init:
 129              	.LFB253:
 167:Core/Src/main.c **** 
 168:Core/Src/main.c **** void fn_StateDanger(void) {
 169:Core/Src/main.c ****   if (emergency_int) {
 170:Core/Src/main.c ****     emergency_int = 0;
 171:Core/Src/main.c ****     cur_state = STATE_WAITING;
 172:Core/Src/main.c ****     last_message_time = 0;
 173:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim6);
 174:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim7);
 175:Core/Src/main.c ****   }
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   if (check_sys_voltage_int) {
 178:Core/Src/main.c ****     check_sys_voltage_int = 0;
 179:Core/Src/main.c ****     float system_voltage = checkSystemVoltage();
 180:Core/Src/main.c ****     char tx_data[50];
 181:Core/Src/main.c ****     snprintf(tx_data, 50, "%lu system voltage: %fV\n", HAL_GetTick(), system_voltage);
 182:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)tx_data, strlen(tx_data), 100);
 183:Core/Src/main.c ****     if (system_voltage < 1.8) {
 184:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 185:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 186:Core/Src/main.c ****     } else if (system_voltage > 2.7) {
 187:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 188:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 189:Core/Src/main.c ****     } else {
 190:Core/Src/main.c ****       cur_state = STATE_RUNNING;
 191:Core/Src/main.c ****     }
 192:Core/Src/main.c ****   }
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   if (check_sensor_int) {
 195:Core/Src/main.c ****     check_sensor_int = 0;
 196:Core/Src/main.c ****     checkSensor();
ARM GAS  /tmp/cc8tt0S9.s 			page 7


 197:Core/Src/main.c ****   }
 198:Core/Src/main.c **** }
 199:Core/Src/main.c **** 
 200:Core/Src/main.c **** StateMachine_t StateMachine[] = {
 201:Core/Src/main.c ****   {STATE_RUNNING, fn_StateRunning},
 202:Core/Src/main.c ****   {STATE_WAITING, fn_StateWaiting},
 203:Core/Src/main.c ****   {STATE_DANGER, fn_StateDanger}
 204:Core/Src/main.c **** } ;
 205:Core/Src/main.c **** 
 206:Core/Src/main.c **** void FSM_run(void){
 207:Core/Src/main.c ****   if(cur_state < NUM_STATES){
 208:Core/Src/main.c ****     (*StateMachine[cur_state].func)();
 209:Core/Src/main.c ****   }
 210:Core/Src/main.c ****   else{
 211:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"FSM error\n", 10, 100);
 212:Core/Src/main.c ****   }
 213:Core/Src/main.c **** }
 214:Core/Src/main.c **** /* USER CODE END 0 */
 215:Core/Src/main.c **** 
 216:Core/Src/main.c **** /**
 217:Core/Src/main.c ****   * @brief  The application entry point.
 218:Core/Src/main.c ****   * @retval int
 219:Core/Src/main.c ****   */
 220:Core/Src/main.c **** int main(void)
 221:Core/Src/main.c **** {
 222:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   /* USER CODE END 1 */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 229:Core/Src/main.c ****   HAL_Init();
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* USER CODE END Init */
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****   /* Configure the system clock */
 236:Core/Src/main.c ****   SystemClock_Config();
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* USER CODE END SysInit */
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   /* Initialize all configured peripherals */
 243:Core/Src/main.c ****   MX_GPIO_Init();
 244:Core/Src/main.c ****   MX_ADC1_Init();
 245:Core/Src/main.c ****   MX_ADC2_Init();
 246:Core/Src/main.c ****   MX_TIM6_Init();
 247:Core/Src/main.c ****   MX_TIM7_Init();
 248:Core/Src/main.c ****   MX_USART2_UART_Init();
 249:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 250:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim6);
 251:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim7);
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   cur_state = STATE_RUNNING;
ARM GAS  /tmp/cc8tt0S9.s 			page 8


 254:Core/Src/main.c ****   emergency_int = 0;
 255:Core/Src/main.c ****   check_sys_voltage_int = 0;
 256:Core/Src/main.c ****   check_sensor_int = 0;
 257:Core/Src/main.c ****   /* USER CODE END 2 */
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* Infinite loop */
 260:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 261:Core/Src/main.c ****   while (1)
 262:Core/Src/main.c ****   {
 263:Core/Src/main.c ****     /* USER CODE END WHILE */
 264:Core/Src/main.c ****     FSM_run();
 265:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 266:Core/Src/main.c ****   }
 267:Core/Src/main.c ****   /* USER CODE END 3 */
 268:Core/Src/main.c **** }
 269:Core/Src/main.c **** 
 270:Core/Src/main.c **** /**
 271:Core/Src/main.c ****   * @brief System Clock Configuration
 272:Core/Src/main.c ****   * @retval None
 273:Core/Src/main.c ****   */
 274:Core/Src/main.c **** void SystemClock_Config(void)
 275:Core/Src/main.c **** {
 276:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 277:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 280:Core/Src/main.c ****   */
 281:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 282:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 285:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 286:Core/Src/main.c ****   */
 287:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 288:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 289:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 290:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 291:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 292:Core/Src/main.c ****   {
 293:Core/Src/main.c ****     Error_Handler();
 294:Core/Src/main.c ****   }
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 297:Core/Src/main.c ****   */
 298:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 299:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 300:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 301:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 302:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 303:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 306:Core/Src/main.c ****   {
 307:Core/Src/main.c ****     Error_Handler();
 308:Core/Src/main.c ****   }
 309:Core/Src/main.c **** }
 310:Core/Src/main.c **** 
ARM GAS  /tmp/cc8tt0S9.s 			page 9


 311:Core/Src/main.c **** /**
 312:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 313:Core/Src/main.c ****   * @param None
 314:Core/Src/main.c ****   * @retval None
 315:Core/Src/main.c ****   */
 316:Core/Src/main.c **** static void MX_ADC1_Init(void)
 317:Core/Src/main.c **** {
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 322:Core/Src/main.c **** 
 323:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 324:Core/Src/main.c **** 
 325:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 330:Core/Src/main.c ****   */
 331:Core/Src/main.c ****   hadc1.Instance = ADC1;
 332:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 333:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 334:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 335:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 336:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 337:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 338:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 339:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 340:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 341:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 342:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 343:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 344:Core/Src/main.c ****   {
 345:Core/Src/main.c ****     Error_Handler();
 346:Core/Src/main.c ****   }
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 349:Core/Src/main.c ****   */
 350:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 351:Core/Src/main.c ****   sConfig.Rank = 1;
 352:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 353:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 354:Core/Src/main.c ****   {
 355:Core/Src/main.c ****     Error_Handler();
 356:Core/Src/main.c ****   }
 357:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 358:Core/Src/main.c **** 
 359:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 360:Core/Src/main.c **** 
 361:Core/Src/main.c **** }
 362:Core/Src/main.c **** 
 363:Core/Src/main.c **** /**
 364:Core/Src/main.c ****   * @brief ADC2 Initialization Function
 365:Core/Src/main.c ****   * @param None
 366:Core/Src/main.c ****   * @retval None
 367:Core/Src/main.c ****   */
ARM GAS  /tmp/cc8tt0S9.s 			page 10


 368:Core/Src/main.c **** static void MX_ADC2_Init(void)
 369:Core/Src/main.c **** {
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 0 */
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /* USER CODE END ADC2_Init 0 */
 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 376:Core/Src/main.c **** 
 377:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 1 */
 378:Core/Src/main.c **** 
 379:Core/Src/main.c ****   /* USER CODE END ADC2_Init 1 */
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 382:Core/Src/main.c ****   */
 383:Core/Src/main.c ****   hadc2.Instance = ADC2;
 384:Core/Src/main.c ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 385:Core/Src/main.c ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 386:Core/Src/main.c ****   hadc2.Init.ScanConvMode = DISABLE;
 387:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 388:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 389:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 390:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 391:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 392:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 393:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 394:Core/Src/main.c ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 395:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 396:Core/Src/main.c ****   {
 397:Core/Src/main.c ****     Error_Handler();
 398:Core/Src/main.c ****   }
 399:Core/Src/main.c **** 
 400:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 401:Core/Src/main.c ****   */
 402:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 403:Core/Src/main.c ****   sConfig.Rank = 1;
 404:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 405:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 406:Core/Src/main.c ****   {
 407:Core/Src/main.c ****     Error_Handler();
 408:Core/Src/main.c ****   }
 409:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 2 */
 410:Core/Src/main.c **** 
 411:Core/Src/main.c ****   /* USER CODE END ADC2_Init 2 */
 412:Core/Src/main.c **** 
 413:Core/Src/main.c **** }
 414:Core/Src/main.c **** 
 415:Core/Src/main.c **** /**
 416:Core/Src/main.c ****   * @brief TIM6 Initialization Function
 417:Core/Src/main.c ****   * @param None
 418:Core/Src/main.c ****   * @retval None
 419:Core/Src/main.c ****   */
 420:Core/Src/main.c **** static void MX_TIM6_Init(void)
 421:Core/Src/main.c **** {
 422:Core/Src/main.c **** 
 423:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 0 */
 424:Core/Src/main.c **** 
ARM GAS  /tmp/cc8tt0S9.s 			page 11


 425:Core/Src/main.c ****   /* USER CODE END TIM6_Init 0 */
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 1 */
 430:Core/Src/main.c **** 
 431:Core/Src/main.c ****   /* USER CODE END TIM6_Init 1 */
 432:Core/Src/main.c ****   htim6.Instance = TIM6;
 433:Core/Src/main.c ****   htim6.Init.Prescaler = 15999;
 434:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 435:Core/Src/main.c ****   htim6.Init.Period = 200;
 436:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 437:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 438:Core/Src/main.c ****   {
 439:Core/Src/main.c ****     Error_Handler();
 440:Core/Src/main.c ****   }
 441:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 442:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 443:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 444:Core/Src/main.c ****   {
 445:Core/Src/main.c ****     Error_Handler();
 446:Core/Src/main.c ****   }
 447:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 2 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE END TIM6_Init 2 */
 450:Core/Src/main.c **** 
 451:Core/Src/main.c **** }
 452:Core/Src/main.c **** 
 453:Core/Src/main.c **** /**
 454:Core/Src/main.c ****   * @brief TIM7 Initialization Function
 455:Core/Src/main.c ****   * @param None
 456:Core/Src/main.c ****   * @retval None
 457:Core/Src/main.c ****   */
 458:Core/Src/main.c **** static void MX_TIM7_Init(void)
 459:Core/Src/main.c **** {
 460:Core/Src/main.c **** 
 461:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 0 */
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /* USER CODE END TIM7_Init 0 */
 464:Core/Src/main.c **** 
 465:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 466:Core/Src/main.c **** 
 467:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 1 */
 468:Core/Src/main.c **** 
 469:Core/Src/main.c ****   /* USER CODE END TIM7_Init 1 */
 470:Core/Src/main.c ****   htim7.Instance = TIM7;
 471:Core/Src/main.c ****   htim7.Init.Prescaler = 15999;
 472:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 473:Core/Src/main.c ****   htim7.Init.Period = 350;
 474:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 475:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 476:Core/Src/main.c ****   {
 477:Core/Src/main.c ****     Error_Handler();
 478:Core/Src/main.c ****   }
 479:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 480:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 481:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
ARM GAS  /tmp/cc8tt0S9.s 			page 12


 482:Core/Src/main.c ****   {
 483:Core/Src/main.c ****     Error_Handler();
 484:Core/Src/main.c ****   }
 485:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 2 */
 486:Core/Src/main.c **** 
 487:Core/Src/main.c ****   /* USER CODE END TIM7_Init 2 */
 488:Core/Src/main.c **** 
 489:Core/Src/main.c **** }
 490:Core/Src/main.c **** 
 491:Core/Src/main.c **** /**
 492:Core/Src/main.c ****   * @brief USART2 Initialization Function
 493:Core/Src/main.c ****   * @param None
 494:Core/Src/main.c ****   * @retval None
 495:Core/Src/main.c ****   */
 496:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 497:Core/Src/main.c **** {
 498:Core/Src/main.c **** 
 499:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 500:Core/Src/main.c **** 
 501:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 502:Core/Src/main.c **** 
 503:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 504:Core/Src/main.c **** 
 505:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 506:Core/Src/main.c ****   huart2.Instance = USART2;
 507:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 508:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 509:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 510:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 511:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 512:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 513:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 514:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 515:Core/Src/main.c ****   {
 516:Core/Src/main.c ****     Error_Handler();
 517:Core/Src/main.c ****   }
 518:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 519:Core/Src/main.c **** 
 520:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 521:Core/Src/main.c **** 
 522:Core/Src/main.c **** }
 523:Core/Src/main.c **** 
 524:Core/Src/main.c **** /**
 525:Core/Src/main.c ****   * @brief GPIO Initialization Function
 526:Core/Src/main.c ****   * @param None
 527:Core/Src/main.c ****   * @retval None
 528:Core/Src/main.c ****   */
 529:Core/Src/main.c **** static void MX_GPIO_Init(void)
 530:Core/Src/main.c **** {
 130              		.loc 1 530 1 is_stmt 1 view -0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 40
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134 0000 70B5     		push	{r4, r5, r6, lr}
 135              		.cfi_def_cfa_offset 16
 136              		.cfi_offset 4, -16
 137              		.cfi_offset 5, -12
ARM GAS  /tmp/cc8tt0S9.s 			page 13


 138              		.cfi_offset 6, -8
 139              		.cfi_offset 14, -4
 140 0002 8AB0     		sub	sp, sp, #40
 141              		.cfi_def_cfa_offset 56
 531:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 142              		.loc 1 531 3 view .LVU25
 143              		.loc 1 531 20 is_stmt 0 view .LVU26
 144 0004 0024     		movs	r4, #0
 145 0006 0594     		str	r4, [sp, #20]
 146 0008 0694     		str	r4, [sp, #24]
 147 000a 0794     		str	r4, [sp, #28]
 148 000c 0894     		str	r4, [sp, #32]
 149 000e 0994     		str	r4, [sp, #36]
 532:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 533:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 534:Core/Src/main.c **** 
 535:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 536:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 150              		.loc 1 536 3 is_stmt 1 view .LVU27
 151              	.LBB4:
 152              		.loc 1 536 3 view .LVU28
 153 0010 0194     		str	r4, [sp, #4]
 154              		.loc 1 536 3 view .LVU29
 155 0012 264B     		ldr	r3, .L11
 156 0014 1A6B     		ldr	r2, [r3, #48]
 157 0016 42F00402 		orr	r2, r2, #4
 158 001a 1A63     		str	r2, [r3, #48]
 159              		.loc 1 536 3 view .LVU30
 160 001c 1A6B     		ldr	r2, [r3, #48]
 161 001e 02F00402 		and	r2, r2, #4
 162 0022 0192     		str	r2, [sp, #4]
 163              		.loc 1 536 3 view .LVU31
 164 0024 019A     		ldr	r2, [sp, #4]
 165              	.LBE4:
 166              		.loc 1 536 3 view .LVU32
 537:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 167              		.loc 1 537 3 view .LVU33
 168              	.LBB5:
 169              		.loc 1 537 3 view .LVU34
 170 0026 0294     		str	r4, [sp, #8]
 171              		.loc 1 537 3 view .LVU35
 172 0028 1A6B     		ldr	r2, [r3, #48]
 173 002a 42F08002 		orr	r2, r2, #128
 174 002e 1A63     		str	r2, [r3, #48]
 175              		.loc 1 537 3 view .LVU36
 176 0030 1A6B     		ldr	r2, [r3, #48]
 177 0032 02F08002 		and	r2, r2, #128
 178 0036 0292     		str	r2, [sp, #8]
 179              		.loc 1 537 3 view .LVU37
 180 0038 029A     		ldr	r2, [sp, #8]
 181              	.LBE5:
 182              		.loc 1 537 3 view .LVU38
 538:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 183              		.loc 1 538 3 view .LVU39
 184              	.LBB6:
 185              		.loc 1 538 3 view .LVU40
 186 003a 0394     		str	r4, [sp, #12]
ARM GAS  /tmp/cc8tt0S9.s 			page 14


 187              		.loc 1 538 3 view .LVU41
 188 003c 1A6B     		ldr	r2, [r3, #48]
 189 003e 42F00102 		orr	r2, r2, #1
 190 0042 1A63     		str	r2, [r3, #48]
 191              		.loc 1 538 3 view .LVU42
 192 0044 1A6B     		ldr	r2, [r3, #48]
 193 0046 02F00102 		and	r2, r2, #1
 194 004a 0392     		str	r2, [sp, #12]
 195              		.loc 1 538 3 view .LVU43
 196 004c 039A     		ldr	r2, [sp, #12]
 197              	.LBE6:
 198              		.loc 1 538 3 view .LVU44
 539:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 199              		.loc 1 539 3 view .LVU45
 200              	.LBB7:
 201              		.loc 1 539 3 view .LVU46
 202 004e 0494     		str	r4, [sp, #16]
 203              		.loc 1 539 3 view .LVU47
 204 0050 1A6B     		ldr	r2, [r3, #48]
 205 0052 42F00202 		orr	r2, r2, #2
 206 0056 1A63     		str	r2, [r3, #48]
 207              		.loc 1 539 3 view .LVU48
 208 0058 1B6B     		ldr	r3, [r3, #48]
 209 005a 03F00203 		and	r3, r3, #2
 210 005e 0493     		str	r3, [sp, #16]
 211              		.loc 1 539 3 view .LVU49
 212 0060 049B     		ldr	r3, [sp, #16]
 213              	.LBE7:
 214              		.loc 1 539 3 view .LVU50
 540:Core/Src/main.c **** 
 541:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 542:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 215              		.loc 1 542 3 view .LVU51
 216 0062 134E     		ldr	r6, .L11+4
 217 0064 2246     		mov	r2, r4
 218 0066 6021     		movs	r1, #96
 219 0068 3046     		mov	r0, r6
 220 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 221              	.LVL5:
 543:Core/Src/main.c **** 
 544:Core/Src/main.c ****   /*Configure GPIO pin : PC13 */
 545:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 222              		.loc 1 545 3 view .LVU52
 223              		.loc 1 545 23 is_stmt 0 view .LVU53
 224 006e 4FF40053 		mov	r3, #8192
 225 0072 0593     		str	r3, [sp, #20]
 546:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 226              		.loc 1 546 3 is_stmt 1 view .LVU54
 227              		.loc 1 546 24 is_stmt 0 view .LVU55
 228 0074 4FF40413 		mov	r3, #2162688
 229 0078 0693     		str	r3, [sp, #24]
 547:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 230              		.loc 1 547 3 is_stmt 1 view .LVU56
 231              		.loc 1 547 24 is_stmt 0 view .LVU57
 232 007a 0125     		movs	r5, #1
 233 007c 0795     		str	r5, [sp, #28]
 548:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
ARM GAS  /tmp/cc8tt0S9.s 			page 15


 234              		.loc 1 548 3 is_stmt 1 view .LVU58
 235 007e 05A9     		add	r1, sp, #20
 236 0080 0C48     		ldr	r0, .L11+8
 237 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 238              	.LVL6:
 549:Core/Src/main.c **** 
 550:Core/Src/main.c ****   /*Configure GPIO pins : LD2_Pin PA6 */
 551:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 239              		.loc 1 551 3 view .LVU59
 240              		.loc 1 551 23 is_stmt 0 view .LVU60
 241 0086 6023     		movs	r3, #96
 242 0088 0593     		str	r3, [sp, #20]
 552:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 243              		.loc 1 552 3 is_stmt 1 view .LVU61
 244              		.loc 1 552 24 is_stmt 0 view .LVU62
 245 008a 0695     		str	r5, [sp, #24]
 553:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 246              		.loc 1 553 3 is_stmt 1 view .LVU63
 247              		.loc 1 553 24 is_stmt 0 view .LVU64
 248 008c 0794     		str	r4, [sp, #28]
 554:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 249              		.loc 1 554 3 is_stmt 1 view .LVU65
 250              		.loc 1 554 25 is_stmt 0 view .LVU66
 251 008e 0894     		str	r4, [sp, #32]
 555:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 252              		.loc 1 555 3 is_stmt 1 view .LVU67
 253 0090 05A9     		add	r1, sp, #20
 254 0092 3046     		mov	r0, r6
 255 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 256              	.LVL7:
 556:Core/Src/main.c **** 
 557:Core/Src/main.c ****   /* EXTI interrupt init*/
 558:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 257              		.loc 1 558 3 view .LVU68
 258 0098 2A46     		mov	r2, r5
 259 009a 2146     		mov	r1, r4
 260 009c 2820     		movs	r0, #40
 261 009e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 262              	.LVL8:
 559:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 263              		.loc 1 559 3 view .LVU69
 264 00a2 2820     		movs	r0, #40
 265 00a4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 266              	.LVL9:
 560:Core/Src/main.c **** 
 561:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 562:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 563:Core/Src/main.c **** }
 267              		.loc 1 563 1 is_stmt 0 view .LVU70
 268 00a8 0AB0     		add	sp, sp, #40
 269              		.cfi_def_cfa_offset 16
 270              		@ sp needed
 271 00aa 70BD     		pop	{r4, r5, r6, pc}
 272              	.L12:
 273              		.align	2
 274              	.L11:
 275 00ac 00380240 		.word	1073887232
ARM GAS  /tmp/cc8tt0S9.s 			page 16


 276 00b0 00000240 		.word	1073872896
 277 00b4 00080240 		.word	1073874944
 278              		.cfi_endproc
 279              	.LFE253:
 281              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 282              		.align	1
 283              		.global	HAL_GPIO_EXTI_Callback
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 288              	HAL_GPIO_EXTI_Callback:
 289              	.LVL10:
 290              	.LFB238:
  76:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
 291              		.loc 1 76 1 is_stmt 1 view -0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		@ link register save eliminated.
  78:Core/Src/main.c ****   emergency_int = 1;
 296              		.loc 1 78 3 view .LVU72
  79:Core/Src/main.c **** }
 297              		.loc 1 79 3 view .LVU73
  79:Core/Src/main.c **** }
 298              		.loc 1 79 17 is_stmt 0 view .LVU74
 299 0000 014B     		ldr	r3, .L14
 300 0002 0122     		movs	r2, #1
 301 0004 1A70     		strb	r2, [r3]
  80:Core/Src/main.c **** 
 302              		.loc 1 80 1 view .LVU75
 303 0006 7047     		bx	lr
 304              	.L15:
 305              		.align	2
 306              	.L14:
 307 0008 00000000 		.word	emergency_int
 308              		.cfi_endproc
 309              	.LFE238:
 311              		.section	.rodata.HAL_TIM_PeriodElapsedCallback.str1.4,"aMS",%progbits,1
 312              		.align	2
 313              	.LC1:
 314 0000 74696D65 		.ascii	"timer error: unknown timer\012\000"
 314      72206572 
 314      726F723A 
 314      20756E6B 
 314      6E6F776E 
 315              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 316              		.align	1
 317              		.global	HAL_TIM_PeriodElapsedCallback
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 322              	HAL_TIM_PeriodElapsedCallback:
 323              	.LVL11:
 324              	.LFB239:
  83:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
 325              		.loc 1 83 1 is_stmt 1 view -0
 326              		.cfi_startproc
ARM GAS  /tmp/cc8tt0S9.s 			page 17


 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
  83:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
 329              		.loc 1 83 1 is_stmt 0 view .LVU77
 330 0000 08B5     		push	{r3, lr}
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 3, -8
 333              		.cfi_offset 14, -4
  85:Core/Src/main.c **** 
 334              		.loc 1 85 3 is_stmt 1 view .LVU78
  87:Core/Src/main.c ****     check_sensor_int = 1;
 335              		.loc 1 87 3 view .LVU79
  87:Core/Src/main.c ****     check_sensor_int = 1;
 336              		.loc 1 87 6 is_stmt 0 view .LVU80
 337 0002 0A4B     		ldr	r3, .L23
 338 0004 9842     		cmp	r0, r3
 339 0006 09D0     		beq	.L21
  89:Core/Src/main.c ****     check_sys_voltage_int = 1;
 340              		.loc 1 89 10 is_stmt 1 view .LVU81
  89:Core/Src/main.c ****     check_sys_voltage_int = 1;
 341              		.loc 1 89 13 is_stmt 0 view .LVU82
 342 0008 094B     		ldr	r3, .L23+4
 343 000a 9842     		cmp	r0, r3
 344 000c 0AD0     		beq	.L22
  92:Core/Src/main.c ****   }
 345              		.loc 1 92 5 is_stmt 1 view .LVU83
 346 000e 6423     		movs	r3, #100
 347 0010 1B22     		movs	r2, #27
 348 0012 0849     		ldr	r1, .L23+8
 349 0014 0848     		ldr	r0, .L23+12
 350              	.LVL12:
  92:Core/Src/main.c ****   }
 351              		.loc 1 92 5 is_stmt 0 view .LVU84
 352 0016 FFF7FEFF 		bl	HAL_UART_Transmit
 353              	.LVL13:
 354              	.L16:
  94:Core/Src/main.c **** 
 355              		.loc 1 94 1 view .LVU85
 356 001a 08BD     		pop	{r3, pc}
 357              	.LVL14:
 358              	.L21:
  88:Core/Src/main.c ****   } else if (htim == &htim7) {
 359              		.loc 1 88 5 is_stmt 1 view .LVU86
  88:Core/Src/main.c ****   } else if (htim == &htim7) {
 360              		.loc 1 88 22 is_stmt 0 view .LVU87
 361 001c 074B     		ldr	r3, .L23+16
 362 001e 0122     		movs	r2, #1
 363 0020 1A70     		strb	r2, [r3]
 364 0022 FAE7     		b	.L16
 365              	.L22:
  90:Core/Src/main.c ****   } else {
 366              		.loc 1 90 5 is_stmt 1 view .LVU88
  90:Core/Src/main.c ****   } else {
 367              		.loc 1 90 27 is_stmt 0 view .LVU89
 368 0024 064B     		ldr	r3, .L23+20
 369 0026 0122     		movs	r2, #1
 370 0028 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cc8tt0S9.s 			page 18


 371 002a F6E7     		b	.L16
 372              	.L24:
 373              		.align	2
 374              	.L23:
 375 002c 00000000 		.word	htim6
 376 0030 00000000 		.word	htim7
 377 0034 00000000 		.word	.LC1
 378 0038 00000000 		.word	huart2
 379 003c 00000000 		.word	check_sensor_int
 380 0040 00000000 		.word	check_sys_voltage_int
 381              		.cfi_endproc
 382              	.LFE239:
 384              		.global	__aeabi_f2d
 385              		.global	__aeabi_ddiv
 386              		.global	__aeabi_dmul
 387              		.global	__aeabi_d2f
 388              		.section	.rodata.checkSensor.str1.4,"aMS",%progbits,1
 389              		.align	2
 390              	.LC2:
 391 0000 256C7520 		.ascii	"%lu force: %f\012\000"
 391      666F7263 
 391      653A2025 
 391      660A00
 392              		.section	.text.checkSensor,"ax",%progbits
 393              		.align	1
 394              		.global	checkSensor
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 399              	checkSensor:
 400              	.LFB240:
  96:Core/Src/main.c ****   int16_t sensor_value = 0;
 401              		.loc 1 96 24 is_stmt 1 view -0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 56
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405 0000 30B5     		push	{r4, r5, lr}
 406              		.cfi_def_cfa_offset 12
 407              		.cfi_offset 4, -12
 408              		.cfi_offset 5, -8
 409              		.cfi_offset 14, -4
 410 0002 91B0     		sub	sp, sp, #68
 411              		.cfi_def_cfa_offset 80
  97:Core/Src/main.c ****   HAL_ADC_Start(&hadc1);
 412              		.loc 1 97 3 view .LVU91
 413              	.LVL15:
  98:Core/Src/main.c ****   if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 414              		.loc 1 98 3 view .LVU92
 415 0004 264C     		ldr	r4, .L30+16
 416 0006 2046     		mov	r0, r4
 417 0008 FFF7FEFF 		bl	HAL_ADC_Start
 418              	.LVL16:
  99:Core/Src/main.c ****     sensor_value = HAL_ADC_GetValue(&hadc1);
 419              		.loc 1 99 3 view .LVU93
  99:Core/Src/main.c ****     sensor_value = HAL_ADC_GetValue(&hadc1);
 420              		.loc 1 99 7 is_stmt 0 view .LVU94
 421 000c 0A21     		movs	r1, #10
ARM GAS  /tmp/cc8tt0S9.s 			page 19


 422 000e 2046     		mov	r0, r4
 423 0010 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 424              	.LVL17:
  99:Core/Src/main.c ****     sensor_value = HAL_ADC_GetValue(&hadc1);
 425              		.loc 1 99 6 view .LVU95
 426 0014 0028     		cmp	r0, #0
 427 0016 33D0     		beq	.L29
  97:Core/Src/main.c ****   HAL_ADC_Start(&hadc1);
 428              		.loc 1 97 11 view .LVU96
 429 0018 0024     		movs	r4, #0
 430              	.LVL18:
 431              	.L26:
 102:Core/Src/main.c ****   char tx_data[50];
 432              		.loc 1 102 3 is_stmt 1 view .LVU97
 433 001a 2148     		ldr	r0, .L30+16
 434 001c FFF7FEFF 		bl	HAL_ADC_Stop
 435              	.LVL19:
 103:Core/Src/main.c ****   float force = (float)(sensor_value - 1265) / 2830.0 * 1500.0;
 436              		.loc 1 103 3 view .LVU98
 104:Core/Src/main.c ****   snprintf(tx_data, 50, "%lu force: %f\n", HAL_GetTick(), force);
 437              		.loc 1 104 3 view .LVU99
 104:Core/Src/main.c ****   snprintf(tx_data, 50, "%lu force: %f\n", HAL_GetTick(), force);
 438              		.loc 1 104 38 is_stmt 0 view .LVU100
 439 0020 A4F2F140 		subw	r0, r4, #1265
 104:Core/Src/main.c ****   snprintf(tx_data, 50, "%lu force: %f\n", HAL_GetTick(), force);
 440              		.loc 1 104 17 view .LVU101
 441 0024 07EE900A 		vmov	s15, r0	@ int
 442 0028 F8EEE77A 		vcvt.f32.s32	s15, s15
 443 002c 17EE900A 		vmov	r0, s15
 444 0030 FFF7FEFF 		bl	__aeabi_f2d
 445              	.LVL20:
 104:Core/Src/main.c ****   snprintf(tx_data, 50, "%lu force: %f\n", HAL_GetTick(), force);
 446              		.loc 1 104 46 view .LVU102
 447 0034 16A3     		adr	r3, .L30
 448 0036 D3E90023 		ldrd	r2, [r3]
 449 003a FFF7FEFF 		bl	__aeabi_ddiv
 450              	.LVL21:
 104:Core/Src/main.c ****   snprintf(tx_data, 50, "%lu force: %f\n", HAL_GetTick(), force);
 451              		.loc 1 104 55 view .LVU103
 452 003e 16A3     		adr	r3, .L30+8
 453 0040 D3E90023 		ldrd	r2, [r3]
 454 0044 FFF7FEFF 		bl	__aeabi_dmul
 455              	.LVL22:
 104:Core/Src/main.c ****   snprintf(tx_data, 50, "%lu force: %f\n", HAL_GetTick(), force);
 456              		.loc 1 104 9 view .LVU104
 457 0048 FFF7FEFF 		bl	__aeabi_d2f
 458              	.LVL23:
 459 004c 0546     		mov	r5, r0	@ float
 460              	.LVL24:
 105:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (const uint8_t *)tx_data, strlen(tx_data), 100);
 461              		.loc 1 105 3 is_stmt 1 view .LVU105
 462 004e FFF7FEFF 		bl	HAL_GetTick
 463              	.LVL25:
 105:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (const uint8_t *)tx_data, strlen(tx_data), 100);
 464              		.loc 1 105 3 is_stmt 0 view .LVU106
 465 0052 0446     		mov	r4, r0
 466              	.LVL26:
ARM GAS  /tmp/cc8tt0S9.s 			page 20


 105:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (const uint8_t *)tx_data, strlen(tx_data), 100);
 467              		.loc 1 105 3 view .LVU107
 468 0054 2846     		mov	r0, r5	@ float
 469 0056 FFF7FEFF 		bl	__aeabi_f2d
 470              	.LVL27:
 471 005a CDE90001 		strd	r0, [sp]
 472 005e 2346     		mov	r3, r4
 473 0060 104A     		ldr	r2, .L30+20
 474 0062 3221     		movs	r1, #50
 475 0064 03A8     		add	r0, sp, #12
 476 0066 FFF7FEFF 		bl	snprintf
 477              	.LVL28:
 106:Core/Src/main.c **** }
 478              		.loc 1 106 3 is_stmt 1 view .LVU108
 106:Core/Src/main.c **** }
 479              		.loc 1 106 56 is_stmt 0 view .LVU109
 480 006a 03A8     		add	r0, sp, #12
 481 006c FFF7FEFF 		bl	strlen
 482              	.LVL29:
 106:Core/Src/main.c **** }
 483              		.loc 1 106 3 view .LVU110
 484 0070 6423     		movs	r3, #100
 485 0072 82B2     		uxth	r2, r0
 486 0074 03A9     		add	r1, sp, #12
 487 0076 0C48     		ldr	r0, .L30+24
 488 0078 FFF7FEFF 		bl	HAL_UART_Transmit
 489              	.LVL30:
 107:Core/Src/main.c **** 
 490              		.loc 1 107 1 view .LVU111
 491 007c 11B0     		add	sp, sp, #68
 492              		.cfi_remember_state
 493              		.cfi_def_cfa_offset 12
 494              		@ sp needed
 495 007e 30BD     		pop	{r4, r5, pc}
 496              	.LVL31:
 497              	.L29:
 498              		.cfi_restore_state
 100:Core/Src/main.c ****   }
 499              		.loc 1 100 5 is_stmt 1 view .LVU112
 100:Core/Src/main.c ****   }
 500              		.loc 1 100 20 is_stmt 0 view .LVU113
 501 0080 2046     		mov	r0, r4
 502 0082 FFF7FEFF 		bl	HAL_ADC_GetValue
 503              	.LVL32:
 100:Core/Src/main.c ****   }
 504              		.loc 1 100 18 view .LVU114
 505 0086 04B2     		sxth	r4, r0
 506              	.LVL33:
 100:Core/Src/main.c ****   }
 507              		.loc 1 100 18 view .LVU115
 508 0088 C7E7     		b	.L26
 509              	.L31:
 510 008a 00BFAFF3 		.align	3
 510      0080
 511              	.L30:
 512 0090 00000000 		.word	0
 513 0094 001CA640 		.word	1084627968
ARM GAS  /tmp/cc8tt0S9.s 			page 21


 514 0098 00000000 		.word	0
 515 009c 00709740 		.word	1083666432
 516 00a0 00000000 		.word	hadc1
 517 00a4 00000000 		.word	.LC2
 518 00a8 00000000 		.word	huart2
 519              		.cfi_endproc
 520              	.LFE240:
 522              		.section	.text.checkSystemVoltage,"ax",%progbits
 523              		.align	1
 524              		.global	checkSystemVoltage
 525              		.syntax unified
 526              		.thumb
 527              		.thumb_func
 529              	checkSystemVoltage:
 530              	.LFB241:
 109:Core/Src/main.c ****   float system_voltage = 0.0;
 531              		.loc 1 109 32 is_stmt 1 view -0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535 0000 10B5     		push	{r4, lr}
 536              		.cfi_def_cfa_offset 8
 537              		.cfi_offset 4, -8
 538              		.cfi_offset 14, -4
 539 0002 2DED028B 		vpush.64	{d8}
 540              		.cfi_def_cfa_offset 16
 541              		.cfi_offset 80, -16
 542              		.cfi_offset 81, -12
 110:Core/Src/main.c ****   HAL_ADC_Start(&hadc2);
 543              		.loc 1 110 3 view .LVU117
 544              	.LVL34:
 111:Core/Src/main.c ****   if (HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK) {
 545              		.loc 1 111 3 view .LVU118
 546 0006 184C     		ldr	r4, .L37+8
 547 0008 2046     		mov	r0, r4
 548 000a FFF7FEFF 		bl	HAL_ADC_Start
 549              	.LVL35:
 112:Core/Src/main.c ****     system_voltage = (float)HAL_ADC_GetValue(&hadc2) / 4095.0 * 5.0;
 550              		.loc 1 112 3 view .LVU119
 112:Core/Src/main.c ****     system_voltage = (float)HAL_ADC_GetValue(&hadc2) / 4095.0 * 5.0;
 551              		.loc 1 112 7 is_stmt 0 view .LVU120
 552 000e 0A21     		movs	r1, #10
 553 0010 2046     		mov	r0, r4
 554 0012 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 555              	.LVL36:
 112:Core/Src/main.c ****     system_voltage = (float)HAL_ADC_GetValue(&hadc2) / 4095.0 * 5.0;
 556              		.loc 1 112 6 view .LVU121
 557 0016 48B1     		cbz	r0, .L36
 110:Core/Src/main.c ****   HAL_ADC_Start(&hadc2);
 558              		.loc 1 110 9 view .LVU122
 559 0018 9FED148A 		vldr.32	s16, .L37+12
 560              	.LVL37:
 561              	.L33:
 115:Core/Src/main.c ****   return system_voltage;
 562              		.loc 1 115 3 is_stmt 1 view .LVU123
 563 001c 1248     		ldr	r0, .L37+8
 564 001e FFF7FEFF 		bl	HAL_ADC_Stop
ARM GAS  /tmp/cc8tt0S9.s 			page 22


 565              	.LVL38:
 116:Core/Src/main.c **** }
 566              		.loc 1 116 3 view .LVU124
 117:Core/Src/main.c **** 
 567              		.loc 1 117 1 is_stmt 0 view .LVU125
 568 0022 B0EE480A 		vmov.f32	s0, s16
 569 0026 BDEC028B 		vldm	sp!, {d8}
 570              		.cfi_remember_state
 571              		.cfi_restore 80
 572              		.cfi_restore 81
 573              		.cfi_def_cfa_offset 8
 574              	.LVL39:
 117:Core/Src/main.c **** 
 575              		.loc 1 117 1 view .LVU126
 576 002a 10BD     		pop	{r4, pc}
 577              	.LVL40:
 578              	.L36:
 579              		.cfi_restore_state
 113:Core/Src/main.c ****   }
 580              		.loc 1 113 5 is_stmt 1 view .LVU127
 113:Core/Src/main.c ****   }
 581              		.loc 1 113 29 is_stmt 0 view .LVU128
 582 002c 2046     		mov	r0, r4
 583 002e FFF7FEFF 		bl	HAL_ADC_GetValue
 584              	.LVL41:
 585 0032 07EE900A 		vmov	s15, r0	@ int
 113:Core/Src/main.c ****   }
 586              		.loc 1 113 22 view .LVU129
 587 0036 F8EE677A 		vcvt.f32.u32	s15, s15
 588 003a 17EE900A 		vmov	r0, s15
 589 003e FFF7FEFF 		bl	__aeabi_f2d
 590              	.LVL42:
 113:Core/Src/main.c ****   }
 591              		.loc 1 113 54 view .LVU130
 592 0042 07A3     		adr	r3, .L37
 593 0044 D3E90023 		ldrd	r2, [r3]
 594 0048 FFF7FEFF 		bl	__aeabi_ddiv
 595              	.LVL43:
 113:Core/Src/main.c ****   }
 596              		.loc 1 113 63 view .LVU131
 597 004c 0022     		movs	r2, #0
 598 004e 084B     		ldr	r3, .L37+16
 599 0050 FFF7FEFF 		bl	__aeabi_dmul
 600              	.LVL44:
 113:Core/Src/main.c ****   }
 601              		.loc 1 113 20 view .LVU132
 602 0054 FFF7FEFF 		bl	__aeabi_d2f
 603              	.LVL45:
 604 0058 08EE100A 		vmov	s16, r0
 605              	.LVL46:
 113:Core/Src/main.c ****   }
 606              		.loc 1 113 20 view .LVU133
 607 005c DEE7     		b	.L33
 608              	.L38:
 609 005e 00BF     		.align	3
 610              	.L37:
 611 0060 00000000 		.word	0
ARM GAS  /tmp/cc8tt0S9.s 			page 23


 612 0064 00FEAF40 		.word	1085275648
 613 0068 00000000 		.word	hadc2
 614 006c 00000000 		.word	0
 615 0070 00001440 		.word	1075052544
 616              		.cfi_endproc
 617              	.LFE241:
 619              		.section	.rodata.fn_StateRunning.str1.4,"aMS",%progbits,1
 620              		.align	2
 621              	.LC3:
 622 0000 256C7520 		.ascii	"%lu system voltage: %fV\012\000"
 622      73797374 
 622      656D2076 
 622      6F6C7461 
 622      67653A20 
 623              		.global	__aeabi_dcmplt
 624              		.global	__aeabi_dcmpgt
 625              		.section	.text.fn_StateRunning,"ax",%progbits
 626              		.align	1
 627              		.global	fn_StateRunning
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 632              	fn_StateRunning:
 633              	.LFB242:
 119:Core/Src/main.c ****   if (emergency_int) {
 634              		.loc 1 119 28 is_stmt 1 view -0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 56
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 638 0000 70B5     		push	{r4, r5, r6, lr}
 639              		.cfi_def_cfa_offset 16
 640              		.cfi_offset 4, -16
 641              		.cfi_offset 5, -12
 642              		.cfi_offset 6, -8
 643              		.cfi_offset 14, -4
 644 0002 90B0     		sub	sp, sp, #64
 645              		.cfi_def_cfa_offset 80
 120:Core/Src/main.c ****     emergency_int = 0;
 646              		.loc 1 120 3 view .LVU135
 120:Core/Src/main.c ****     emergency_int = 0;
 647              		.loc 1 120 7 is_stmt 0 view .LVU136
 648 0004 3E4B     		ldr	r3, .L54+16
 649 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 120:Core/Src/main.c ****     emergency_int = 0;
 650              		.loc 1 120 6 view .LVU137
 651 0008 43B9     		cbnz	r3, .L51
 652              	.L40:
 128:Core/Src/main.c ****     check_sys_voltage_int = 0;
 653              		.loc 1 128 3 is_stmt 1 view .LVU138
 128:Core/Src/main.c ****     check_sys_voltage_int = 0;
 654              		.loc 1 128 7 is_stmt 0 view .LVU139
 655 000a 3E4B     		ldr	r3, .L54+20
 656 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 128:Core/Src/main.c ****     check_sys_voltage_int = 0;
 657              		.loc 1 128 6 view .LVU140
 658 000e A3B9     		cbnz	r3, .L52
 659              	.L41:
ARM GAS  /tmp/cc8tt0S9.s 			page 24


 146:Core/Src/main.c ****     check_sensor_int = 0;
 660              		.loc 1 146 3 is_stmt 1 view .LVU141
 146:Core/Src/main.c ****     check_sensor_int = 0;
 661              		.loc 1 146 7 is_stmt 0 view .LVU142
 662 0010 3D4B     		ldr	r3, .L54+24
 663 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 146:Core/Src/main.c ****     check_sensor_int = 0;
 664              		.loc 1 146 6 view .LVU143
 665 0014 002B     		cmp	r3, #0
 666 0016 64D1     		bne	.L53
 667              	.L39:
 150:Core/Src/main.c **** 
 668              		.loc 1 150 1 view .LVU144
 669 0018 10B0     		add	sp, sp, #64
 670              		.cfi_remember_state
 671              		.cfi_def_cfa_offset 16
 672              		@ sp needed
 673 001a 70BD     		pop	{r4, r5, r6, pc}
 674              	.L51:
 675              		.cfi_restore_state
 121:Core/Src/main.c ****     cur_state = STATE_WAITING;
 676              		.loc 1 121 5 is_stmt 1 view .LVU145
 121:Core/Src/main.c ****     cur_state = STATE_WAITING;
 677              		.loc 1 121 19 is_stmt 0 view .LVU146
 678 001c 0023     		movs	r3, #0
 679 001e 384A     		ldr	r2, .L54+16
 680 0020 1370     		strb	r3, [r2]
 122:Core/Src/main.c ****     last_message_time = 0;
 681              		.loc 1 122 5 is_stmt 1 view .LVU147
 122:Core/Src/main.c ****     last_message_time = 0;
 682              		.loc 1 122 15 is_stmt 0 view .LVU148
 683 0022 3A4A     		ldr	r2, .L54+28
 684 0024 0121     		movs	r1, #1
 685 0026 1170     		strb	r1, [r2]
 123:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim6);
 686              		.loc 1 123 5 is_stmt 1 view .LVU149
 123:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim6);
 687              		.loc 1 123 23 is_stmt 0 view .LVU150
 688 0028 394A     		ldr	r2, .L54+32
 689 002a 1360     		str	r3, [r2]
 124:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim7);
 690              		.loc 1 124 5 is_stmt 1 view .LVU151
 691 002c 3948     		ldr	r0, .L54+36
 692 002e FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 693              	.LVL47:
 125:Core/Src/main.c ****   }
 694              		.loc 1 125 5 view .LVU152
 695 0032 3948     		ldr	r0, .L54+40
 696 0034 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 697              	.LVL48:
 698 0038 E7E7     		b	.L40
 699              	.L52:
 700              	.LBB8:
 129:Core/Src/main.c ****     float system_voltage = checkSystemVoltage();
 701              		.loc 1 129 5 view .LVU153
 129:Core/Src/main.c ****     float system_voltage = checkSystemVoltage();
 702              		.loc 1 129 27 is_stmt 0 view .LVU154
ARM GAS  /tmp/cc8tt0S9.s 			page 25


 703 003a 324B     		ldr	r3, .L54+20
 704 003c 0022     		movs	r2, #0
 705 003e 1A70     		strb	r2, [r3]
 130:Core/Src/main.c ****     char tx_data[50];
 706              		.loc 1 130 5 is_stmt 1 view .LVU155
 130:Core/Src/main.c ****     char tx_data[50];
 707              		.loc 1 130 28 is_stmt 0 view .LVU156
 708 0040 FFF7FEFF 		bl	checkSystemVoltage
 709              	.LVL49:
 710 0044 10EE104A 		vmov	r4, s0
 711              	.LVL50:
 131:Core/Src/main.c ****     snprintf(tx_data, 50, "%lu system voltage: %fV\n", HAL_GetTick(), system_voltage);
 712              		.loc 1 131 5 is_stmt 1 view .LVU157
 132:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)tx_data, strlen(tx_data), 100);
 713              		.loc 1 132 5 view .LVU158
 714 0048 FFF7FEFF 		bl	HAL_GetTick
 715              	.LVL51:
 716 004c 0646     		mov	r6, r0
 717 004e 2046     		mov	r0, r4	@ float
 718 0050 FFF7FEFF 		bl	__aeabi_f2d
 719              	.LVL52:
 720 0054 0446     		mov	r4, r0
 721              	.LVL53:
 132:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)tx_data, strlen(tx_data), 100);
 722              		.loc 1 132 5 is_stmt 0 view .LVU159
 723 0056 0D46     		mov	r5, r1
 724 0058 CDE90045 		strd	r4, [sp]
 725 005c 3346     		mov	r3, r6
 726 005e 2F4A     		ldr	r2, .L54+44
 727 0060 3221     		movs	r1, #50
 728 0062 03A8     		add	r0, sp, #12
 729 0064 FFF7FEFF 		bl	snprintf
 730              	.LVL54:
 133:Core/Src/main.c ****     if (system_voltage < 1.8 || system_voltage > 2.7) {
 731              		.loc 1 133 5 is_stmt 1 view .LVU160
 133:Core/Src/main.c ****     if (system_voltage < 1.8 || system_voltage > 2.7) {
 732              		.loc 1 133 58 is_stmt 0 view .LVU161
 733 0068 03A8     		add	r0, sp, #12
 734 006a FFF7FEFF 		bl	strlen
 735              	.LVL55:
 133:Core/Src/main.c ****     if (system_voltage < 1.8 || system_voltage > 2.7) {
 736              		.loc 1 133 5 view .LVU162
 737 006e 6423     		movs	r3, #100
 738 0070 82B2     		uxth	r2, r0
 739 0072 03A9     		add	r1, sp, #12
 740 0074 2A48     		ldr	r0, .L54+48
 741 0076 FFF7FEFF 		bl	HAL_UART_Transmit
 742              	.LVL56:
 134:Core/Src/main.c ****       cur_state = STATE_DANGER;
 743              		.loc 1 134 5 is_stmt 1 view .LVU163
 134:Core/Src/main.c ****       cur_state = STATE_DANGER;
 744              		.loc 1 134 8 is_stmt 0 view .LVU164
 745 007a 1DA3     		adr	r3, .L54
 746 007c D3E90023 		ldrd	r2, [r3]
 747 0080 2046     		mov	r0, r4
 748 0082 2946     		mov	r1, r5
 749 0084 FFF7FEFF 		bl	__aeabi_dcmplt
ARM GAS  /tmp/cc8tt0S9.s 			page 26


 750              	.LVL57:
 751 0088 40B9     		cbnz	r0, .L42
 134:Core/Src/main.c ****       cur_state = STATE_DANGER;
 752              		.loc 1 134 30 discriminator 1 view .LVU165
 753 008a 1BA3     		adr	r3, .L54+8
 754 008c D3E90023 		ldrd	r2, [r3]
 755 0090 2046     		mov	r0, r4
 756 0092 2946     		mov	r1, r5
 757 0094 FFF7FEFF 		bl	__aeabi_dcmpgt
 758              	.LVL58:
 759 0098 0028     		cmp	r0, #0
 760 009a B9D0     		beq	.L41
 761              	.L42:
 135:Core/Src/main.c ****       if (system_voltage < 1.8) {
 762              		.loc 1 135 7 is_stmt 1 view .LVU166
 135:Core/Src/main.c ****       if (system_voltage < 1.8) {
 763              		.loc 1 135 17 is_stmt 0 view .LVU167
 764 009c 1B4B     		ldr	r3, .L54+28
 765 009e 0222     		movs	r2, #2
 766 00a0 1A70     		strb	r2, [r3]
 136:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 767              		.loc 1 136 7 is_stmt 1 view .LVU168
 136:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 768              		.loc 1 136 10 is_stmt 0 view .LVU169
 769 00a2 13A3     		adr	r3, .L54
 770 00a4 D3E90023 		ldrd	r2, [r3]
 771 00a8 2046     		mov	r0, r4
 772 00aa 2946     		mov	r1, r5
 773 00ac FFF7FEFF 		bl	__aeabi_dcmplt
 774              	.LVL59:
 775 00b0 58B1     		cbz	r0, .L49
 137:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 776              		.loc 1 137 9 is_stmt 1 view .LVU170
 777 00b2 1C4C     		ldr	r4, .L54+52
 778 00b4 0022     		movs	r2, #0
 779 00b6 2021     		movs	r1, #32
 780 00b8 2046     		mov	r0, r4
 781 00ba FFF7FEFF 		bl	HAL_GPIO_WritePin
 782              	.LVL60:
 138:Core/Src/main.c ****       } else {
 783              		.loc 1 138 9 view .LVU171
 784 00be 0122     		movs	r2, #1
 785 00c0 4021     		movs	r1, #64
 786 00c2 2046     		mov	r0, r4
 787 00c4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 788              	.LVL61:
 789 00c8 A2E7     		b	.L41
 790              	.L49:
 140:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 791              		.loc 1 140 9 view .LVU172
 792 00ca 164C     		ldr	r4, .L54+52
 793 00cc 0122     		movs	r2, #1
 794 00ce 2021     		movs	r1, #32
 795 00d0 2046     		mov	r0, r4
 796 00d2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 797              	.LVL62:
 141:Core/Src/main.c ****       }
ARM GAS  /tmp/cc8tt0S9.s 			page 27


 798              		.loc 1 141 9 view .LVU173
 799 00d6 0022     		movs	r2, #0
 800 00d8 4021     		movs	r1, #64
 801 00da 2046     		mov	r0, r4
 802 00dc FFF7FEFF 		bl	HAL_GPIO_WritePin
 803              	.LVL63:
 804 00e0 96E7     		b	.L41
 805              	.LVL64:
 806              	.L53:
 141:Core/Src/main.c ****       }
 807              		.loc 1 141 9 is_stmt 0 view .LVU174
 808              	.LBE8:
 147:Core/Src/main.c ****     checkSensor();
 809              		.loc 1 147 5 is_stmt 1 view .LVU175
 147:Core/Src/main.c ****     checkSensor();
 810              		.loc 1 147 22 is_stmt 0 view .LVU176
 811 00e2 094B     		ldr	r3, .L54+24
 812 00e4 0022     		movs	r2, #0
 813 00e6 1A70     		strb	r2, [r3]
 148:Core/Src/main.c ****   }
 814              		.loc 1 148 5 is_stmt 1 view .LVU177
 815 00e8 FFF7FEFF 		bl	checkSensor
 816              	.LVL65:
 150:Core/Src/main.c **** 
 817              		.loc 1 150 1 is_stmt 0 view .LVU178
 818 00ec 94E7     		b	.L39
 819              	.L55:
 820 00ee 00BF     		.align	3
 821              	.L54:
 822 00f0 CDCCCCCC 		.word	-858993459
 823 00f4 CCCCFC3F 		.word	1073532108
 824 00f8 9A999999 		.word	-1717986918
 825 00fc 99990540 		.word	1074108825
 826 0100 00000000 		.word	emergency_int
 827 0104 00000000 		.word	check_sys_voltage_int
 828 0108 00000000 		.word	check_sensor_int
 829 010c 00000000 		.word	cur_state
 830 0110 00000000 		.word	last_message_time
 831 0114 00000000 		.word	htim6
 832 0118 00000000 		.word	htim7
 833 011c 00000000 		.word	.LC3
 834 0120 00000000 		.word	huart2
 835 0124 00000240 		.word	1073872896
 836              		.cfi_endproc
 837              	.LFE242:
 839              		.section	.text.fn_StateDanger,"ax",%progbits
 840              		.align	1
 841              		.global	fn_StateDanger
 842              		.syntax unified
 843              		.thumb
 844              		.thumb_func
 846              	fn_StateDanger:
 847              	.LFB244:
 168:Core/Src/main.c ****   if (emergency_int) {
 848              		.loc 1 168 27 is_stmt 1 view -0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 56
ARM GAS  /tmp/cc8tt0S9.s 			page 28


 851              		@ frame_needed = 0, uses_anonymous_args = 0
 852 0000 70B5     		push	{r4, r5, r6, lr}
 853              		.cfi_def_cfa_offset 16
 854              		.cfi_offset 4, -16
 855              		.cfi_offset 5, -12
 856              		.cfi_offset 6, -8
 857              		.cfi_offset 14, -4
 858 0002 90B0     		sub	sp, sp, #64
 859              		.cfi_def_cfa_offset 80
 169:Core/Src/main.c ****     emergency_int = 0;
 860              		.loc 1 169 3 view .LVU180
 169:Core/Src/main.c ****     emergency_int = 0;
 861              		.loc 1 169 7 is_stmt 0 view .LVU181
 862 0004 3A4B     		ldr	r3, .L75+16
 863 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 169:Core/Src/main.c ****     emergency_int = 0;
 864              		.loc 1 169 6 view .LVU182
 865 0008 43B9     		cbnz	r3, .L70
 866              	.L57:
 177:Core/Src/main.c ****     check_sys_voltage_int = 0;
 867              		.loc 1 177 3 is_stmt 1 view .LVU183
 177:Core/Src/main.c ****     check_sys_voltage_int = 0;
 868              		.loc 1 177 7 is_stmt 0 view .LVU184
 869 000a 3A4B     		ldr	r3, .L75+20
 870 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 177:Core/Src/main.c ****     check_sys_voltage_int = 0;
 871              		.loc 1 177 6 view .LVU185
 872 000e A3B9     		cbnz	r3, .L71
 873              	.L58:
 194:Core/Src/main.c ****     check_sensor_int = 0;
 874              		.loc 1 194 3 is_stmt 1 view .LVU186
 194:Core/Src/main.c ****     check_sensor_int = 0;
 875              		.loc 1 194 7 is_stmt 0 view .LVU187
 876 0010 394B     		ldr	r3, .L75+24
 877 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 194:Core/Src/main.c ****     check_sensor_int = 0;
 878              		.loc 1 194 6 view .LVU188
 879 0014 002B     		cmp	r3, #0
 880 0016 5CD1     		bne	.L72
 881              	.L56:
 198:Core/Src/main.c **** 
 882              		.loc 1 198 1 view .LVU189
 883 0018 10B0     		add	sp, sp, #64
 884              		.cfi_remember_state
 885              		.cfi_def_cfa_offset 16
 886              		@ sp needed
 887 001a 70BD     		pop	{r4, r5, r6, pc}
 888              	.L70:
 889              		.cfi_restore_state
 170:Core/Src/main.c ****     cur_state = STATE_WAITING;
 890              		.loc 1 170 5 is_stmt 1 view .LVU190
 170:Core/Src/main.c ****     cur_state = STATE_WAITING;
 891              		.loc 1 170 19 is_stmt 0 view .LVU191
 892 001c 0023     		movs	r3, #0
 893 001e 344A     		ldr	r2, .L75+16
 894 0020 1370     		strb	r3, [r2]
 171:Core/Src/main.c ****     last_message_time = 0;
ARM GAS  /tmp/cc8tt0S9.s 			page 29


 895              		.loc 1 171 5 is_stmt 1 view .LVU192
 171:Core/Src/main.c ****     last_message_time = 0;
 896              		.loc 1 171 15 is_stmt 0 view .LVU193
 897 0022 364A     		ldr	r2, .L75+28
 898 0024 0121     		movs	r1, #1
 899 0026 1170     		strb	r1, [r2]
 172:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim6);
 900              		.loc 1 172 5 is_stmt 1 view .LVU194
 172:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim6);
 901              		.loc 1 172 23 is_stmt 0 view .LVU195
 902 0028 354A     		ldr	r2, .L75+32
 903 002a 1360     		str	r3, [r2]
 173:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim7);
 904              		.loc 1 173 5 is_stmt 1 view .LVU196
 905 002c 3548     		ldr	r0, .L75+36
 906 002e FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 907              	.LVL66:
 174:Core/Src/main.c ****   }
 908              		.loc 1 174 5 view .LVU197
 909 0032 3548     		ldr	r0, .L75+40
 910 0034 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 911              	.LVL67:
 912 0038 E7E7     		b	.L57
 913              	.L71:
 914              	.LBB9:
 178:Core/Src/main.c ****     float system_voltage = checkSystemVoltage();
 915              		.loc 1 178 5 view .LVU198
 178:Core/Src/main.c ****     float system_voltage = checkSystemVoltage();
 916              		.loc 1 178 27 is_stmt 0 view .LVU199
 917 003a 2E4B     		ldr	r3, .L75+20
 918 003c 0022     		movs	r2, #0
 919 003e 1A70     		strb	r2, [r3]
 179:Core/Src/main.c ****     char tx_data[50];
 920              		.loc 1 179 5 is_stmt 1 view .LVU200
 179:Core/Src/main.c ****     char tx_data[50];
 921              		.loc 1 179 28 is_stmt 0 view .LVU201
 922 0040 FFF7FEFF 		bl	checkSystemVoltage
 923              	.LVL68:
 924 0044 10EE104A 		vmov	r4, s0
 925              	.LVL69:
 180:Core/Src/main.c ****     snprintf(tx_data, 50, "%lu system voltage: %fV\n", HAL_GetTick(), system_voltage);
 926              		.loc 1 180 5 is_stmt 1 view .LVU202
 181:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)tx_data, strlen(tx_data), 100);
 927              		.loc 1 181 5 view .LVU203
 928 0048 FFF7FEFF 		bl	HAL_GetTick
 929              	.LVL70:
 930 004c 0646     		mov	r6, r0
 931 004e 2046     		mov	r0, r4	@ float
 932 0050 FFF7FEFF 		bl	__aeabi_f2d
 933              	.LVL71:
 934 0054 0446     		mov	r4, r0
 935              	.LVL72:
 181:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)tx_data, strlen(tx_data), 100);
 936              		.loc 1 181 5 is_stmt 0 view .LVU204
 937 0056 0D46     		mov	r5, r1
 938 0058 CDE90045 		strd	r4, [sp]
 939 005c 3346     		mov	r3, r6
ARM GAS  /tmp/cc8tt0S9.s 			page 30


 940 005e 2B4A     		ldr	r2, .L75+44
 941 0060 3221     		movs	r1, #50
 942 0062 03A8     		add	r0, sp, #12
 943 0064 FFF7FEFF 		bl	snprintf
 944              	.LVL73:
 182:Core/Src/main.c ****     if (system_voltage < 1.8) {
 945              		.loc 1 182 5 is_stmt 1 view .LVU205
 182:Core/Src/main.c ****     if (system_voltage < 1.8) {
 946              		.loc 1 182 58 is_stmt 0 view .LVU206
 947 0068 03A8     		add	r0, sp, #12
 948 006a FFF7FEFF 		bl	strlen
 949              	.LVL74:
 182:Core/Src/main.c ****     if (system_voltage < 1.8) {
 950              		.loc 1 182 5 view .LVU207
 951 006e 6423     		movs	r3, #100
 952 0070 82B2     		uxth	r2, r0
 953 0072 03A9     		add	r1, sp, #12
 954 0074 2648     		ldr	r0, .L75+48
 955 0076 FFF7FEFF 		bl	HAL_UART_Transmit
 956              	.LVL75:
 183:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 957              		.loc 1 183 5 is_stmt 1 view .LVU208
 183:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 958              		.loc 1 183 8 is_stmt 0 view .LVU209
 959 007a 19A3     		adr	r3, .L75
 960 007c D3E90023 		ldrd	r2, [r3]
 961 0080 2046     		mov	r0, r4
 962 0082 2946     		mov	r1, r5
 963 0084 FFF7FEFF 		bl	__aeabi_dcmplt
 964              	.LVL76:
 965 0088 58B9     		cbnz	r0, .L73
 186:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 966              		.loc 1 186 12 is_stmt 1 view .LVU210
 186:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 967              		.loc 1 186 15 is_stmt 0 view .LVU211
 968 008a 17A3     		adr	r3, .L75+8
 969 008c D3E90023 		ldrd	r2, [r3]
 970 0090 2046     		mov	r0, r4
 971 0092 2946     		mov	r1, r5
 972 0094 FFF7FEFF 		bl	__aeabi_dcmpgt
 973              	.LVL77:
 974 0098 78B9     		cbnz	r0, .L74
 190:Core/Src/main.c ****     }
 975              		.loc 1 190 7 is_stmt 1 view .LVU212
 190:Core/Src/main.c ****     }
 976              		.loc 1 190 17 is_stmt 0 view .LVU213
 977 009a 184B     		ldr	r3, .L75+28
 978 009c 0022     		movs	r2, #0
 979 009e 1A70     		strb	r2, [r3]
 980 00a0 B6E7     		b	.L58
 981              	.L73:
 184:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 982              		.loc 1 184 7 is_stmt 1 view .LVU214
 983 00a2 1C4C     		ldr	r4, .L75+52
 984 00a4 0022     		movs	r2, #0
 985 00a6 2021     		movs	r1, #32
 986 00a8 2046     		mov	r0, r4
ARM GAS  /tmp/cc8tt0S9.s 			page 31


 987 00aa FFF7FEFF 		bl	HAL_GPIO_WritePin
 988              	.LVL78:
 185:Core/Src/main.c ****     } else if (system_voltage > 2.7) {
 989              		.loc 1 185 7 view .LVU215
 990 00ae 0122     		movs	r2, #1
 991 00b0 4021     		movs	r1, #64
 992 00b2 2046     		mov	r0, r4
 993 00b4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 994              	.LVL79:
 995 00b8 AAE7     		b	.L58
 996              	.L74:
 187:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 997              		.loc 1 187 7 view .LVU216
 998 00ba 164C     		ldr	r4, .L75+52
 999 00bc 0122     		movs	r2, #1
 1000 00be 2021     		movs	r1, #32
 1001 00c0 2046     		mov	r0, r4
 1002 00c2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1003              	.LVL80:
 188:Core/Src/main.c ****     } else {
 1004              		.loc 1 188 7 view .LVU217
 1005 00c6 0022     		movs	r2, #0
 1006 00c8 4021     		movs	r1, #64
 1007 00ca 2046     		mov	r0, r4
 1008 00cc FFF7FEFF 		bl	HAL_GPIO_WritePin
 1009              	.LVL81:
 1010 00d0 9EE7     		b	.L58
 1011              	.LVL82:
 1012              	.L72:
 188:Core/Src/main.c ****     } else {
 1013              		.loc 1 188 7 is_stmt 0 view .LVU218
 1014              	.LBE9:
 195:Core/Src/main.c ****     checkSensor();
 1015              		.loc 1 195 5 is_stmt 1 view .LVU219
 195:Core/Src/main.c ****     checkSensor();
 1016              		.loc 1 195 22 is_stmt 0 view .LVU220
 1017 00d2 094B     		ldr	r3, .L75+24
 1018 00d4 0022     		movs	r2, #0
 1019 00d6 1A70     		strb	r2, [r3]
 196:Core/Src/main.c ****   }
 1020              		.loc 1 196 5 is_stmt 1 view .LVU221
 1021 00d8 FFF7FEFF 		bl	checkSensor
 1022              	.LVL83:
 198:Core/Src/main.c **** 
 1023              		.loc 1 198 1 is_stmt 0 view .LVU222
 1024 00dc 9CE7     		b	.L56
 1025              	.L76:
 1026 00de 00BF     		.align	3
 1027              	.L75:
 1028 00e0 CDCCCCCC 		.word	-858993459
 1029 00e4 CCCCFC3F 		.word	1073532108
 1030 00e8 9A999999 		.word	-1717986918
 1031 00ec 99990540 		.word	1074108825
 1032 00f0 00000000 		.word	emergency_int
 1033 00f4 00000000 		.word	check_sys_voltage_int
 1034 00f8 00000000 		.word	check_sensor_int
 1035 00fc 00000000 		.word	cur_state
ARM GAS  /tmp/cc8tt0S9.s 			page 32


 1036 0100 00000000 		.word	last_message_time
 1037 0104 00000000 		.word	htim6
 1038 0108 00000000 		.word	htim7
 1039 010c 00000000 		.word	.LC3
 1040 0110 00000000 		.word	huart2
 1041 0114 00000240 		.word	1073872896
 1042              		.cfi_endproc
 1043              	.LFE244:
 1045              		.section	.rodata.FSM_run.str1.4,"aMS",%progbits,1
 1046              		.align	2
 1047              	.LC4:
 1048 0000 46534D20 		.ascii	"FSM error\012\000"
 1048      6572726F 
 1048      720A00
 1049              		.section	.text.FSM_run,"ax",%progbits
 1050              		.align	1
 1051              		.global	FSM_run
 1052              		.syntax unified
 1053              		.thumb
 1054              		.thumb_func
 1056              	FSM_run:
 1057              	.LFB245:
 206:Core/Src/main.c ****   if(cur_state < NUM_STATES){
 1058              		.loc 1 206 19 is_stmt 1 view -0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062 0000 08B5     		push	{r3, lr}
 1063              		.cfi_def_cfa_offset 8
 1064              		.cfi_offset 3, -8
 1065              		.cfi_offset 14, -4
 207:Core/Src/main.c ****     (*StateMachine[cur_state].func)();
 1066              		.loc 1 207 3 view .LVU224
 207:Core/Src/main.c ****     (*StateMachine[cur_state].func)();
 1067              		.loc 1 207 16 is_stmt 0 view .LVU225
 1068 0002 084B     		ldr	r3, .L81
 1069 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 207:Core/Src/main.c ****     (*StateMachine[cur_state].func)();
 1070              		.loc 1 207 5 view .LVU226
 1071 0006 022A     		cmp	r2, #2
 1072 0008 05D8     		bhi	.L78
 208:Core/Src/main.c ****   }
 1073              		.loc 1 208 5 is_stmt 1 view .LVU227
 208:Core/Src/main.c ****   }
 1074              		.loc 1 208 6 is_stmt 0 view .LVU228
 1075 000a 074B     		ldr	r3, .L81+4
 1076 000c 03EBC203 		add	r3, r3, r2, lsl #3
 1077 0010 5B68     		ldr	r3, [r3, #4]
 1078 0012 9847     		blx	r3
 1079              	.LVL84:
 1080              	.L77:
 213:Core/Src/main.c **** /* USER CODE END 0 */
 1081              		.loc 1 213 1 view .LVU229
 1082 0014 08BD     		pop	{r3, pc}
 1083              	.L78:
 211:Core/Src/main.c ****   }
 1084              		.loc 1 211 5 is_stmt 1 view .LVU230
ARM GAS  /tmp/cc8tt0S9.s 			page 33


 1085 0016 6423     		movs	r3, #100
 1086 0018 0A22     		movs	r2, #10
 1087 001a 0449     		ldr	r1, .L81+8
 1088 001c 0448     		ldr	r0, .L81+12
 1089 001e FFF7FEFF 		bl	HAL_UART_Transmit
 1090              	.LVL85:
 213:Core/Src/main.c **** /* USER CODE END 0 */
 1091              		.loc 1 213 1 is_stmt 0 view .LVU231
 1092 0022 F7E7     		b	.L77
 1093              	.L82:
 1094              		.align	2
 1095              	.L81:
 1096 0024 00000000 		.word	cur_state
 1097 0028 00000000 		.word	StateMachine
 1098 002c 00000000 		.word	.LC4
 1099 0030 00000000 		.word	huart2
 1100              		.cfi_endproc
 1101              	.LFE245:
 1103              		.section	.text.Error_Handler,"ax",%progbits
 1104              		.align	1
 1105              		.global	Error_Handler
 1106              		.syntax unified
 1107              		.thumb
 1108              		.thumb_func
 1110              	Error_Handler:
 1111              	.LFB254:
 564:Core/Src/main.c **** 
 565:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 566:Core/Src/main.c **** 
 567:Core/Src/main.c **** /* USER CODE END 4 */
 568:Core/Src/main.c **** 
 569:Core/Src/main.c **** /**
 570:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 571:Core/Src/main.c ****   * @retval None
 572:Core/Src/main.c ****   */
 573:Core/Src/main.c **** void Error_Handler(void)
 574:Core/Src/main.c **** {
 1112              		.loc 1 574 1 is_stmt 1 view -0
 1113              		.cfi_startproc
 1114              		@ Volatile: function does not return.
 1115              		@ args = 0, pretend = 0, frame = 0
 1116              		@ frame_needed = 0, uses_anonymous_args = 0
 1117              		@ link register save eliminated.
 575:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 576:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 577:Core/Src/main.c ****   __disable_irq();
 1118              		.loc 1 577 3 view .LVU233
 1119              	.LBB10:
 1120              	.LBI10:
 1121              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
ARM GAS  /tmp/cc8tt0S9.s 			page 34


   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
ARM GAS  /tmp/cc8tt0S9.s 			page 35


  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  /tmp/cc8tt0S9.s 			page 36


 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1122              		.loc 2 140 27 view .LVU234
 1123              	.LBB11:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1124              		.loc 2 142 3 view .LVU235
 1125              		.syntax unified
 1126              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1127 0000 72B6     		cpsid i
 1128              	@ 0 "" 2
 1129              		.thumb
 1130              		.syntax unified
 1131              	.L84:
 1132              	.LBE11:
 1133              	.LBE10:
 578:Core/Src/main.c ****   while (1)
 1134              		.loc 1 578 3 discriminator 1 view .LVU236
 579:Core/Src/main.c ****   {
 580:Core/Src/main.c ****   }
 1135              		.loc 1 580 3 discriminator 1 view .LVU237
 578:Core/Src/main.c ****   while (1)
 1136              		.loc 1 578 9 discriminator 1 view .LVU238
 1137 0002 FEE7     		b	.L84
 1138              		.cfi_endproc
 1139              	.LFE254:
 1141              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1142              		.align	1
 1143              		.syntax unified
 1144              		.thumb
 1145              		.thumb_func
 1147              	MX_ADC1_Init:
 1148              	.LFB248:
 317:Core/Src/main.c **** 
 1149              		.loc 1 317 1 view -0
 1150              		.cfi_startproc
 1151              		@ args = 0, pretend = 0, frame = 16
 1152              		@ frame_needed = 0, uses_anonymous_args = 0
 1153 0000 00B5     		push	{lr}
 1154              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc8tt0S9.s 			page 37


 1155              		.cfi_offset 14, -4
 1156 0002 85B0     		sub	sp, sp, #20
 1157              		.cfi_def_cfa_offset 24
 323:Core/Src/main.c **** 
 1158              		.loc 1 323 3 view .LVU240
 323:Core/Src/main.c **** 
 1159              		.loc 1 323 26 is_stmt 0 view .LVU241
 1160 0004 0023     		movs	r3, #0
 1161 0006 0093     		str	r3, [sp]
 1162 0008 0193     		str	r3, [sp, #4]
 1163 000a 0293     		str	r3, [sp, #8]
 1164 000c 0393     		str	r3, [sp, #12]
 331:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 1165              		.loc 1 331 3 is_stmt 1 view .LVU242
 331:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 1166              		.loc 1 331 18 is_stmt 0 view .LVU243
 1167 000e 1348     		ldr	r0, .L91
 1168 0010 134A     		ldr	r2, .L91+4
 1169 0012 0260     		str	r2, [r0]
 332:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1170              		.loc 1 332 3 is_stmt 1 view .LVU244
 332:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1171              		.loc 1 332 29 is_stmt 0 view .LVU245
 1172 0014 4360     		str	r3, [r0, #4]
 333:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 1173              		.loc 1 333 3 is_stmt 1 view .LVU246
 333:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 1174              		.loc 1 333 25 is_stmt 0 view .LVU247
 1175 0016 8360     		str	r3, [r0, #8]
 334:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 1176              		.loc 1 334 3 is_stmt 1 view .LVU248
 334:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 1177              		.loc 1 334 27 is_stmt 0 view .LVU249
 1178 0018 0361     		str	r3, [r0, #16]
 335:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1179              		.loc 1 335 3 is_stmt 1 view .LVU250
 335:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1180              		.loc 1 335 33 is_stmt 0 view .LVU251
 1181 001a 0376     		strb	r3, [r0, #24]
 336:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1182              		.loc 1 336 3 is_stmt 1 view .LVU252
 336:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1183              		.loc 1 336 36 is_stmt 0 view .LVU253
 1184 001c 80F82030 		strb	r3, [r0, #32]
 337:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1185              		.loc 1 337 3 is_stmt 1 view .LVU254
 337:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1186              		.loc 1 337 35 is_stmt 0 view .LVU255
 1187 0020 C362     		str	r3, [r0, #44]
 338:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1188              		.loc 1 338 3 is_stmt 1 view .LVU256
 338:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1189              		.loc 1 338 31 is_stmt 0 view .LVU257
 1190 0022 104A     		ldr	r2, .L91+8
 1191 0024 8262     		str	r2, [r0, #40]
 339:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 1192              		.loc 1 339 3 is_stmt 1 view .LVU258
ARM GAS  /tmp/cc8tt0S9.s 			page 38


 339:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 1193              		.loc 1 339 24 is_stmt 0 view .LVU259
 1194 0026 C360     		str	r3, [r0, #12]
 340:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1195              		.loc 1 340 3 is_stmt 1 view .LVU260
 340:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1196              		.loc 1 340 30 is_stmt 0 view .LVU261
 1197 0028 0122     		movs	r2, #1
 1198 002a C261     		str	r2, [r0, #28]
 341:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1199              		.loc 1 341 3 is_stmt 1 view .LVU262
 341:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1200              		.loc 1 341 36 is_stmt 0 view .LVU263
 1201 002c 80F83030 		strb	r3, [r0, #48]
 342:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1202              		.loc 1 342 3 is_stmt 1 view .LVU264
 342:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1203              		.loc 1 342 27 is_stmt 0 view .LVU265
 1204 0030 4261     		str	r2, [r0, #20]
 343:Core/Src/main.c ****   {
 1205              		.loc 1 343 3 is_stmt 1 view .LVU266
 343:Core/Src/main.c ****   {
 1206              		.loc 1 343 7 is_stmt 0 view .LVU267
 1207 0032 FFF7FEFF 		bl	HAL_ADC_Init
 1208              	.LVL86:
 343:Core/Src/main.c ****   {
 1209              		.loc 1 343 6 view .LVU268
 1210 0036 60B9     		cbnz	r0, .L89
 350:Core/Src/main.c ****   sConfig.Rank = 1;
 1211              		.loc 1 350 3 is_stmt 1 view .LVU269
 350:Core/Src/main.c ****   sConfig.Rank = 1;
 1212              		.loc 1 350 19 is_stmt 0 view .LVU270
 1213 0038 0023     		movs	r3, #0
 1214 003a 0093     		str	r3, [sp]
 351:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1215              		.loc 1 351 3 is_stmt 1 view .LVU271
 351:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1216              		.loc 1 351 16 is_stmt 0 view .LVU272
 1217 003c 0122     		movs	r2, #1
 1218 003e 0192     		str	r2, [sp, #4]
 352:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1219              		.loc 1 352 3 is_stmt 1 view .LVU273
 352:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1220              		.loc 1 352 24 is_stmt 0 view .LVU274
 1221 0040 0293     		str	r3, [sp, #8]
 353:Core/Src/main.c ****   {
 1222              		.loc 1 353 3 is_stmt 1 view .LVU275
 353:Core/Src/main.c ****   {
 1223              		.loc 1 353 7 is_stmt 0 view .LVU276
 1224 0042 6946     		mov	r1, sp
 1225 0044 0548     		ldr	r0, .L91
 1226 0046 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1227              	.LVL87:
 353:Core/Src/main.c ****   {
 1228              		.loc 1 353 6 view .LVU277
 1229 004a 20B9     		cbnz	r0, .L90
 361:Core/Src/main.c **** 
ARM GAS  /tmp/cc8tt0S9.s 			page 39


 1230              		.loc 1 361 1 view .LVU278
 1231 004c 05B0     		add	sp, sp, #20
 1232              		.cfi_remember_state
 1233              		.cfi_def_cfa_offset 4
 1234              		@ sp needed
 1235 004e 5DF804FB 		ldr	pc, [sp], #4
 1236              	.L89:
 1237              		.cfi_restore_state
 345:Core/Src/main.c ****   }
 1238              		.loc 1 345 5 is_stmt 1 view .LVU279
 1239 0052 FFF7FEFF 		bl	Error_Handler
 1240              	.LVL88:
 1241              	.L90:
 355:Core/Src/main.c ****   }
 1242              		.loc 1 355 5 view .LVU280
 1243 0056 FFF7FEFF 		bl	Error_Handler
 1244              	.LVL89:
 1245              	.L92:
 1246 005a 00BF     		.align	2
 1247              	.L91:
 1248 005c 00000000 		.word	hadc1
 1249 0060 00200140 		.word	1073815552
 1250 0064 0100000F 		.word	251658241
 1251              		.cfi_endproc
 1252              	.LFE248:
 1254              		.section	.text.MX_ADC2_Init,"ax",%progbits
 1255              		.align	1
 1256              		.syntax unified
 1257              		.thumb
 1258              		.thumb_func
 1260              	MX_ADC2_Init:
 1261              	.LFB249:
 369:Core/Src/main.c **** 
 1262              		.loc 1 369 1 view -0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 16
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
 1266 0000 00B5     		push	{lr}
 1267              		.cfi_def_cfa_offset 4
 1268              		.cfi_offset 14, -4
 1269 0002 85B0     		sub	sp, sp, #20
 1270              		.cfi_def_cfa_offset 24
 375:Core/Src/main.c **** 
 1271              		.loc 1 375 3 view .LVU282
 375:Core/Src/main.c **** 
 1272              		.loc 1 375 26 is_stmt 0 view .LVU283
 1273 0004 0023     		movs	r3, #0
 1274 0006 0093     		str	r3, [sp]
 1275 0008 0193     		str	r3, [sp, #4]
 1276 000a 0293     		str	r3, [sp, #8]
 1277 000c 0393     		str	r3, [sp, #12]
 383:Core/Src/main.c ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 1278              		.loc 1 383 3 is_stmt 1 view .LVU284
 383:Core/Src/main.c ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 1279              		.loc 1 383 18 is_stmt 0 view .LVU285
 1280 000e 1348     		ldr	r0, .L99
 1281 0010 134A     		ldr	r2, .L99+4
ARM GAS  /tmp/cc8tt0S9.s 			page 40


 1282 0012 0260     		str	r2, [r0]
 384:Core/Src/main.c ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 1283              		.loc 1 384 3 is_stmt 1 view .LVU286
 384:Core/Src/main.c ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 1284              		.loc 1 384 29 is_stmt 0 view .LVU287
 1285 0014 4360     		str	r3, [r0, #4]
 385:Core/Src/main.c ****   hadc2.Init.ScanConvMode = DISABLE;
 1286              		.loc 1 385 3 is_stmt 1 view .LVU288
 385:Core/Src/main.c ****   hadc2.Init.ScanConvMode = DISABLE;
 1287              		.loc 1 385 25 is_stmt 0 view .LVU289
 1288 0016 8360     		str	r3, [r0, #8]
 386:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 1289              		.loc 1 386 3 is_stmt 1 view .LVU290
 386:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 1290              		.loc 1 386 27 is_stmt 0 view .LVU291
 1291 0018 0361     		str	r3, [r0, #16]
 387:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 1292              		.loc 1 387 3 is_stmt 1 view .LVU292
 387:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 1293              		.loc 1 387 33 is_stmt 0 view .LVU293
 1294 001a 0376     		strb	r3, [r0, #24]
 388:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1295              		.loc 1 388 3 is_stmt 1 view .LVU294
 388:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1296              		.loc 1 388 36 is_stmt 0 view .LVU295
 1297 001c 80F82030 		strb	r3, [r0, #32]
 389:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1298              		.loc 1 389 3 is_stmt 1 view .LVU296
 389:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1299              		.loc 1 389 35 is_stmt 0 view .LVU297
 1300 0020 C362     		str	r3, [r0, #44]
 390:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1301              		.loc 1 390 3 is_stmt 1 view .LVU298
 390:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1302              		.loc 1 390 31 is_stmt 0 view .LVU299
 1303 0022 104A     		ldr	r2, .L99+8
 1304 0024 8262     		str	r2, [r0, #40]
 391:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 1305              		.loc 1 391 3 is_stmt 1 view .LVU300
 391:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 1306              		.loc 1 391 24 is_stmt 0 view .LVU301
 1307 0026 C360     		str	r3, [r0, #12]
 392:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 1308              		.loc 1 392 3 is_stmt 1 view .LVU302
 392:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 1309              		.loc 1 392 30 is_stmt 0 view .LVU303
 1310 0028 0122     		movs	r2, #1
 1311 002a C261     		str	r2, [r0, #28]
 393:Core/Src/main.c ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1312              		.loc 1 393 3 is_stmt 1 view .LVU304
 393:Core/Src/main.c ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1313              		.loc 1 393 36 is_stmt 0 view .LVU305
 1314 002c 80F83030 		strb	r3, [r0, #48]
 394:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 1315              		.loc 1 394 3 is_stmt 1 view .LVU306
 394:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 1316              		.loc 1 394 27 is_stmt 0 view .LVU307
ARM GAS  /tmp/cc8tt0S9.s 			page 41


 1317 0030 4261     		str	r2, [r0, #20]
 395:Core/Src/main.c ****   {
 1318              		.loc 1 395 3 is_stmt 1 view .LVU308
 395:Core/Src/main.c ****   {
 1319              		.loc 1 395 7 is_stmt 0 view .LVU309
 1320 0032 FFF7FEFF 		bl	HAL_ADC_Init
 1321              	.LVL90:
 395:Core/Src/main.c ****   {
 1322              		.loc 1 395 6 view .LVU310
 1323 0036 60B9     		cbnz	r0, .L97
 402:Core/Src/main.c ****   sConfig.Rank = 1;
 1324              		.loc 1 402 3 is_stmt 1 view .LVU311
 402:Core/Src/main.c ****   sConfig.Rank = 1;
 1325              		.loc 1 402 19 is_stmt 0 view .LVU312
 1326 0038 0123     		movs	r3, #1
 1327 003a 0093     		str	r3, [sp]
 403:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1328              		.loc 1 403 3 is_stmt 1 view .LVU313
 403:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1329              		.loc 1 403 16 is_stmt 0 view .LVU314
 1330 003c 0193     		str	r3, [sp, #4]
 404:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 1331              		.loc 1 404 3 is_stmt 1 view .LVU315
 404:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 1332              		.loc 1 404 24 is_stmt 0 view .LVU316
 1333 003e 0023     		movs	r3, #0
 1334 0040 0293     		str	r3, [sp, #8]
 405:Core/Src/main.c ****   {
 1335              		.loc 1 405 3 is_stmt 1 view .LVU317
 405:Core/Src/main.c ****   {
 1336              		.loc 1 405 7 is_stmt 0 view .LVU318
 1337 0042 6946     		mov	r1, sp
 1338 0044 0548     		ldr	r0, .L99
 1339 0046 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1340              	.LVL91:
 405:Core/Src/main.c ****   {
 1341              		.loc 1 405 6 view .LVU319
 1342 004a 20B9     		cbnz	r0, .L98
 413:Core/Src/main.c **** 
 1343              		.loc 1 413 1 view .LVU320
 1344 004c 05B0     		add	sp, sp, #20
 1345              		.cfi_remember_state
 1346              		.cfi_def_cfa_offset 4
 1347              		@ sp needed
 1348 004e 5DF804FB 		ldr	pc, [sp], #4
 1349              	.L97:
 1350              		.cfi_restore_state
 397:Core/Src/main.c ****   }
 1351              		.loc 1 397 5 is_stmt 1 view .LVU321
 1352 0052 FFF7FEFF 		bl	Error_Handler
 1353              	.LVL92:
 1354              	.L98:
 407:Core/Src/main.c ****   }
 1355              		.loc 1 407 5 view .LVU322
 1356 0056 FFF7FEFF 		bl	Error_Handler
 1357              	.LVL93:
 1358              	.L100:
ARM GAS  /tmp/cc8tt0S9.s 			page 42


 1359 005a 00BF     		.align	2
 1360              	.L99:
 1361 005c 00000000 		.word	hadc2
 1362 0060 00210140 		.word	1073815808
 1363 0064 0100000F 		.word	251658241
 1364              		.cfi_endproc
 1365              	.LFE249:
 1367              		.section	.text.MX_TIM6_Init,"ax",%progbits
 1368              		.align	1
 1369              		.syntax unified
 1370              		.thumb
 1371              		.thumb_func
 1373              	MX_TIM6_Init:
 1374              	.LFB250:
 421:Core/Src/main.c **** 
 1375              		.loc 1 421 1 view -0
 1376              		.cfi_startproc
 1377              		@ args = 0, pretend = 0, frame = 8
 1378              		@ frame_needed = 0, uses_anonymous_args = 0
 1379 0000 00B5     		push	{lr}
 1380              		.cfi_def_cfa_offset 4
 1381              		.cfi_offset 14, -4
 1382 0002 83B0     		sub	sp, sp, #12
 1383              		.cfi_def_cfa_offset 16
 427:Core/Src/main.c **** 
 1384              		.loc 1 427 3 view .LVU324
 427:Core/Src/main.c **** 
 1385              		.loc 1 427 27 is_stmt 0 view .LVU325
 1386 0004 0023     		movs	r3, #0
 1387 0006 0093     		str	r3, [sp]
 1388 0008 0193     		str	r3, [sp, #4]
 432:Core/Src/main.c ****   htim6.Init.Prescaler = 15999;
 1389              		.loc 1 432 3 is_stmt 1 view .LVU326
 432:Core/Src/main.c ****   htim6.Init.Prescaler = 15999;
 1390              		.loc 1 432 18 is_stmt 0 view .LVU327
 1391 000a 0E48     		ldr	r0, .L107
 1392 000c 0E4A     		ldr	r2, .L107+4
 1393 000e 0260     		str	r2, [r0]
 433:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 1394              		.loc 1 433 3 is_stmt 1 view .LVU328
 433:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 1395              		.loc 1 433 24 is_stmt 0 view .LVU329
 1396 0010 43F67F62 		movw	r2, #15999
 1397 0014 4260     		str	r2, [r0, #4]
 434:Core/Src/main.c ****   htim6.Init.Period = 200;
 1398              		.loc 1 434 3 is_stmt 1 view .LVU330
 434:Core/Src/main.c ****   htim6.Init.Period = 200;
 1399              		.loc 1 434 26 is_stmt 0 view .LVU331
 1400 0016 8360     		str	r3, [r0, #8]
 435:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1401              		.loc 1 435 3 is_stmt 1 view .LVU332
 435:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1402              		.loc 1 435 21 is_stmt 0 view .LVU333
 1403 0018 C822     		movs	r2, #200
 1404 001a C260     		str	r2, [r0, #12]
 436:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 1405              		.loc 1 436 3 is_stmt 1 view .LVU334
ARM GAS  /tmp/cc8tt0S9.s 			page 43


 436:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 1406              		.loc 1 436 32 is_stmt 0 view .LVU335
 1407 001c 8361     		str	r3, [r0, #24]
 437:Core/Src/main.c ****   {
 1408              		.loc 1 437 3 is_stmt 1 view .LVU336
 437:Core/Src/main.c ****   {
 1409              		.loc 1 437 7 is_stmt 0 view .LVU337
 1410 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 1411              	.LVL94:
 437:Core/Src/main.c ****   {
 1412              		.loc 1 437 6 view .LVU338
 1413 0022 50B9     		cbnz	r0, .L105
 441:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1414              		.loc 1 441 3 is_stmt 1 view .LVU339
 441:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1415              		.loc 1 441 37 is_stmt 0 view .LVU340
 1416 0024 0023     		movs	r3, #0
 1417 0026 0093     		str	r3, [sp]
 442:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 1418              		.loc 1 442 3 is_stmt 1 view .LVU341
 442:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 1419              		.loc 1 442 33 is_stmt 0 view .LVU342
 1420 0028 0193     		str	r3, [sp, #4]
 443:Core/Src/main.c ****   {
 1421              		.loc 1 443 3 is_stmt 1 view .LVU343
 443:Core/Src/main.c ****   {
 1422              		.loc 1 443 7 is_stmt 0 view .LVU344
 1423 002a 6946     		mov	r1, sp
 1424 002c 0548     		ldr	r0, .L107
 1425 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1426              	.LVL95:
 443:Core/Src/main.c ****   {
 1427              		.loc 1 443 6 view .LVU345
 1428 0032 20B9     		cbnz	r0, .L106
 451:Core/Src/main.c **** 
 1429              		.loc 1 451 1 view .LVU346
 1430 0034 03B0     		add	sp, sp, #12
 1431              		.cfi_remember_state
 1432              		.cfi_def_cfa_offset 4
 1433              		@ sp needed
 1434 0036 5DF804FB 		ldr	pc, [sp], #4
 1435              	.L105:
 1436              		.cfi_restore_state
 439:Core/Src/main.c ****   }
 1437              		.loc 1 439 5 is_stmt 1 view .LVU347
 1438 003a FFF7FEFF 		bl	Error_Handler
 1439              	.LVL96:
 1440              	.L106:
 445:Core/Src/main.c ****   }
 1441              		.loc 1 445 5 view .LVU348
 1442 003e FFF7FEFF 		bl	Error_Handler
 1443              	.LVL97:
 1444              	.L108:
 1445 0042 00BF     		.align	2
 1446              	.L107:
 1447 0044 00000000 		.word	htim6
 1448 0048 00100040 		.word	1073745920
ARM GAS  /tmp/cc8tt0S9.s 			page 44


 1449              		.cfi_endproc
 1450              	.LFE250:
 1452              		.section	.text.MX_TIM7_Init,"ax",%progbits
 1453              		.align	1
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1458              	MX_TIM7_Init:
 1459              	.LFB251:
 459:Core/Src/main.c **** 
 1460              		.loc 1 459 1 view -0
 1461              		.cfi_startproc
 1462              		@ args = 0, pretend = 0, frame = 8
 1463              		@ frame_needed = 0, uses_anonymous_args = 0
 1464 0000 00B5     		push	{lr}
 1465              		.cfi_def_cfa_offset 4
 1466              		.cfi_offset 14, -4
 1467 0002 83B0     		sub	sp, sp, #12
 1468              		.cfi_def_cfa_offset 16
 465:Core/Src/main.c **** 
 1469              		.loc 1 465 3 view .LVU350
 465:Core/Src/main.c **** 
 1470              		.loc 1 465 27 is_stmt 0 view .LVU351
 1471 0004 0023     		movs	r3, #0
 1472 0006 0093     		str	r3, [sp]
 1473 0008 0193     		str	r3, [sp, #4]
 470:Core/Src/main.c ****   htim7.Init.Prescaler = 15999;
 1474              		.loc 1 470 3 is_stmt 1 view .LVU352
 470:Core/Src/main.c ****   htim7.Init.Prescaler = 15999;
 1475              		.loc 1 470 18 is_stmt 0 view .LVU353
 1476 000a 0E48     		ldr	r0, .L115
 1477 000c 0E4A     		ldr	r2, .L115+4
 1478 000e 0260     		str	r2, [r0]
 471:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 1479              		.loc 1 471 3 is_stmt 1 view .LVU354
 471:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 1480              		.loc 1 471 24 is_stmt 0 view .LVU355
 1481 0010 43F67F62 		movw	r2, #15999
 1482 0014 4260     		str	r2, [r0, #4]
 472:Core/Src/main.c ****   htim7.Init.Period = 350;
 1483              		.loc 1 472 3 is_stmt 1 view .LVU356
 472:Core/Src/main.c ****   htim7.Init.Period = 350;
 1484              		.loc 1 472 26 is_stmt 0 view .LVU357
 1485 0016 8360     		str	r3, [r0, #8]
 473:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1486              		.loc 1 473 3 is_stmt 1 view .LVU358
 473:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1487              		.loc 1 473 21 is_stmt 0 view .LVU359
 1488 0018 4FF4AF72 		mov	r2, #350
 1489 001c C260     		str	r2, [r0, #12]
 474:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 1490              		.loc 1 474 3 is_stmt 1 view .LVU360
 474:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 1491              		.loc 1 474 32 is_stmt 0 view .LVU361
 1492 001e 8361     		str	r3, [r0, #24]
 475:Core/Src/main.c ****   {
 1493              		.loc 1 475 3 is_stmt 1 view .LVU362
ARM GAS  /tmp/cc8tt0S9.s 			page 45


 475:Core/Src/main.c ****   {
 1494              		.loc 1 475 7 is_stmt 0 view .LVU363
 1495 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1496              	.LVL98:
 475:Core/Src/main.c ****   {
 1497              		.loc 1 475 6 view .LVU364
 1498 0024 50B9     		cbnz	r0, .L113
 479:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1499              		.loc 1 479 3 is_stmt 1 view .LVU365
 479:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1500              		.loc 1 479 37 is_stmt 0 view .LVU366
 1501 0026 0023     		movs	r3, #0
 1502 0028 0093     		str	r3, [sp]
 480:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 1503              		.loc 1 480 3 is_stmt 1 view .LVU367
 480:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 1504              		.loc 1 480 33 is_stmt 0 view .LVU368
 1505 002a 0193     		str	r3, [sp, #4]
 481:Core/Src/main.c ****   {
 1506              		.loc 1 481 3 is_stmt 1 view .LVU369
 481:Core/Src/main.c ****   {
 1507              		.loc 1 481 7 is_stmt 0 view .LVU370
 1508 002c 6946     		mov	r1, sp
 1509 002e 0548     		ldr	r0, .L115
 1510 0030 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1511              	.LVL99:
 481:Core/Src/main.c ****   {
 1512              		.loc 1 481 6 view .LVU371
 1513 0034 20B9     		cbnz	r0, .L114
 489:Core/Src/main.c **** 
 1514              		.loc 1 489 1 view .LVU372
 1515 0036 03B0     		add	sp, sp, #12
 1516              		.cfi_remember_state
 1517              		.cfi_def_cfa_offset 4
 1518              		@ sp needed
 1519 0038 5DF804FB 		ldr	pc, [sp], #4
 1520              	.L113:
 1521              		.cfi_restore_state
 477:Core/Src/main.c ****   }
 1522              		.loc 1 477 5 is_stmt 1 view .LVU373
 1523 003c FFF7FEFF 		bl	Error_Handler
 1524              	.LVL100:
 1525              	.L114:
 483:Core/Src/main.c ****   }
 1526              		.loc 1 483 5 view .LVU374
 1527 0040 FFF7FEFF 		bl	Error_Handler
 1528              	.LVL101:
 1529              	.L116:
 1530              		.align	2
 1531              	.L115:
 1532 0044 00000000 		.word	htim7
 1533 0048 00140040 		.word	1073746944
 1534              		.cfi_endproc
 1535              	.LFE251:
 1537              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1538              		.align	1
 1539              		.syntax unified
ARM GAS  /tmp/cc8tt0S9.s 			page 46


 1540              		.thumb
 1541              		.thumb_func
 1543              	MX_USART2_UART_Init:
 1544              	.LFB252:
 497:Core/Src/main.c **** 
 1545              		.loc 1 497 1 view -0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 0
 1548              		@ frame_needed = 0, uses_anonymous_args = 0
 1549 0000 08B5     		push	{r3, lr}
 1550              		.cfi_def_cfa_offset 8
 1551              		.cfi_offset 3, -8
 1552              		.cfi_offset 14, -4
 506:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 1553              		.loc 1 506 3 view .LVU376
 506:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 1554              		.loc 1 506 19 is_stmt 0 view .LVU377
 1555 0002 0A48     		ldr	r0, .L121
 1556 0004 0A4B     		ldr	r3, .L121+4
 1557 0006 0360     		str	r3, [r0]
 507:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1558              		.loc 1 507 3 is_stmt 1 view .LVU378
 507:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1559              		.loc 1 507 24 is_stmt 0 view .LVU379
 1560 0008 4FF41653 		mov	r3, #9600
 1561 000c 4360     		str	r3, [r0, #4]
 508:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1562              		.loc 1 508 3 is_stmt 1 view .LVU380
 508:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1563              		.loc 1 508 26 is_stmt 0 view .LVU381
 1564 000e 0023     		movs	r3, #0
 1565 0010 8360     		str	r3, [r0, #8]
 509:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1566              		.loc 1 509 3 is_stmt 1 view .LVU382
 509:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1567              		.loc 1 509 24 is_stmt 0 view .LVU383
 1568 0012 C360     		str	r3, [r0, #12]
 510:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1569              		.loc 1 510 3 is_stmt 1 view .LVU384
 510:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1570              		.loc 1 510 22 is_stmt 0 view .LVU385
 1571 0014 0361     		str	r3, [r0, #16]
 511:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1572              		.loc 1 511 3 is_stmt 1 view .LVU386
 511:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1573              		.loc 1 511 20 is_stmt 0 view .LVU387
 1574 0016 0C22     		movs	r2, #12
 1575 0018 4261     		str	r2, [r0, #20]
 512:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1576              		.loc 1 512 3 is_stmt 1 view .LVU388
 512:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1577              		.loc 1 512 25 is_stmt 0 view .LVU389
 1578 001a 8361     		str	r3, [r0, #24]
 513:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1579              		.loc 1 513 3 is_stmt 1 view .LVU390
 513:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1580              		.loc 1 513 28 is_stmt 0 view .LVU391
ARM GAS  /tmp/cc8tt0S9.s 			page 47


 1581 001c C361     		str	r3, [r0, #28]
 514:Core/Src/main.c ****   {
 1582              		.loc 1 514 3 is_stmt 1 view .LVU392
 514:Core/Src/main.c ****   {
 1583              		.loc 1 514 7 is_stmt 0 view .LVU393
 1584 001e FFF7FEFF 		bl	HAL_UART_Init
 1585              	.LVL102:
 514:Core/Src/main.c ****   {
 1586              		.loc 1 514 6 view .LVU394
 1587 0022 00B9     		cbnz	r0, .L120
 522:Core/Src/main.c **** 
 1588              		.loc 1 522 1 view .LVU395
 1589 0024 08BD     		pop	{r3, pc}
 1590              	.L120:
 516:Core/Src/main.c ****   }
 1591              		.loc 1 516 5 is_stmt 1 view .LVU396
 1592 0026 FFF7FEFF 		bl	Error_Handler
 1593              	.LVL103:
 1594              	.L122:
 1595 002a 00BF     		.align	2
 1596              	.L121:
 1597 002c 00000000 		.word	huart2
 1598 0030 00440040 		.word	1073759232
 1599              		.cfi_endproc
 1600              	.LFE252:
 1602              		.section	.text.SystemClock_Config,"ax",%progbits
 1603              		.align	1
 1604              		.global	SystemClock_Config
 1605              		.syntax unified
 1606              		.thumb
 1607              		.thumb_func
 1609              	SystemClock_Config:
 1610              	.LFB247:
 275:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1611              		.loc 1 275 1 view -0
 1612              		.cfi_startproc
 1613              		@ args = 0, pretend = 0, frame = 80
 1614              		@ frame_needed = 0, uses_anonymous_args = 0
 1615 0000 00B5     		push	{lr}
 1616              		.cfi_def_cfa_offset 4
 1617              		.cfi_offset 14, -4
 1618 0002 95B0     		sub	sp, sp, #84
 1619              		.cfi_def_cfa_offset 88
 276:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1620              		.loc 1 276 3 view .LVU398
 276:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1621              		.loc 1 276 22 is_stmt 0 view .LVU399
 1622 0004 3422     		movs	r2, #52
 1623 0006 0021     		movs	r1, #0
 1624 0008 07A8     		add	r0, sp, #28
 1625 000a FFF7FEFF 		bl	memset
 1626              	.LVL104:
 277:Core/Src/main.c **** 
 1627              		.loc 1 277 3 is_stmt 1 view .LVU400
 277:Core/Src/main.c **** 
 1628              		.loc 1 277 22 is_stmt 0 view .LVU401
 1629 000e 0023     		movs	r3, #0
ARM GAS  /tmp/cc8tt0S9.s 			page 48


 1630 0010 0293     		str	r3, [sp, #8]
 1631 0012 0393     		str	r3, [sp, #12]
 1632 0014 0493     		str	r3, [sp, #16]
 1633 0016 0593     		str	r3, [sp, #20]
 1634 0018 0693     		str	r3, [sp, #24]
 281:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1635              		.loc 1 281 3 is_stmt 1 view .LVU402
 1636              	.LBB12:
 281:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1637              		.loc 1 281 3 view .LVU403
 1638 001a 0093     		str	r3, [sp]
 281:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1639              		.loc 1 281 3 view .LVU404
 1640 001c 1A4A     		ldr	r2, .L129
 1641 001e 116C     		ldr	r1, [r2, #64]
 1642 0020 41F08051 		orr	r1, r1, #268435456
 1643 0024 1164     		str	r1, [r2, #64]
 281:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1644              		.loc 1 281 3 view .LVU405
 1645 0026 126C     		ldr	r2, [r2, #64]
 1646 0028 02F08052 		and	r2, r2, #268435456
 1647 002c 0092     		str	r2, [sp]
 281:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1648              		.loc 1 281 3 view .LVU406
 1649 002e 009A     		ldr	r2, [sp]
 1650              	.LBE12:
 281:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1651              		.loc 1 281 3 view .LVU407
 282:Core/Src/main.c **** 
 1652              		.loc 1 282 3 view .LVU408
 1653              	.LBB13:
 282:Core/Src/main.c **** 
 1654              		.loc 1 282 3 view .LVU409
 1655 0030 0193     		str	r3, [sp, #4]
 282:Core/Src/main.c **** 
 1656              		.loc 1 282 3 view .LVU410
 1657 0032 1649     		ldr	r1, .L129+4
 1658 0034 0A68     		ldr	r2, [r1]
 1659 0036 22F44042 		bic	r2, r2, #49152
 1660 003a 42F48042 		orr	r2, r2, #16384
 1661 003e 0A60     		str	r2, [r1]
 282:Core/Src/main.c **** 
 1662              		.loc 1 282 3 view .LVU411
 1663 0040 0A68     		ldr	r2, [r1]
 1664 0042 02F44042 		and	r2, r2, #49152
 1665 0046 0192     		str	r2, [sp, #4]
 282:Core/Src/main.c **** 
 1666              		.loc 1 282 3 view .LVU412
 1667 0048 019A     		ldr	r2, [sp, #4]
 1668              	.LBE13:
 282:Core/Src/main.c **** 
 1669              		.loc 1 282 3 view .LVU413
 287:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1670              		.loc 1 287 3 view .LVU414
 287:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1671              		.loc 1 287 36 is_stmt 0 view .LVU415
 1672 004a 0222     		movs	r2, #2
ARM GAS  /tmp/cc8tt0S9.s 			page 49


 1673 004c 0792     		str	r2, [sp, #28]
 288:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1674              		.loc 1 288 3 is_stmt 1 view .LVU416
 288:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1675              		.loc 1 288 30 is_stmt 0 view .LVU417
 1676 004e 0122     		movs	r2, #1
 1677 0050 0A92     		str	r2, [sp, #40]
 289:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1678              		.loc 1 289 3 is_stmt 1 view .LVU418
 289:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1679              		.loc 1 289 41 is_stmt 0 view .LVU419
 1680 0052 1022     		movs	r2, #16
 1681 0054 0B92     		str	r2, [sp, #44]
 290:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1682              		.loc 1 290 3 is_stmt 1 view .LVU420
 290:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1683              		.loc 1 290 34 is_stmt 0 view .LVU421
 1684 0056 0D93     		str	r3, [sp, #52]
 291:Core/Src/main.c ****   {
 1685              		.loc 1 291 3 is_stmt 1 view .LVU422
 291:Core/Src/main.c ****   {
 1686              		.loc 1 291 7 is_stmt 0 view .LVU423
 1687 0058 07A8     		add	r0, sp, #28
 1688 005a FFF7FEFF 		bl	HAL_RCC_OscConfig
 1689              	.LVL105:
 291:Core/Src/main.c ****   {
 1690              		.loc 1 291 6 view .LVU424
 1691 005e 78B9     		cbnz	r0, .L127
 298:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1692              		.loc 1 298 3 is_stmt 1 view .LVU425
 298:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1693              		.loc 1 298 31 is_stmt 0 view .LVU426
 1694 0060 0F23     		movs	r3, #15
 1695 0062 0293     		str	r3, [sp, #8]
 300:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1696              		.loc 1 300 3 is_stmt 1 view .LVU427
 300:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1697              		.loc 1 300 34 is_stmt 0 view .LVU428
 1698 0064 0021     		movs	r1, #0
 1699 0066 0391     		str	r1, [sp, #12]
 301:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1700              		.loc 1 301 3 is_stmt 1 view .LVU429
 301:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1701              		.loc 1 301 35 is_stmt 0 view .LVU430
 1702 0068 0491     		str	r1, [sp, #16]
 302:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1703              		.loc 1 302 3 is_stmt 1 view .LVU431
 302:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1704              		.loc 1 302 36 is_stmt 0 view .LVU432
 1705 006a 4FF48053 		mov	r3, #4096
 1706 006e 0593     		str	r3, [sp, #20]
 303:Core/Src/main.c **** 
 1707              		.loc 1 303 3 is_stmt 1 view .LVU433
 303:Core/Src/main.c **** 
 1708              		.loc 1 303 36 is_stmt 0 view .LVU434
 1709 0070 0691     		str	r1, [sp, #24]
 305:Core/Src/main.c ****   {
ARM GAS  /tmp/cc8tt0S9.s 			page 50


 1710              		.loc 1 305 3 is_stmt 1 view .LVU435
 305:Core/Src/main.c ****   {
 1711              		.loc 1 305 7 is_stmt 0 view .LVU436
 1712 0072 02A8     		add	r0, sp, #8
 1713 0074 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1714              	.LVL106:
 305:Core/Src/main.c ****   {
 1715              		.loc 1 305 6 view .LVU437
 1716 0078 20B9     		cbnz	r0, .L128
 309:Core/Src/main.c **** 
 1717              		.loc 1 309 1 view .LVU438
 1718 007a 15B0     		add	sp, sp, #84
 1719              		.cfi_remember_state
 1720              		.cfi_def_cfa_offset 4
 1721              		@ sp needed
 1722 007c 5DF804FB 		ldr	pc, [sp], #4
 1723              	.L127:
 1724              		.cfi_restore_state
 293:Core/Src/main.c ****   }
 1725              		.loc 1 293 5 is_stmt 1 view .LVU439
 1726 0080 FFF7FEFF 		bl	Error_Handler
 1727              	.LVL107:
 1728              	.L128:
 307:Core/Src/main.c ****   }
 1729              		.loc 1 307 5 view .LVU440
 1730 0084 FFF7FEFF 		bl	Error_Handler
 1731              	.LVL108:
 1732              	.L130:
 1733              		.align	2
 1734              	.L129:
 1735 0088 00380240 		.word	1073887232
 1736 008c 00700040 		.word	1073770496
 1737              		.cfi_endproc
 1738              	.LFE247:
 1740              		.section	.text.main,"ax",%progbits
 1741              		.align	1
 1742              		.global	main
 1743              		.syntax unified
 1744              		.thumb
 1745              		.thumb_func
 1747              	main:
 1748              	.LFB246:
 221:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1749              		.loc 1 221 1 view -0
 1750              		.cfi_startproc
 1751              		@ Volatile: function does not return.
 1752              		@ args = 0, pretend = 0, frame = 0
 1753              		@ frame_needed = 0, uses_anonymous_args = 0
 1754 0000 08B5     		push	{r3, lr}
 1755              		.cfi_def_cfa_offset 8
 1756              		.cfi_offset 3, -8
 1757              		.cfi_offset 14, -4
 229:Core/Src/main.c **** 
 1758              		.loc 1 229 3 view .LVU442
 1759 0002 FFF7FEFF 		bl	HAL_Init
 1760              	.LVL109:
 236:Core/Src/main.c **** 
ARM GAS  /tmp/cc8tt0S9.s 			page 51


 1761              		.loc 1 236 3 view .LVU443
 1762 0006 FFF7FEFF 		bl	SystemClock_Config
 1763              	.LVL110:
 243:Core/Src/main.c ****   MX_ADC1_Init();
 1764              		.loc 1 243 3 view .LVU444
 1765 000a FFF7FEFF 		bl	MX_GPIO_Init
 1766              	.LVL111:
 244:Core/Src/main.c ****   MX_ADC2_Init();
 1767              		.loc 1 244 3 view .LVU445
 1768 000e FFF7FEFF 		bl	MX_ADC1_Init
 1769              	.LVL112:
 245:Core/Src/main.c ****   MX_TIM6_Init();
 1770              		.loc 1 245 3 view .LVU446
 1771 0012 FFF7FEFF 		bl	MX_ADC2_Init
 1772              	.LVL113:
 246:Core/Src/main.c ****   MX_TIM7_Init();
 1773              		.loc 1 246 3 view .LVU447
 1774 0016 FFF7FEFF 		bl	MX_TIM6_Init
 1775              	.LVL114:
 247:Core/Src/main.c ****   MX_USART2_UART_Init();
 1776              		.loc 1 247 3 view .LVU448
 1777 001a FFF7FEFF 		bl	MX_TIM7_Init
 1778              	.LVL115:
 248:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1779              		.loc 1 248 3 view .LVU449
 1780 001e FFF7FEFF 		bl	MX_USART2_UART_Init
 1781              	.LVL116:
 250:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim7);
 1782              		.loc 1 250 3 view .LVU450
 1783 0022 0948     		ldr	r0, .L134
 1784 0024 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1785              	.LVL117:
 251:Core/Src/main.c **** 
 1786              		.loc 1 251 3 view .LVU451
 1787 0028 0848     		ldr	r0, .L134+4
 1788 002a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1789              	.LVL118:
 253:Core/Src/main.c ****   emergency_int = 0;
 1790              		.loc 1 253 3 view .LVU452
 253:Core/Src/main.c ****   emergency_int = 0;
 1791              		.loc 1 253 13 is_stmt 0 view .LVU453
 1792 002e 0023     		movs	r3, #0
 1793 0030 074A     		ldr	r2, .L134+8
 1794 0032 1370     		strb	r3, [r2]
 254:Core/Src/main.c ****   check_sys_voltage_int = 0;
 1795              		.loc 1 254 3 is_stmt 1 view .LVU454
 254:Core/Src/main.c ****   check_sys_voltage_int = 0;
 1796              		.loc 1 254 17 is_stmt 0 view .LVU455
 1797 0034 074A     		ldr	r2, .L134+12
 1798 0036 1370     		strb	r3, [r2]
 255:Core/Src/main.c ****   check_sensor_int = 0;
 1799              		.loc 1 255 3 is_stmt 1 view .LVU456
 255:Core/Src/main.c ****   check_sensor_int = 0;
 1800              		.loc 1 255 25 is_stmt 0 view .LVU457
 1801 0038 074A     		ldr	r2, .L134+16
 1802 003a 1370     		strb	r3, [r2]
 256:Core/Src/main.c ****   /* USER CODE END 2 */
ARM GAS  /tmp/cc8tt0S9.s 			page 52


 1803              		.loc 1 256 3 is_stmt 1 view .LVU458
 256:Core/Src/main.c ****   /* USER CODE END 2 */
 1804              		.loc 1 256 20 is_stmt 0 view .LVU459
 1805 003c 074A     		ldr	r2, .L134+20
 1806 003e 1370     		strb	r3, [r2]
 1807              	.L132:
 261:Core/Src/main.c ****   {
 1808              		.loc 1 261 3 is_stmt 1 discriminator 1 view .LVU460
 264:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 1809              		.loc 1 264 5 discriminator 1 view .LVU461
 1810 0040 FFF7FEFF 		bl	FSM_run
 1811              	.LVL119:
 261:Core/Src/main.c ****   {
 1812              		.loc 1 261 9 discriminator 1 view .LVU462
 1813 0044 FCE7     		b	.L132
 1814              	.L135:
 1815 0046 00BF     		.align	2
 1816              	.L134:
 1817 0048 00000000 		.word	htim6
 1818 004c 00000000 		.word	htim7
 1819 0050 00000000 		.word	cur_state
 1820 0054 00000000 		.word	emergency_int
 1821 0058 00000000 		.word	check_sys_voltage_int
 1822 005c 00000000 		.word	check_sensor_int
 1823              		.cfi_endproc
 1824              	.LFE246:
 1826              		.global	StateMachine
 1827              		.section	.data.StateMachine,"aw"
 1828              		.align	2
 1831              	StateMachine:
 1832 0000 00       		.byte	0
 1833 0001 000000   		.space	3
 1834 0004 00000000 		.word	fn_StateRunning
 1835 0008 01       		.byte	1
 1836 0009 000000   		.space	3
 1837 000c 00000000 		.word	fn_StateWaiting
 1838 0010 02       		.byte	2
 1839 0011 000000   		.space	3
 1840 0014 00000000 		.word	fn_StateDanger
 1841              		.global	last_message_time
 1842              		.section	.bss.last_message_time,"aw",%nobits
 1843              		.align	2
 1846              	last_message_time:
 1847 0000 00000000 		.space	4
 1848              		.global	check_sensor_int
 1849              		.section	.bss.check_sensor_int,"aw",%nobits
 1852              	check_sensor_int:
 1853 0000 00       		.space	1
 1854              		.global	check_sys_voltage_int
 1855              		.section	.bss.check_sys_voltage_int,"aw",%nobits
 1858              	check_sys_voltage_int:
 1859 0000 00       		.space	1
 1860              		.global	emergency_int
 1861              		.section	.bss.emergency_int,"aw",%nobits
 1864              	emergency_int:
 1865 0000 00       		.space	1
 1866              		.global	cur_state
ARM GAS  /tmp/cc8tt0S9.s 			page 53


 1867              		.section	.bss.cur_state,"aw",%nobits
 1870              	cur_state:
 1871 0000 00       		.space	1
 1872              		.global	huart2
 1873              		.section	.bss.huart2,"aw",%nobits
 1874              		.align	2
 1877              	huart2:
 1878 0000 00000000 		.space	68
 1878      00000000 
 1878      00000000 
 1878      00000000 
 1878      00000000 
 1879              		.global	htim7
 1880              		.section	.bss.htim7,"aw",%nobits
 1881              		.align	2
 1884              	htim7:
 1885 0000 00000000 		.space	72
 1885      00000000 
 1885      00000000 
 1885      00000000 
 1885      00000000 
 1886              		.global	htim6
 1887              		.section	.bss.htim6,"aw",%nobits
 1888              		.align	2
 1891              	htim6:
 1892 0000 00000000 		.space	72
 1892      00000000 
 1892      00000000 
 1892      00000000 
 1892      00000000 
 1893              		.global	hadc2
 1894              		.section	.bss.hadc2,"aw",%nobits
 1895              		.align	2
 1898              	hadc2:
 1899 0000 00000000 		.space	72
 1899      00000000 
 1899      00000000 
 1899      00000000 
 1899      00000000 
 1900              		.global	hadc1
 1901              		.section	.bss.hadc1,"aw",%nobits
 1902              		.align	2
 1905              	hadc1:
 1906 0000 00000000 		.space	72
 1906      00000000 
 1906      00000000 
 1906      00000000 
 1906      00000000 
 1907              		.text
 1908              	.Letext0:
 1909              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1910              		.file 4 "/home/alessandro/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 1911              		.file 5 "/home/alessandro/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 1912              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1913              		.file 7 "/home/alessandro/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 1914              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1915              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
ARM GAS  /tmp/cc8tt0S9.s 			page 54


 1916              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1917              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1918              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1919              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1920              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1921              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1922              		.file 16 "Core/Inc/main.h"
 1923              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1924              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1925              		.file 19 "/home/alessandro/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/a
 1926              		.file 20 "/home/alessandro/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/a
 1927              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1928              		.file 22 "<built-in>"
ARM GAS  /tmp/cc8tt0S9.s 			page 55


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc8tt0S9.s:21     .rodata.fn_StateWaiting.str1.4:00000000 $d
     /tmp/cc8tt0S9.s:26     .text.fn_StateWaiting:00000000 $t
     /tmp/cc8tt0S9.s:32     .text.fn_StateWaiting:00000000 fn_StateWaiting
     /tmp/cc8tt0S9.s:110    .text.fn_StateWaiting:00000050 $d
     /tmp/cc8tt0S9.s:1864   .bss.emergency_int:00000000 emergency_int
     /tmp/cc8tt0S9.s:1846   .bss.last_message_time:00000000 last_message_time
     /tmp/cc8tt0S9.s:1870   .bss.cur_state:00000000 cur_state
     /tmp/cc8tt0S9.s:1891   .bss.htim6:00000000 htim6
     /tmp/cc8tt0S9.s:1884   .bss.htim7:00000000 htim7
     /tmp/cc8tt0S9.s:1858   .bss.check_sys_voltage_int:00000000 check_sys_voltage_int
     /tmp/cc8tt0S9.s:1852   .bss.check_sensor_int:00000000 check_sensor_int
     /tmp/cc8tt0S9.s:1877   .bss.huart2:00000000 huart2
     /tmp/cc8tt0S9.s:123    .text.MX_GPIO_Init:00000000 $t
     /tmp/cc8tt0S9.s:128    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cc8tt0S9.s:275    .text.MX_GPIO_Init:000000ac $d
     /tmp/cc8tt0S9.s:282    .text.HAL_GPIO_EXTI_Callback:00000000 $t
     /tmp/cc8tt0S9.s:288    .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
     /tmp/cc8tt0S9.s:307    .text.HAL_GPIO_EXTI_Callback:00000008 $d
     /tmp/cc8tt0S9.s:312    .rodata.HAL_TIM_PeriodElapsedCallback.str1.4:00000000 $d
     /tmp/cc8tt0S9.s:316    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/cc8tt0S9.s:322    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc8tt0S9.s:375    .text.HAL_TIM_PeriodElapsedCallback:0000002c $d
     /tmp/cc8tt0S9.s:389    .rodata.checkSensor.str1.4:00000000 $d
     /tmp/cc8tt0S9.s:393    .text.checkSensor:00000000 $t
     /tmp/cc8tt0S9.s:399    .text.checkSensor:00000000 checkSensor
     /tmp/cc8tt0S9.s:512    .text.checkSensor:00000090 $d
     /tmp/cc8tt0S9.s:1905   .bss.hadc1:00000000 hadc1
     /tmp/cc8tt0S9.s:523    .text.checkSystemVoltage:00000000 $t
     /tmp/cc8tt0S9.s:529    .text.checkSystemVoltage:00000000 checkSystemVoltage
     /tmp/cc8tt0S9.s:611    .text.checkSystemVoltage:00000060 $d
     /tmp/cc8tt0S9.s:1898   .bss.hadc2:00000000 hadc2
     /tmp/cc8tt0S9.s:620    .rodata.fn_StateRunning.str1.4:00000000 $d
     /tmp/cc8tt0S9.s:626    .text.fn_StateRunning:00000000 $t
     /tmp/cc8tt0S9.s:632    .text.fn_StateRunning:00000000 fn_StateRunning
     /tmp/cc8tt0S9.s:822    .text.fn_StateRunning:000000f0 $d
     /tmp/cc8tt0S9.s:840    .text.fn_StateDanger:00000000 $t
     /tmp/cc8tt0S9.s:846    .text.fn_StateDanger:00000000 fn_StateDanger
     /tmp/cc8tt0S9.s:1028   .text.fn_StateDanger:000000e0 $d
     /tmp/cc8tt0S9.s:1046   .rodata.FSM_run.str1.4:00000000 $d
     /tmp/cc8tt0S9.s:1050   .text.FSM_run:00000000 $t
     /tmp/cc8tt0S9.s:1056   .text.FSM_run:00000000 FSM_run
     /tmp/cc8tt0S9.s:1096   .text.FSM_run:00000024 $d
     /tmp/cc8tt0S9.s:1831   .data.StateMachine:00000000 StateMachine
     /tmp/cc8tt0S9.s:1104   .text.Error_Handler:00000000 $t
     /tmp/cc8tt0S9.s:1110   .text.Error_Handler:00000000 Error_Handler
     /tmp/cc8tt0S9.s:1142   .text.MX_ADC1_Init:00000000 $t
     /tmp/cc8tt0S9.s:1147   .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/cc8tt0S9.s:1248   .text.MX_ADC1_Init:0000005c $d
     /tmp/cc8tt0S9.s:1255   .text.MX_ADC2_Init:00000000 $t
     /tmp/cc8tt0S9.s:1260   .text.MX_ADC2_Init:00000000 MX_ADC2_Init
     /tmp/cc8tt0S9.s:1361   .text.MX_ADC2_Init:0000005c $d
     /tmp/cc8tt0S9.s:1368   .text.MX_TIM6_Init:00000000 $t
     /tmp/cc8tt0S9.s:1373   .text.MX_TIM6_Init:00000000 MX_TIM6_Init
     /tmp/cc8tt0S9.s:1447   .text.MX_TIM6_Init:00000044 $d
     /tmp/cc8tt0S9.s:1453   .text.MX_TIM7_Init:00000000 $t
ARM GAS  /tmp/cc8tt0S9.s 			page 56


     /tmp/cc8tt0S9.s:1458   .text.MX_TIM7_Init:00000000 MX_TIM7_Init
     /tmp/cc8tt0S9.s:1532   .text.MX_TIM7_Init:00000044 $d
     /tmp/cc8tt0S9.s:1538   .text.MX_USART2_UART_Init:00000000 $t
     /tmp/cc8tt0S9.s:1543   .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/cc8tt0S9.s:1597   .text.MX_USART2_UART_Init:0000002c $d
     /tmp/cc8tt0S9.s:1603   .text.SystemClock_Config:00000000 $t
     /tmp/cc8tt0S9.s:1609   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc8tt0S9.s:1735   .text.SystemClock_Config:00000088 $d
     /tmp/cc8tt0S9.s:1741   .text.main:00000000 $t
     /tmp/cc8tt0S9.s:1747   .text.main:00000000 main
     /tmp/cc8tt0S9.s:1817   .text.main:00000048 $d
     /tmp/cc8tt0S9.s:1828   .data.StateMachine:00000000 $d
     /tmp/cc8tt0S9.s:1843   .bss.last_message_time:00000000 $d
     /tmp/cc8tt0S9.s:1853   .bss.check_sensor_int:00000000 $d
     /tmp/cc8tt0S9.s:1859   .bss.check_sys_voltage_int:00000000 $d
     /tmp/cc8tt0S9.s:1865   .bss.emergency_int:00000000 $d
     /tmp/cc8tt0S9.s:1871   .bss.cur_state:00000000 $d
     /tmp/cc8tt0S9.s:1874   .bss.huart2:00000000 $d
     /tmp/cc8tt0S9.s:1881   .bss.htim7:00000000 $d
     /tmp/cc8tt0S9.s:1888   .bss.htim6:00000000 $d
     /tmp/cc8tt0S9.s:1895   .bss.hadc2:00000000 $d
     /tmp/cc8tt0S9.s:1902   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_TIM_Base_Start_IT
HAL_UART_Transmit
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2f
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_Stop
snprintf
strlen
HAL_ADC_GetValue
__aeabi_dcmplt
__aeabi_dcmpgt
HAL_TIM_Base_Stop_IT
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
