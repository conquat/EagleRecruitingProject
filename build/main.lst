ARM GAS  /tmp/cc3EDDyx.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.rodata.fn_StateWaiting.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 426F6172 		.ascii	"Board in waiting state - please press the emergency"
  23      6420696E 
  23      20776169 
  23      74696E67 
  23      20737461 
  24 0033 20627574 		.ascii	" button\012\000"
  24      746F6E0A 
  24      00
  25              		.section	.text.fn_StateWaiting,"ax",%progbits
  26              		.align	1
  27              		.global	fn_StateWaiting
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	fn_StateWaiting:
  33              	.LFB243:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/cc3EDDyx.s 			page 2


  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  44:Core/Src/main.c **** ADC_HandleTypeDef hadc2;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** TIM_HandleTypeDef htim6;
  47:Core/Src/main.c **** TIM_HandleTypeDef htim7;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** UART_HandleTypeDef huart2;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE END PV */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  56:Core/Src/main.c **** void SystemClock_Config(void);
  57:Core/Src/main.c **** static void MX_GPIO_Init(void);
  58:Core/Src/main.c **** static void MX_ADC1_Init(void);
  59:Core/Src/main.c **** static void MX_ADC2_Init(void);
  60:Core/Src/main.c **** static void MX_TIM6_Init(void);
  61:Core/Src/main.c **** static void MX_TIM7_Init(void);
  62:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  63:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* USER CODE END PFP */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  68:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  69:Core/Src/main.c **** State_t cur_state = STATE_RUNNING;
  70:Core/Src/main.c **** uint8_t emergency_int = 0;
  71:Core/Src/main.c **** uint8_t check_sys_voltage_int = 0;
  72:Core/Src/main.c **** uint8_t check_sensor_int = 0;
  73:Core/Src/main.c **** unsigned long last_message_time = 0;
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  76:Core/Src/main.c **** {
ARM GAS  /tmp/cc3EDDyx.s 			page 3


  77:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
  78:Core/Src/main.c ****   UNUSED(GPIO_Pin);
  79:Core/Src/main.c ****   emergency_int = 1;
  80:Core/Src/main.c **** }
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  83:Core/Src/main.c **** {
  84:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
  85:Core/Src/main.c ****   UNUSED(htim);
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   if (htim == &htim6) {
  88:Core/Src/main.c ****     check_sensor_int = 1;
  89:Core/Src/main.c ****   } else if (htim == &htim7) {
  90:Core/Src/main.c ****     check_sys_voltage_int = 1;
  91:Core/Src/main.c ****   } else {
  92:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"timer error: unknown timer\n", 27, 100);
  93:Core/Src/main.c ****   }
  94:Core/Src/main.c **** }
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** void checkSensor(void) {
  97:Core/Src/main.c ****   int16_t sensor_value = 0;
  98:Core/Src/main.c ****   HAL_ADC_Start(&hadc1);
  99:Core/Src/main.c ****   if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 100:Core/Src/main.c ****     sensor_value = HAL_ADC_GetValue(&hadc1);
 101:Core/Src/main.c ****   }
 102:Core/Src/main.c ****   HAL_ADC_Stop(&hadc1);
 103:Core/Src/main.c ****   char tx_data[50];
 104:Core/Src/main.c ****   float force = (float)(sensor_value - 1265) / 2830.0 * 1500.0;
 105:Core/Src/main.c ****   snprintf(tx_data, 50, "force: %f\n", force);
 106:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (const uint8_t *)tx_data, strlen(tx_data), 100);
 107:Core/Src/main.c **** }
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** void checkSystemVoltage(void) {
 110:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"check sys v\n", 12, 100);
 111:Core/Src/main.c **** }
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** void fn_StateRunning(void) {
 114:Core/Src/main.c ****   if (emergency_int) {
 115:Core/Src/main.c ****     emergency_int = 0;
 116:Core/Src/main.c ****     cur_state = STATE_WAITING;
 117:Core/Src/main.c ****     last_message_time = 0;
 118:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim6);
 119:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim7);
 120:Core/Src/main.c ****   }
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   if (check_sys_voltage_int) {
 123:Core/Src/main.c ****     check_sys_voltage_int = 0;
 124:Core/Src/main.c ****     checkSystemVoltage();
 125:Core/Src/main.c ****   }
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   if (check_sensor_int) {
 128:Core/Src/main.c ****     check_sensor_int = 0;
 129:Core/Src/main.c ****     checkSensor();
 130:Core/Src/main.c ****   }
 131:Core/Src/main.c **** }
 132:Core/Src/main.c **** 
 133:Core/Src/main.c **** void fn_StateWaiting(void) {
ARM GAS  /tmp/cc3EDDyx.s 			page 4


  34              		.loc 1 133 28 view -0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
  38 0000 10B5     		push	{r4, lr}
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 4, -8
  41              		.cfi_offset 14, -4
 134:Core/Src/main.c ****   if (emergency_int) {
  42              		.loc 1 134 3 view .LVU1
  43              		.loc 1 134 7 is_stmt 0 view .LVU2
  44 0002 134B     		ldr	r3, .L7
  45 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  46              		.loc 1 134 6 view .LVU3
  47 0006 43B9     		cbnz	r3, .L5
  48              	.L2:
 135:Core/Src/main.c ****     emergency_int = 0;
 136:Core/Src/main.c ****     cur_state = STATE_RUNNING;
 137:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim6);
 138:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim7);
 139:Core/Src/main.c ****     check_sys_voltage_int = 0;
 140:Core/Src/main.c ****     check_sensor_int = 0;
 141:Core/Src/main.c ****   }
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   if (HAL_GetTick() - last_message_time > 500) {
  49              		.loc 1 143 3 is_stmt 1 view .LVU4
  50              		.loc 1 143 7 is_stmt 0 view .LVU5
  51 0008 FFF7FEFF 		bl	HAL_GetTick
  52              	.LVL0:
  53              		.loc 1 143 21 view .LVU6
  54 000c 114B     		ldr	r3, .L7+4
  55 000e 1B68     		ldr	r3, [r3]
  56 0010 C01A     		subs	r0, r0, r3
  57              		.loc 1 143 6 view .LVU7
  58 0012 B0F5FA7F 		cmp	r0, #500
  59 0016 10D8     		bhi	.L6
  60              	.L1:
 144:Core/Src/main.c ****     last_message_time = HAL_GetTick();
 145:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"Board in waiting state - please press the emergenc
 146:Core/Src/main.c ****   }
 147:Core/Src/main.c ****   
 148:Core/Src/main.c **** }
  61              		.loc 1 148 1 view .LVU8
  62 0018 10BD     		pop	{r4, pc}
  63              	.L5:
 135:Core/Src/main.c ****     emergency_int = 0;
  64              		.loc 1 135 5 is_stmt 1 view .LVU9
 135:Core/Src/main.c ****     emergency_int = 0;
  65              		.loc 1 135 19 is_stmt 0 view .LVU10
  66 001a 0024     		movs	r4, #0
  67 001c 0C4B     		ldr	r3, .L7
  68 001e 1C70     		strb	r4, [r3]
 136:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim6);
  69              		.loc 1 136 5 is_stmt 1 view .LVU11
 136:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim6);
  70              		.loc 1 136 15 is_stmt 0 view .LVU12
  71 0020 0D4B     		ldr	r3, .L7+8
ARM GAS  /tmp/cc3EDDyx.s 			page 5


  72 0022 1C70     		strb	r4, [r3]
 137:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim7);
  73              		.loc 1 137 5 is_stmt 1 view .LVU13
  74 0024 0D48     		ldr	r0, .L7+12
  75 0026 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
  76              	.LVL1:
 138:Core/Src/main.c ****     check_sys_voltage_int = 0;
  77              		.loc 1 138 5 view .LVU14
  78 002a 0D48     		ldr	r0, .L7+16
  79 002c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
  80              	.LVL2:
 139:Core/Src/main.c ****     check_sensor_int = 0;
  81              		.loc 1 139 5 view .LVU15
 139:Core/Src/main.c ****     check_sensor_int = 0;
  82              		.loc 1 139 27 is_stmt 0 view .LVU16
  83 0030 0C4B     		ldr	r3, .L7+20
  84 0032 1C70     		strb	r4, [r3]
 140:Core/Src/main.c ****   }
  85              		.loc 1 140 5 is_stmt 1 view .LVU17
 140:Core/Src/main.c ****   }
  86              		.loc 1 140 22 is_stmt 0 view .LVU18
  87 0034 0C4B     		ldr	r3, .L7+24
  88 0036 1C70     		strb	r4, [r3]
  89 0038 E6E7     		b	.L2
  90              	.L6:
 144:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"Board in waiting state - please press the emergenc
  91              		.loc 1 144 5 is_stmt 1 view .LVU19
 144:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"Board in waiting state - please press the emergenc
  92              		.loc 1 144 25 is_stmt 0 view .LVU20
  93 003a FFF7FEFF 		bl	HAL_GetTick
  94              	.LVL3:
 144:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"Board in waiting state - please press the emergenc
  95              		.loc 1 144 23 view .LVU21
  96 003e 054B     		ldr	r3, .L7+4
  97 0040 1860     		str	r0, [r3]
 145:Core/Src/main.c ****   }
  98              		.loc 1 145 5 is_stmt 1 view .LVU22
  99 0042 6423     		movs	r3, #100
 100 0044 3B22     		movs	r2, #59
 101 0046 0949     		ldr	r1, .L7+28
 102 0048 0948     		ldr	r0, .L7+32
 103 004a FFF7FEFF 		bl	HAL_UART_Transmit
 104              	.LVL4:
 105              		.loc 1 148 1 is_stmt 0 view .LVU23
 106 004e E3E7     		b	.L1
 107              	.L8:
 108              		.align	2
 109              	.L7:
 110 0050 00000000 		.word	emergency_int
 111 0054 00000000 		.word	last_message_time
 112 0058 00000000 		.word	cur_state
 113 005c 00000000 		.word	htim6
 114 0060 00000000 		.word	htim7
 115 0064 00000000 		.word	check_sys_voltage_int
 116 0068 00000000 		.word	check_sensor_int
 117 006c 00000000 		.word	.LC0
 118 0070 00000000 		.word	huart2
ARM GAS  /tmp/cc3EDDyx.s 			page 6


 119              		.cfi_endproc
 120              	.LFE243:
 122              		.section	.text.MX_GPIO_Init,"ax",%progbits
 123              		.align	1
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 128              	MX_GPIO_Init:
 129              	.LFB252:
 149:Core/Src/main.c **** 
 150:Core/Src/main.c **** StateMachine_t StateMachine[] = {
 151:Core/Src/main.c ****   {STATE_RUNNING, fn_StateRunning},
 152:Core/Src/main.c ****   {STATE_WAITING, fn_StateWaiting}
 153:Core/Src/main.c **** } ;
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** void FSM_run(void){
 156:Core/Src/main.c ****   if(cur_state < NUM_STATES){
 157:Core/Src/main.c ****     (*StateMachine[cur_state].func)();
 158:Core/Src/main.c ****   }
 159:Core/Src/main.c ****   else{
 160:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"FSM error\n", 10, 100);
 161:Core/Src/main.c ****   }
 162:Core/Src/main.c **** }
 163:Core/Src/main.c **** /* USER CODE END 0 */
 164:Core/Src/main.c **** 
 165:Core/Src/main.c **** /**
 166:Core/Src/main.c ****   * @brief  The application entry point.
 167:Core/Src/main.c ****   * @retval int
 168:Core/Src/main.c ****   */
 169:Core/Src/main.c **** int main(void)
 170:Core/Src/main.c **** {
 171:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****   /* USER CODE END 1 */
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 178:Core/Src/main.c ****   HAL_Init();
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   /* USER CODE END Init */
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /* Configure the system clock */
 185:Core/Src/main.c ****   SystemClock_Config();
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /* USER CODE END SysInit */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* Initialize all configured peripherals */
 192:Core/Src/main.c ****   MX_GPIO_Init();
 193:Core/Src/main.c ****   MX_ADC1_Init();
 194:Core/Src/main.c ****   MX_ADC2_Init();
 195:Core/Src/main.c ****   MX_TIM6_Init();
 196:Core/Src/main.c ****   MX_TIM7_Init();
ARM GAS  /tmp/cc3EDDyx.s 			page 7


 197:Core/Src/main.c ****   MX_USART2_UART_Init();
 198:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 199:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim6);
 200:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim7);
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   cur_state = STATE_RUNNING;
 203:Core/Src/main.c ****   emergency_int = 0;
 204:Core/Src/main.c ****   check_sys_voltage_int = 0;
 205:Core/Src/main.c ****   check_sensor_int = 0;
 206:Core/Src/main.c ****   /* USER CODE END 2 */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* Infinite loop */
 209:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 210:Core/Src/main.c ****   while (1)
 211:Core/Src/main.c ****   {
 212:Core/Src/main.c ****     /* USER CODE END WHILE */
 213:Core/Src/main.c ****     FSM_run();
 214:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 215:Core/Src/main.c ****   }
 216:Core/Src/main.c ****   /* USER CODE END 3 */
 217:Core/Src/main.c **** }
 218:Core/Src/main.c **** 
 219:Core/Src/main.c **** /**
 220:Core/Src/main.c ****   * @brief System Clock Configuration
 221:Core/Src/main.c ****   * @retval None
 222:Core/Src/main.c ****   */
 223:Core/Src/main.c **** void SystemClock_Config(void)
 224:Core/Src/main.c **** {
 225:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 226:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 229:Core/Src/main.c ****   */
 230:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 231:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 234:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 235:Core/Src/main.c ****   */
 236:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 237:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 238:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 239:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 240:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 241:Core/Src/main.c ****   {
 242:Core/Src/main.c ****     Error_Handler();
 243:Core/Src/main.c ****   }
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 246:Core/Src/main.c ****   */
 247:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 248:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 249:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 250:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 251:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 252:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 253:Core/Src/main.c **** 
ARM GAS  /tmp/cc3EDDyx.s 			page 8


 254:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 255:Core/Src/main.c ****   {
 256:Core/Src/main.c ****     Error_Handler();
 257:Core/Src/main.c ****   }
 258:Core/Src/main.c **** }
 259:Core/Src/main.c **** 
 260:Core/Src/main.c **** /**
 261:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 262:Core/Src/main.c ****   * @param None
 263:Core/Src/main.c ****   * @retval None
 264:Core/Src/main.c ****   */
 265:Core/Src/main.c **** static void MX_ADC1_Init(void)
 266:Core/Src/main.c **** {
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 275:Core/Src/main.c **** 
 276:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 279:Core/Src/main.c ****   */
 280:Core/Src/main.c ****   hadc1.Instance = ADC1;
 281:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 282:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 283:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 284:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 285:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 286:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 287:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 288:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 289:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 290:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 291:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 292:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 293:Core/Src/main.c ****   {
 294:Core/Src/main.c ****     Error_Handler();
 295:Core/Src/main.c ****   }
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 298:Core/Src/main.c ****   */
 299:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 300:Core/Src/main.c ****   sConfig.Rank = 1;
 301:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 302:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 303:Core/Src/main.c ****   {
 304:Core/Src/main.c ****     Error_Handler();
 305:Core/Src/main.c ****   }
 306:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 309:Core/Src/main.c **** 
 310:Core/Src/main.c **** }
ARM GAS  /tmp/cc3EDDyx.s 			page 9


 311:Core/Src/main.c **** 
 312:Core/Src/main.c **** /**
 313:Core/Src/main.c ****   * @brief ADC2 Initialization Function
 314:Core/Src/main.c ****   * @param None
 315:Core/Src/main.c ****   * @retval None
 316:Core/Src/main.c ****   */
 317:Core/Src/main.c **** static void MX_ADC2_Init(void)
 318:Core/Src/main.c **** {
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 0 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /* USER CODE END ADC2_Init 0 */
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 1 */
 327:Core/Src/main.c **** 
 328:Core/Src/main.c ****   /* USER CODE END ADC2_Init 1 */
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 331:Core/Src/main.c ****   */
 332:Core/Src/main.c ****   hadc2.Instance = ADC2;
 333:Core/Src/main.c ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 334:Core/Src/main.c ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 335:Core/Src/main.c ****   hadc2.Init.ScanConvMode = DISABLE;
 336:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 337:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 338:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 339:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 340:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 341:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 342:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 343:Core/Src/main.c ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 344:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 345:Core/Src/main.c ****   {
 346:Core/Src/main.c ****     Error_Handler();
 347:Core/Src/main.c ****   }
 348:Core/Src/main.c **** 
 349:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 350:Core/Src/main.c ****   */
 351:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 352:Core/Src/main.c ****   sConfig.Rank = 1;
 353:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 354:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 355:Core/Src/main.c ****   {
 356:Core/Src/main.c ****     Error_Handler();
 357:Core/Src/main.c ****   }
 358:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 2 */
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /* USER CODE END ADC2_Init 2 */
 361:Core/Src/main.c **** 
 362:Core/Src/main.c **** }
 363:Core/Src/main.c **** 
 364:Core/Src/main.c **** /**
 365:Core/Src/main.c ****   * @brief TIM6 Initialization Function
 366:Core/Src/main.c ****   * @param None
 367:Core/Src/main.c ****   * @retval None
ARM GAS  /tmp/cc3EDDyx.s 			page 10


 368:Core/Src/main.c ****   */
 369:Core/Src/main.c **** static void MX_TIM6_Init(void)
 370:Core/Src/main.c **** {
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 0 */
 373:Core/Src/main.c **** 
 374:Core/Src/main.c ****   /* USER CODE END TIM6_Init 0 */
 375:Core/Src/main.c **** 
 376:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 1 */
 379:Core/Src/main.c **** 
 380:Core/Src/main.c ****   /* USER CODE END TIM6_Init 1 */
 381:Core/Src/main.c ****   htim6.Instance = TIM6;
 382:Core/Src/main.c ****   htim6.Init.Prescaler = 15999;
 383:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 384:Core/Src/main.c ****   htim6.Init.Period = 200;
 385:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 386:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 387:Core/Src/main.c ****   {
 388:Core/Src/main.c ****     Error_Handler();
 389:Core/Src/main.c ****   }
 390:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 391:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 392:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 393:Core/Src/main.c ****   {
 394:Core/Src/main.c ****     Error_Handler();
 395:Core/Src/main.c ****   }
 396:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 2 */
 397:Core/Src/main.c **** 
 398:Core/Src/main.c ****   /* USER CODE END TIM6_Init 2 */
 399:Core/Src/main.c **** 
 400:Core/Src/main.c **** }
 401:Core/Src/main.c **** 
 402:Core/Src/main.c **** /**
 403:Core/Src/main.c ****   * @brief TIM7 Initialization Function
 404:Core/Src/main.c ****   * @param None
 405:Core/Src/main.c ****   * @retval None
 406:Core/Src/main.c ****   */
 407:Core/Src/main.c **** static void MX_TIM7_Init(void)
 408:Core/Src/main.c **** {
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 0 */
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   /* USER CODE END TIM7_Init 0 */
 413:Core/Src/main.c **** 
 414:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 415:Core/Src/main.c **** 
 416:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 1 */
 417:Core/Src/main.c **** 
 418:Core/Src/main.c ****   /* USER CODE END TIM7_Init 1 */
 419:Core/Src/main.c ****   htim7.Instance = TIM7;
 420:Core/Src/main.c ****   htim7.Init.Prescaler = 15999;
 421:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 422:Core/Src/main.c ****   htim7.Init.Period = 350;
 423:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 424:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
ARM GAS  /tmp/cc3EDDyx.s 			page 11


 425:Core/Src/main.c ****   {
 426:Core/Src/main.c ****     Error_Handler();
 427:Core/Src/main.c ****   }
 428:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 429:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 430:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 431:Core/Src/main.c ****   {
 432:Core/Src/main.c ****     Error_Handler();
 433:Core/Src/main.c ****   }
 434:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 2 */
 435:Core/Src/main.c **** 
 436:Core/Src/main.c ****   /* USER CODE END TIM7_Init 2 */
 437:Core/Src/main.c **** 
 438:Core/Src/main.c **** }
 439:Core/Src/main.c **** 
 440:Core/Src/main.c **** /**
 441:Core/Src/main.c ****   * @brief USART2 Initialization Function
 442:Core/Src/main.c ****   * @param None
 443:Core/Src/main.c ****   * @retval None
 444:Core/Src/main.c ****   */
 445:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 446:Core/Src/main.c **** {
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 449:Core/Src/main.c **** 
 450:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 453:Core/Src/main.c **** 
 454:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 455:Core/Src/main.c ****   huart2.Instance = USART2;
 456:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 457:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 458:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 459:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 460:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 461:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 462:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 463:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 464:Core/Src/main.c ****   {
 465:Core/Src/main.c ****     Error_Handler();
 466:Core/Src/main.c ****   }
 467:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 468:Core/Src/main.c **** 
 469:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 470:Core/Src/main.c **** 
 471:Core/Src/main.c **** }
 472:Core/Src/main.c **** 
 473:Core/Src/main.c **** /**
 474:Core/Src/main.c ****   * @brief GPIO Initialization Function
 475:Core/Src/main.c ****   * @param None
 476:Core/Src/main.c ****   * @retval None
 477:Core/Src/main.c ****   */
 478:Core/Src/main.c **** static void MX_GPIO_Init(void)
 479:Core/Src/main.c **** {
 130              		.loc 1 479 1 is_stmt 1 view -0
 131              		.cfi_startproc
ARM GAS  /tmp/cc3EDDyx.s 			page 12


 132              		@ args = 0, pretend = 0, frame = 40
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134 0000 70B5     		push	{r4, r5, r6, lr}
 135              		.cfi_def_cfa_offset 16
 136              		.cfi_offset 4, -16
 137              		.cfi_offset 5, -12
 138              		.cfi_offset 6, -8
 139              		.cfi_offset 14, -4
 140 0002 8AB0     		sub	sp, sp, #40
 141              		.cfi_def_cfa_offset 56
 480:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 142              		.loc 1 480 3 view .LVU25
 143              		.loc 1 480 20 is_stmt 0 view .LVU26
 144 0004 0024     		movs	r4, #0
 145 0006 0594     		str	r4, [sp, #20]
 146 0008 0694     		str	r4, [sp, #24]
 147 000a 0794     		str	r4, [sp, #28]
 148 000c 0894     		str	r4, [sp, #32]
 149 000e 0994     		str	r4, [sp, #36]
 481:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 482:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 483:Core/Src/main.c **** 
 484:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 485:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 150              		.loc 1 485 3 is_stmt 1 view .LVU27
 151              	.LBB4:
 152              		.loc 1 485 3 view .LVU28
 153 0010 0194     		str	r4, [sp, #4]
 154              		.loc 1 485 3 view .LVU29
 155 0012 264B     		ldr	r3, .L11
 156 0014 1A6B     		ldr	r2, [r3, #48]
 157 0016 42F00402 		orr	r2, r2, #4
 158 001a 1A63     		str	r2, [r3, #48]
 159              		.loc 1 485 3 view .LVU30
 160 001c 1A6B     		ldr	r2, [r3, #48]
 161 001e 02F00402 		and	r2, r2, #4
 162 0022 0192     		str	r2, [sp, #4]
 163              		.loc 1 485 3 view .LVU31
 164 0024 019A     		ldr	r2, [sp, #4]
 165              	.LBE4:
 166              		.loc 1 485 3 view .LVU32
 486:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 167              		.loc 1 486 3 view .LVU33
 168              	.LBB5:
 169              		.loc 1 486 3 view .LVU34
 170 0026 0294     		str	r4, [sp, #8]
 171              		.loc 1 486 3 view .LVU35
 172 0028 1A6B     		ldr	r2, [r3, #48]
 173 002a 42F08002 		orr	r2, r2, #128
 174 002e 1A63     		str	r2, [r3, #48]
 175              		.loc 1 486 3 view .LVU36
 176 0030 1A6B     		ldr	r2, [r3, #48]
 177 0032 02F08002 		and	r2, r2, #128
 178 0036 0292     		str	r2, [sp, #8]
 179              		.loc 1 486 3 view .LVU37
 180 0038 029A     		ldr	r2, [sp, #8]
 181              	.LBE5:
ARM GAS  /tmp/cc3EDDyx.s 			page 13


 182              		.loc 1 486 3 view .LVU38
 487:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 183              		.loc 1 487 3 view .LVU39
 184              	.LBB6:
 185              		.loc 1 487 3 view .LVU40
 186 003a 0394     		str	r4, [sp, #12]
 187              		.loc 1 487 3 view .LVU41
 188 003c 1A6B     		ldr	r2, [r3, #48]
 189 003e 42F00102 		orr	r2, r2, #1
 190 0042 1A63     		str	r2, [r3, #48]
 191              		.loc 1 487 3 view .LVU42
 192 0044 1A6B     		ldr	r2, [r3, #48]
 193 0046 02F00102 		and	r2, r2, #1
 194 004a 0392     		str	r2, [sp, #12]
 195              		.loc 1 487 3 view .LVU43
 196 004c 039A     		ldr	r2, [sp, #12]
 197              	.LBE6:
 198              		.loc 1 487 3 view .LVU44
 488:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 199              		.loc 1 488 3 view .LVU45
 200              	.LBB7:
 201              		.loc 1 488 3 view .LVU46
 202 004e 0494     		str	r4, [sp, #16]
 203              		.loc 1 488 3 view .LVU47
 204 0050 1A6B     		ldr	r2, [r3, #48]
 205 0052 42F00202 		orr	r2, r2, #2
 206 0056 1A63     		str	r2, [r3, #48]
 207              		.loc 1 488 3 view .LVU48
 208 0058 1B6B     		ldr	r3, [r3, #48]
 209 005a 03F00203 		and	r3, r3, #2
 210 005e 0493     		str	r3, [sp, #16]
 211              		.loc 1 488 3 view .LVU49
 212 0060 049B     		ldr	r3, [sp, #16]
 213              	.LBE7:
 214              		.loc 1 488 3 view .LVU50
 489:Core/Src/main.c **** 
 490:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 491:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 215              		.loc 1 491 3 view .LVU51
 216 0062 134E     		ldr	r6, .L11+4
 217 0064 2246     		mov	r2, r4
 218 0066 6021     		movs	r1, #96
 219 0068 3046     		mov	r0, r6
 220 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 221              	.LVL5:
 492:Core/Src/main.c **** 
 493:Core/Src/main.c ****   /*Configure GPIO pin : PC13 */
 494:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 222              		.loc 1 494 3 view .LVU52
 223              		.loc 1 494 23 is_stmt 0 view .LVU53
 224 006e 4FF40053 		mov	r3, #8192
 225 0072 0593     		str	r3, [sp, #20]
 495:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 226              		.loc 1 495 3 is_stmt 1 view .LVU54
 227              		.loc 1 495 24 is_stmt 0 view .LVU55
 228 0074 4FF40413 		mov	r3, #2162688
 229 0078 0693     		str	r3, [sp, #24]
ARM GAS  /tmp/cc3EDDyx.s 			page 14


 496:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 230              		.loc 1 496 3 is_stmt 1 view .LVU56
 231              		.loc 1 496 24 is_stmt 0 view .LVU57
 232 007a 0125     		movs	r5, #1
 233 007c 0795     		str	r5, [sp, #28]
 497:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 234              		.loc 1 497 3 is_stmt 1 view .LVU58
 235 007e 05A9     		add	r1, sp, #20
 236 0080 0C48     		ldr	r0, .L11+8
 237 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 238              	.LVL6:
 498:Core/Src/main.c **** 
 499:Core/Src/main.c ****   /*Configure GPIO pins : LD2_Pin PA6 */
 500:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 239              		.loc 1 500 3 view .LVU59
 240              		.loc 1 500 23 is_stmt 0 view .LVU60
 241 0086 6023     		movs	r3, #96
 242 0088 0593     		str	r3, [sp, #20]
 501:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 243              		.loc 1 501 3 is_stmt 1 view .LVU61
 244              		.loc 1 501 24 is_stmt 0 view .LVU62
 245 008a 0695     		str	r5, [sp, #24]
 502:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 246              		.loc 1 502 3 is_stmt 1 view .LVU63
 247              		.loc 1 502 24 is_stmt 0 view .LVU64
 248 008c 0794     		str	r4, [sp, #28]
 503:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 249              		.loc 1 503 3 is_stmt 1 view .LVU65
 250              		.loc 1 503 25 is_stmt 0 view .LVU66
 251 008e 0894     		str	r4, [sp, #32]
 504:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 252              		.loc 1 504 3 is_stmt 1 view .LVU67
 253 0090 05A9     		add	r1, sp, #20
 254 0092 3046     		mov	r0, r6
 255 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 256              	.LVL7:
 505:Core/Src/main.c **** 
 506:Core/Src/main.c ****   /* EXTI interrupt init*/
 507:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 257              		.loc 1 507 3 view .LVU68
 258 0098 2A46     		mov	r2, r5
 259 009a 2146     		mov	r1, r4
 260 009c 2820     		movs	r0, #40
 261 009e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 262              	.LVL8:
 508:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 263              		.loc 1 508 3 view .LVU69
 264 00a2 2820     		movs	r0, #40
 265 00a4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 266              	.LVL9:
 509:Core/Src/main.c **** 
 510:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 511:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 512:Core/Src/main.c **** }
 267              		.loc 1 512 1 is_stmt 0 view .LVU70
 268 00a8 0AB0     		add	sp, sp, #40
 269              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cc3EDDyx.s 			page 15


 270              		@ sp needed
 271 00aa 70BD     		pop	{r4, r5, r6, pc}
 272              	.L12:
 273              		.align	2
 274              	.L11:
 275 00ac 00380240 		.word	1073887232
 276 00b0 00000240 		.word	1073872896
 277 00b4 00080240 		.word	1073874944
 278              		.cfi_endproc
 279              	.LFE252:
 281              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 282              		.align	1
 283              		.global	HAL_GPIO_EXTI_Callback
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 288              	HAL_GPIO_EXTI_Callback:
 289              	.LVL10:
 290              	.LFB238:
  76:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
 291              		.loc 1 76 1 is_stmt 1 view -0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		@ link register save eliminated.
  78:Core/Src/main.c ****   emergency_int = 1;
 296              		.loc 1 78 3 view .LVU72
  79:Core/Src/main.c **** }
 297              		.loc 1 79 3 view .LVU73
  79:Core/Src/main.c **** }
 298              		.loc 1 79 17 is_stmt 0 view .LVU74
 299 0000 014B     		ldr	r3, .L14
 300 0002 0122     		movs	r2, #1
 301 0004 1A70     		strb	r2, [r3]
  80:Core/Src/main.c **** 
 302              		.loc 1 80 1 view .LVU75
 303 0006 7047     		bx	lr
 304              	.L15:
 305              		.align	2
 306              	.L14:
 307 0008 00000000 		.word	emergency_int
 308              		.cfi_endproc
 309              	.LFE238:
 311              		.section	.rodata.HAL_TIM_PeriodElapsedCallback.str1.4,"aMS",%progbits,1
 312              		.align	2
 313              	.LC1:
 314 0000 74696D65 		.ascii	"timer error: unknown timer\012\000"
 314      72206572 
 314      726F723A 
 314      20756E6B 
 314      6E6F776E 
 315              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 316              		.align	1
 317              		.global	HAL_TIM_PeriodElapsedCallback
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
ARM GAS  /tmp/cc3EDDyx.s 			page 16


 322              	HAL_TIM_PeriodElapsedCallback:
 323              	.LVL11:
 324              	.LFB239:
  83:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
 325              		.loc 1 83 1 is_stmt 1 view -0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
  83:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
 329              		.loc 1 83 1 is_stmt 0 view .LVU77
 330 0000 08B5     		push	{r3, lr}
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 3, -8
 333              		.cfi_offset 14, -4
  85:Core/Src/main.c **** 
 334              		.loc 1 85 3 is_stmt 1 view .LVU78
  87:Core/Src/main.c ****     check_sensor_int = 1;
 335              		.loc 1 87 3 view .LVU79
  87:Core/Src/main.c ****     check_sensor_int = 1;
 336              		.loc 1 87 6 is_stmt 0 view .LVU80
 337 0002 0A4B     		ldr	r3, .L23
 338 0004 9842     		cmp	r0, r3
 339 0006 09D0     		beq	.L21
  89:Core/Src/main.c ****     check_sys_voltage_int = 1;
 340              		.loc 1 89 10 is_stmt 1 view .LVU81
  89:Core/Src/main.c ****     check_sys_voltage_int = 1;
 341              		.loc 1 89 13 is_stmt 0 view .LVU82
 342 0008 094B     		ldr	r3, .L23+4
 343 000a 9842     		cmp	r0, r3
 344 000c 0AD0     		beq	.L22
  92:Core/Src/main.c ****   }
 345              		.loc 1 92 5 is_stmt 1 view .LVU83
 346 000e 6423     		movs	r3, #100
 347 0010 1B22     		movs	r2, #27
 348 0012 0849     		ldr	r1, .L23+8
 349 0014 0848     		ldr	r0, .L23+12
 350              	.LVL12:
  92:Core/Src/main.c ****   }
 351              		.loc 1 92 5 is_stmt 0 view .LVU84
 352 0016 FFF7FEFF 		bl	HAL_UART_Transmit
 353              	.LVL13:
 354              	.L16:
  94:Core/Src/main.c **** 
 355              		.loc 1 94 1 view .LVU85
 356 001a 08BD     		pop	{r3, pc}
 357              	.LVL14:
 358              	.L21:
  88:Core/Src/main.c ****   } else if (htim == &htim7) {
 359              		.loc 1 88 5 is_stmt 1 view .LVU86
  88:Core/Src/main.c ****   } else if (htim == &htim7) {
 360              		.loc 1 88 22 is_stmt 0 view .LVU87
 361 001c 074B     		ldr	r3, .L23+16
 362 001e 0122     		movs	r2, #1
 363 0020 1A70     		strb	r2, [r3]
 364 0022 FAE7     		b	.L16
 365              	.L22:
  90:Core/Src/main.c ****   } else {
ARM GAS  /tmp/cc3EDDyx.s 			page 17


 366              		.loc 1 90 5 is_stmt 1 view .LVU88
  90:Core/Src/main.c ****   } else {
 367              		.loc 1 90 27 is_stmt 0 view .LVU89
 368 0024 064B     		ldr	r3, .L23+20
 369 0026 0122     		movs	r2, #1
 370 0028 1A70     		strb	r2, [r3]
 371 002a F6E7     		b	.L16
 372              	.L24:
 373              		.align	2
 374              	.L23:
 375 002c 00000000 		.word	htim6
 376 0030 00000000 		.word	htim7
 377 0034 00000000 		.word	.LC1
 378 0038 00000000 		.word	huart2
 379 003c 00000000 		.word	check_sensor_int
 380 0040 00000000 		.word	check_sys_voltage_int
 381              		.cfi_endproc
 382              	.LFE239:
 384              		.global	__aeabi_f2d
 385              		.global	__aeabi_ddiv
 386              		.global	__aeabi_dmul
 387              		.global	__aeabi_d2f
 388              		.section	.rodata.checkSensor.str1.4,"aMS",%progbits,1
 389              		.align	2
 390              	.LC2:
 391 0000 666F7263 		.ascii	"force: %f\012\000"
 391      653A2025 
 391      660A00
 392              		.section	.text.checkSensor,"ax",%progbits
 393              		.align	1
 394              		.global	checkSensor
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 399              	checkSensor:
 400              	.LFB240:
  96:Core/Src/main.c ****   int16_t sensor_value = 0;
 401              		.loc 1 96 24 is_stmt 1 view -0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 56
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405 0000 10B5     		push	{r4, lr}
 406              		.cfi_def_cfa_offset 8
 407              		.cfi_offset 4, -8
 408              		.cfi_offset 14, -4
 409 0002 90B0     		sub	sp, sp, #64
 410              		.cfi_def_cfa_offset 72
  97:Core/Src/main.c ****   HAL_ADC_Start(&hadc1);
 411              		.loc 1 97 3 view .LVU91
 412              	.LVL15:
  98:Core/Src/main.c ****   if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 413              		.loc 1 98 3 view .LVU92
 414 0004 224C     		ldr	r4, .L30+16
 415 0006 2046     		mov	r0, r4
 416 0008 FFF7FEFF 		bl	HAL_ADC_Start
 417              	.LVL16:
  99:Core/Src/main.c ****     sensor_value = HAL_ADC_GetValue(&hadc1);
ARM GAS  /tmp/cc3EDDyx.s 			page 18


 418              		.loc 1 99 3 view .LVU93
  99:Core/Src/main.c ****     sensor_value = HAL_ADC_GetValue(&hadc1);
 419              		.loc 1 99 7 is_stmt 0 view .LVU94
 420 000c 0A21     		movs	r1, #10
 421 000e 2046     		mov	r0, r4
 422 0010 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 423              	.LVL17:
  99:Core/Src/main.c ****     sensor_value = HAL_ADC_GetValue(&hadc1);
 424              		.loc 1 99 6 view .LVU95
 425 0014 68B3     		cbz	r0, .L29
  97:Core/Src/main.c ****   HAL_ADC_Start(&hadc1);
 426              		.loc 1 97 11 view .LVU96
 427 0016 0024     		movs	r4, #0
 428              	.LVL18:
 429              	.L26:
 102:Core/Src/main.c ****   char tx_data[50];
 430              		.loc 1 102 3 is_stmt 1 view .LVU97
 431 0018 1D48     		ldr	r0, .L30+16
 432 001a FFF7FEFF 		bl	HAL_ADC_Stop
 433              	.LVL19:
 103:Core/Src/main.c ****   float force = (float)(sensor_value - 1265) / 2830.0 * 1500.0;
 434              		.loc 1 103 3 view .LVU98
 104:Core/Src/main.c ****   snprintf(tx_data, 50, "force: %f\n", force);
 435              		.loc 1 104 3 view .LVU99
 104:Core/Src/main.c ****   snprintf(tx_data, 50, "force: %f\n", force);
 436              		.loc 1 104 38 is_stmt 0 view .LVU100
 437 001e A4F2F140 		subw	r0, r4, #1265
 104:Core/Src/main.c ****   snprintf(tx_data, 50, "force: %f\n", force);
 438              		.loc 1 104 17 view .LVU101
 439 0022 07EE900A 		vmov	s15, r0	@ int
 440 0026 F8EEE77A 		vcvt.f32.s32	s15, s15
 441 002a 17EE900A 		vmov	r0, s15
 442 002e FFF7FEFF 		bl	__aeabi_f2d
 443              	.LVL20:
 104:Core/Src/main.c ****   snprintf(tx_data, 50, "force: %f\n", force);
 444              		.loc 1 104 46 view .LVU102
 445 0032 13A3     		adr	r3, .L30
 446 0034 D3E90023 		ldrd	r2, [r3]
 447 0038 FFF7FEFF 		bl	__aeabi_ddiv
 448              	.LVL21:
 104:Core/Src/main.c ****   snprintf(tx_data, 50, "force: %f\n", force);
 449              		.loc 1 104 55 view .LVU103
 450 003c 12A3     		adr	r3, .L30+8
 451 003e D3E90023 		ldrd	r2, [r3]
 452 0042 FFF7FEFF 		bl	__aeabi_dmul
 453              	.LVL22:
 104:Core/Src/main.c ****   snprintf(tx_data, 50, "force: %f\n", force);
 454              		.loc 1 104 9 view .LVU104
 455 0046 FFF7FEFF 		bl	__aeabi_d2f
 456              	.LVL23:
 105:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (const uint8_t *)tx_data, strlen(tx_data), 100);
 457              		.loc 1 105 3 is_stmt 1 view .LVU105
 458 004a FFF7FEFF 		bl	__aeabi_f2d
 459              	.LVL24:
 105:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (const uint8_t *)tx_data, strlen(tx_data), 100);
 460              		.loc 1 105 3 is_stmt 0 view .LVU106
 461 004e CDE90001 		strd	r0, [sp]
ARM GAS  /tmp/cc3EDDyx.s 			page 19


 462 0052 104A     		ldr	r2, .L30+20
 463 0054 3221     		movs	r1, #50
 464 0056 03A8     		add	r0, sp, #12
 465 0058 FFF7FEFF 		bl	snprintf
 466              	.LVL25:
 106:Core/Src/main.c **** }
 467              		.loc 1 106 3 is_stmt 1 view .LVU107
 106:Core/Src/main.c **** }
 468              		.loc 1 106 56 is_stmt 0 view .LVU108
 469 005c 03A8     		add	r0, sp, #12
 470 005e FFF7FEFF 		bl	strlen
 471              	.LVL26:
 106:Core/Src/main.c **** }
 472              		.loc 1 106 3 view .LVU109
 473 0062 6423     		movs	r3, #100
 474 0064 82B2     		uxth	r2, r0
 475 0066 03A9     		add	r1, sp, #12
 476 0068 0B48     		ldr	r0, .L30+24
 477 006a FFF7FEFF 		bl	HAL_UART_Transmit
 478              	.LVL27:
 107:Core/Src/main.c **** 
 479              		.loc 1 107 1 view .LVU110
 480 006e 10B0     		add	sp, sp, #64
 481              		.cfi_remember_state
 482              		.cfi_def_cfa_offset 8
 483              		@ sp needed
 484 0070 10BD     		pop	{r4, pc}
 485              	.LVL28:
 486              	.L29:
 487              		.cfi_restore_state
 100:Core/Src/main.c ****   }
 488              		.loc 1 100 5 is_stmt 1 view .LVU111
 100:Core/Src/main.c ****   }
 489              		.loc 1 100 20 is_stmt 0 view .LVU112
 490 0072 2046     		mov	r0, r4
 491 0074 FFF7FEFF 		bl	HAL_ADC_GetValue
 492              	.LVL29:
 100:Core/Src/main.c ****   }
 493              		.loc 1 100 18 view .LVU113
 494 0078 04B2     		sxth	r4, r0
 495              	.LVL30:
 100:Core/Src/main.c ****   }
 496              		.loc 1 100 18 view .LVU114
 497 007a CDE7     		b	.L26
 498              	.L31:
 499 007c AFF30080 		.align	3
 500              	.L30:
 501 0080 00000000 		.word	0
 502 0084 001CA640 		.word	1084627968
 503 0088 00000000 		.word	0
 504 008c 00709740 		.word	1083666432
 505 0090 00000000 		.word	hadc1
 506 0094 00000000 		.word	.LC2
 507 0098 00000000 		.word	huart2
 508              		.cfi_endproc
 509              	.LFE240:
 511              		.section	.rodata.checkSystemVoltage.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/cc3EDDyx.s 			page 20


 512              		.align	2
 513              	.LC3:
 514 0000 63686563 		.ascii	"check sys v\012\000"
 514      6B207379 
 514      7320760A 
 514      00
 515              		.section	.text.checkSystemVoltage,"ax",%progbits
 516              		.align	1
 517              		.global	checkSystemVoltage
 518              		.syntax unified
 519              		.thumb
 520              		.thumb_func
 522              	checkSystemVoltage:
 523              	.LFB241:
 109:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (const uint8_t *)"check sys v\n", 12, 100);
 524              		.loc 1 109 31 is_stmt 1 view -0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528 0000 08B5     		push	{r3, lr}
 529              		.cfi_def_cfa_offset 8
 530              		.cfi_offset 3, -8
 531              		.cfi_offset 14, -4
 110:Core/Src/main.c **** }
 532              		.loc 1 110 5 view .LVU116
 533 0002 6423     		movs	r3, #100
 534 0004 0C22     		movs	r2, #12
 535 0006 0249     		ldr	r1, .L34
 536 0008 0248     		ldr	r0, .L34+4
 537 000a FFF7FEFF 		bl	HAL_UART_Transmit
 538              	.LVL31:
 111:Core/Src/main.c **** 
 539              		.loc 1 111 1 is_stmt 0 view .LVU117
 540 000e 08BD     		pop	{r3, pc}
 541              	.L35:
 542              		.align	2
 543              	.L34:
 544 0010 00000000 		.word	.LC3
 545 0014 00000000 		.word	huart2
 546              		.cfi_endproc
 547              	.LFE241:
 549              		.section	.text.fn_StateRunning,"ax",%progbits
 550              		.align	1
 551              		.global	fn_StateRunning
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 556              	fn_StateRunning:
 557              	.LFB242:
 113:Core/Src/main.c ****   if (emergency_int) {
 558              		.loc 1 113 28 is_stmt 1 view -0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 0, uses_anonymous_args = 0
 562 0000 08B5     		push	{r3, lr}
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 3, -8
ARM GAS  /tmp/cc3EDDyx.s 			page 21


 565              		.cfi_offset 14, -4
 114:Core/Src/main.c ****     emergency_int = 0;
 566              		.loc 1 114 3 view .LVU119
 114:Core/Src/main.c ****     emergency_int = 0;
 567              		.loc 1 114 7 is_stmt 0 view .LVU120
 568 0002 124B     		ldr	r3, .L44
 569 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 114:Core/Src/main.c ****     emergency_int = 0;
 570              		.loc 1 114 6 view .LVU121
 571 0006 33B9     		cbnz	r3, .L41
 572              	.L37:
 122:Core/Src/main.c ****     check_sys_voltage_int = 0;
 573              		.loc 1 122 3 is_stmt 1 view .LVU122
 122:Core/Src/main.c ****     check_sys_voltage_int = 0;
 574              		.loc 1 122 7 is_stmt 0 view .LVU123
 575 0008 114B     		ldr	r3, .L44+4
 576 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 122:Core/Src/main.c ****     check_sys_voltage_int = 0;
 577              		.loc 1 122 6 view .LVU124
 578 000c 93B9     		cbnz	r3, .L42
 579              	.L38:
 127:Core/Src/main.c ****     check_sensor_int = 0;
 580              		.loc 1 127 3 is_stmt 1 view .LVU125
 127:Core/Src/main.c ****     check_sensor_int = 0;
 581              		.loc 1 127 7 is_stmt 0 view .LVU126
 582 000e 114B     		ldr	r3, .L44+8
 583 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 127:Core/Src/main.c ****     check_sensor_int = 0;
 584              		.loc 1 127 6 view .LVU127
 585 0012 ABB9     		cbnz	r3, .L43
 586              	.L36:
 131:Core/Src/main.c **** 
 587              		.loc 1 131 1 view .LVU128
 588 0014 08BD     		pop	{r3, pc}
 589              	.L41:
 115:Core/Src/main.c ****     cur_state = STATE_WAITING;
 590              		.loc 1 115 5 is_stmt 1 view .LVU129
 115:Core/Src/main.c ****     cur_state = STATE_WAITING;
 591              		.loc 1 115 19 is_stmt 0 view .LVU130
 592 0016 0023     		movs	r3, #0
 593 0018 0C4A     		ldr	r2, .L44
 594 001a 1370     		strb	r3, [r2]
 116:Core/Src/main.c ****     last_message_time = 0;
 595              		.loc 1 116 5 is_stmt 1 view .LVU131
 116:Core/Src/main.c ****     last_message_time = 0;
 596              		.loc 1 116 15 is_stmt 0 view .LVU132
 597 001c 0E4A     		ldr	r2, .L44+12
 598 001e 0121     		movs	r1, #1
 599 0020 1170     		strb	r1, [r2]
 117:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim6);
 600              		.loc 1 117 5 is_stmt 1 view .LVU133
 117:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim6);
 601              		.loc 1 117 23 is_stmt 0 view .LVU134
 602 0022 0E4A     		ldr	r2, .L44+16
 603 0024 1360     		str	r3, [r2]
 118:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim7);
 604              		.loc 1 118 5 is_stmt 1 view .LVU135
ARM GAS  /tmp/cc3EDDyx.s 			page 22


 605 0026 0E48     		ldr	r0, .L44+20
 606 0028 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 607              	.LVL32:
 119:Core/Src/main.c ****   }
 608              		.loc 1 119 5 view .LVU136
 609 002c 0D48     		ldr	r0, .L44+24
 610 002e FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 611              	.LVL33:
 612 0032 E9E7     		b	.L37
 613              	.L42:
 123:Core/Src/main.c ****     checkSystemVoltage();
 614              		.loc 1 123 5 view .LVU137
 123:Core/Src/main.c ****     checkSystemVoltage();
 615              		.loc 1 123 27 is_stmt 0 view .LVU138
 616 0034 064B     		ldr	r3, .L44+4
 617 0036 0022     		movs	r2, #0
 618 0038 1A70     		strb	r2, [r3]
 124:Core/Src/main.c ****   }
 619              		.loc 1 124 5 is_stmt 1 view .LVU139
 620 003a FFF7FEFF 		bl	checkSystemVoltage
 621              	.LVL34:
 622 003e E6E7     		b	.L38
 623              	.L43:
 128:Core/Src/main.c ****     checkSensor();
 624              		.loc 1 128 5 view .LVU140
 128:Core/Src/main.c ****     checkSensor();
 625              		.loc 1 128 22 is_stmt 0 view .LVU141
 626 0040 044B     		ldr	r3, .L44+8
 627 0042 0022     		movs	r2, #0
 628 0044 1A70     		strb	r2, [r3]
 129:Core/Src/main.c ****   }
 629              		.loc 1 129 5 is_stmt 1 view .LVU142
 630 0046 FFF7FEFF 		bl	checkSensor
 631              	.LVL35:
 131:Core/Src/main.c **** 
 632              		.loc 1 131 1 is_stmt 0 view .LVU143
 633 004a E3E7     		b	.L36
 634              	.L45:
 635              		.align	2
 636              	.L44:
 637 004c 00000000 		.word	emergency_int
 638 0050 00000000 		.word	check_sys_voltage_int
 639 0054 00000000 		.word	check_sensor_int
 640 0058 00000000 		.word	cur_state
 641 005c 00000000 		.word	last_message_time
 642 0060 00000000 		.word	htim6
 643 0064 00000000 		.word	htim7
 644              		.cfi_endproc
 645              	.LFE242:
 647              		.section	.rodata.FSM_run.str1.4,"aMS",%progbits,1
 648              		.align	2
 649              	.LC4:
 650 0000 46534D20 		.ascii	"FSM error\012\000"
 650      6572726F 
 650      720A00
 651              		.section	.text.FSM_run,"ax",%progbits
 652              		.align	1
ARM GAS  /tmp/cc3EDDyx.s 			page 23


 653              		.global	FSM_run
 654              		.syntax unified
 655              		.thumb
 656              		.thumb_func
 658              	FSM_run:
 659              	.LFB244:
 155:Core/Src/main.c ****   if(cur_state < NUM_STATES){
 660              		.loc 1 155 19 is_stmt 1 view -0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 0
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664 0000 08B5     		push	{r3, lr}
 665              		.cfi_def_cfa_offset 8
 666              		.cfi_offset 3, -8
 667              		.cfi_offset 14, -4
 156:Core/Src/main.c ****     (*StateMachine[cur_state].func)();
 668              		.loc 1 156 3 view .LVU145
 156:Core/Src/main.c ****     (*StateMachine[cur_state].func)();
 669              		.loc 1 156 16 is_stmt 0 view .LVU146
 670 0002 084B     		ldr	r3, .L50
 671 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 156:Core/Src/main.c ****     (*StateMachine[cur_state].func)();
 672              		.loc 1 156 5 view .LVU147
 673 0006 012B     		cmp	r3, #1
 674 0008 05D8     		bhi	.L47
 157:Core/Src/main.c ****   }
 675              		.loc 1 157 5 is_stmt 1 view .LVU148
 157:Core/Src/main.c ****   }
 676              		.loc 1 157 6 is_stmt 0 view .LVU149
 677 000a 074A     		ldr	r2, .L50+4
 678 000c 02EBC303 		add	r3, r2, r3, lsl #3
 679 0010 5B68     		ldr	r3, [r3, #4]
 680 0012 9847     		blx	r3
 681              	.LVL36:
 682              	.L46:
 162:Core/Src/main.c **** /* USER CODE END 0 */
 683              		.loc 1 162 1 view .LVU150
 684 0014 08BD     		pop	{r3, pc}
 685              	.L47:
 160:Core/Src/main.c ****   }
 686              		.loc 1 160 5 is_stmt 1 view .LVU151
 687 0016 6423     		movs	r3, #100
 688 0018 0A22     		movs	r2, #10
 689 001a 0449     		ldr	r1, .L50+8
 690 001c 0448     		ldr	r0, .L50+12
 691 001e FFF7FEFF 		bl	HAL_UART_Transmit
 692              	.LVL37:
 162:Core/Src/main.c **** /* USER CODE END 0 */
 693              		.loc 1 162 1 is_stmt 0 view .LVU152
 694 0022 F7E7     		b	.L46
 695              	.L51:
 696              		.align	2
 697              	.L50:
 698 0024 00000000 		.word	cur_state
 699 0028 00000000 		.word	StateMachine
 700 002c 00000000 		.word	.LC4
 701 0030 00000000 		.word	huart2
ARM GAS  /tmp/cc3EDDyx.s 			page 24


 702              		.cfi_endproc
 703              	.LFE244:
 705              		.section	.text.Error_Handler,"ax",%progbits
 706              		.align	1
 707              		.global	Error_Handler
 708              		.syntax unified
 709              		.thumb
 710              		.thumb_func
 712              	Error_Handler:
 713              	.LFB253:
 513:Core/Src/main.c **** 
 514:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 515:Core/Src/main.c **** 
 516:Core/Src/main.c **** /* USER CODE END 4 */
 517:Core/Src/main.c **** 
 518:Core/Src/main.c **** /**
 519:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 520:Core/Src/main.c ****   * @retval None
 521:Core/Src/main.c ****   */
 522:Core/Src/main.c **** void Error_Handler(void)
 523:Core/Src/main.c **** {
 714              		.loc 1 523 1 is_stmt 1 view -0
 715              		.cfi_startproc
 716              		@ Volatile: function does not return.
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719              		@ link register save eliminated.
 524:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 525:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 526:Core/Src/main.c ****   __disable_irq();
 720              		.loc 1 526 3 view .LVU154
 721              	.LBB8:
 722              	.LBI8:
 723              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc3EDDyx.s 			page 25


  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/cc3EDDyx.s 			page 26


  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
ARM GAS  /tmp/cc3EDDyx.s 			page 27


 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 724              		.loc 2 140 27 view .LVU155
 725              	.LBB9:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 726              		.loc 2 142 3 view .LVU156
 727              		.syntax unified
 728              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 729 0000 72B6     		cpsid i
 730              	@ 0 "" 2
 731              		.thumb
 732              		.syntax unified
 733              	.L53:
 734              	.LBE9:
 735              	.LBE8:
 527:Core/Src/main.c ****   while (1)
 736              		.loc 1 527 3 discriminator 1 view .LVU157
 528:Core/Src/main.c ****   {
 529:Core/Src/main.c ****   }
 737              		.loc 1 529 3 discriminator 1 view .LVU158
 527:Core/Src/main.c ****   while (1)
 738              		.loc 1 527 9 discriminator 1 view .LVU159
 739 0002 FEE7     		b	.L53
 740              		.cfi_endproc
 741              	.LFE253:
 743              		.section	.text.MX_ADC1_Init,"ax",%progbits
 744              		.align	1
 745              		.syntax unified
 746              		.thumb
 747              		.thumb_func
 749              	MX_ADC1_Init:
 750              	.LFB247:
 266:Core/Src/main.c **** 
 751              		.loc 1 266 1 view -0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 16
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755 0000 00B5     		push	{lr}
 756              		.cfi_def_cfa_offset 4
 757              		.cfi_offset 14, -4
 758 0002 85B0     		sub	sp, sp, #20
 759              		.cfi_def_cfa_offset 24
 272:Core/Src/main.c **** 
 760              		.loc 1 272 3 view .LVU161
 272:Core/Src/main.c **** 
 761              		.loc 1 272 26 is_stmt 0 view .LVU162
 762 0004 0023     		movs	r3, #0
 763 0006 0093     		str	r3, [sp]
 764 0008 0193     		str	r3, [sp, #4]
 765 000a 0293     		str	r3, [sp, #8]
 766 000c 0393     		str	r3, [sp, #12]
 280:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 767              		.loc 1 280 3 is_stmt 1 view .LVU163
 280:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 768              		.loc 1 280 18 is_stmt 0 view .LVU164
ARM GAS  /tmp/cc3EDDyx.s 			page 28


 769 000e 1348     		ldr	r0, .L60
 770 0010 134A     		ldr	r2, .L60+4
 771 0012 0260     		str	r2, [r0]
 281:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 772              		.loc 1 281 3 is_stmt 1 view .LVU165
 281:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 773              		.loc 1 281 29 is_stmt 0 view .LVU166
 774 0014 4360     		str	r3, [r0, #4]
 282:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 775              		.loc 1 282 3 is_stmt 1 view .LVU167
 282:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 776              		.loc 1 282 25 is_stmt 0 view .LVU168
 777 0016 8360     		str	r3, [r0, #8]
 283:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 778              		.loc 1 283 3 is_stmt 1 view .LVU169
 283:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 779              		.loc 1 283 27 is_stmt 0 view .LVU170
 780 0018 0361     		str	r3, [r0, #16]
 284:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 781              		.loc 1 284 3 is_stmt 1 view .LVU171
 284:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 782              		.loc 1 284 33 is_stmt 0 view .LVU172
 783 001a 0376     		strb	r3, [r0, #24]
 285:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 784              		.loc 1 285 3 is_stmt 1 view .LVU173
 285:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 785              		.loc 1 285 36 is_stmt 0 view .LVU174
 786 001c 80F82030 		strb	r3, [r0, #32]
 286:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 787              		.loc 1 286 3 is_stmt 1 view .LVU175
 286:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 788              		.loc 1 286 35 is_stmt 0 view .LVU176
 789 0020 C362     		str	r3, [r0, #44]
 287:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 790              		.loc 1 287 3 is_stmt 1 view .LVU177
 287:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 791              		.loc 1 287 31 is_stmt 0 view .LVU178
 792 0022 104A     		ldr	r2, .L60+8
 793 0024 8262     		str	r2, [r0, #40]
 288:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 794              		.loc 1 288 3 is_stmt 1 view .LVU179
 288:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 795              		.loc 1 288 24 is_stmt 0 view .LVU180
 796 0026 C360     		str	r3, [r0, #12]
 289:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 797              		.loc 1 289 3 is_stmt 1 view .LVU181
 289:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 798              		.loc 1 289 30 is_stmt 0 view .LVU182
 799 0028 0122     		movs	r2, #1
 800 002a C261     		str	r2, [r0, #28]
 290:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801              		.loc 1 290 3 is_stmt 1 view .LVU183
 290:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 802              		.loc 1 290 36 is_stmt 0 view .LVU184
 803 002c 80F83030 		strb	r3, [r0, #48]
 291:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 804              		.loc 1 291 3 is_stmt 1 view .LVU185
ARM GAS  /tmp/cc3EDDyx.s 			page 29


 291:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 805              		.loc 1 291 27 is_stmt 0 view .LVU186
 806 0030 4261     		str	r2, [r0, #20]
 292:Core/Src/main.c ****   {
 807              		.loc 1 292 3 is_stmt 1 view .LVU187
 292:Core/Src/main.c ****   {
 808              		.loc 1 292 7 is_stmt 0 view .LVU188
 809 0032 FFF7FEFF 		bl	HAL_ADC_Init
 810              	.LVL38:
 292:Core/Src/main.c ****   {
 811              		.loc 1 292 6 view .LVU189
 812 0036 60B9     		cbnz	r0, .L58
 299:Core/Src/main.c ****   sConfig.Rank = 1;
 813              		.loc 1 299 3 is_stmt 1 view .LVU190
 299:Core/Src/main.c ****   sConfig.Rank = 1;
 814              		.loc 1 299 19 is_stmt 0 view .LVU191
 815 0038 0023     		movs	r3, #0
 816 003a 0093     		str	r3, [sp]
 300:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 817              		.loc 1 300 3 is_stmt 1 view .LVU192
 300:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 818              		.loc 1 300 16 is_stmt 0 view .LVU193
 819 003c 0122     		movs	r2, #1
 820 003e 0192     		str	r2, [sp, #4]
 301:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 821              		.loc 1 301 3 is_stmt 1 view .LVU194
 301:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 822              		.loc 1 301 24 is_stmt 0 view .LVU195
 823 0040 0293     		str	r3, [sp, #8]
 302:Core/Src/main.c ****   {
 824              		.loc 1 302 3 is_stmt 1 view .LVU196
 302:Core/Src/main.c ****   {
 825              		.loc 1 302 7 is_stmt 0 view .LVU197
 826 0042 6946     		mov	r1, sp
 827 0044 0548     		ldr	r0, .L60
 828 0046 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 829              	.LVL39:
 302:Core/Src/main.c ****   {
 830              		.loc 1 302 6 view .LVU198
 831 004a 20B9     		cbnz	r0, .L59
 310:Core/Src/main.c **** 
 832              		.loc 1 310 1 view .LVU199
 833 004c 05B0     		add	sp, sp, #20
 834              		.cfi_remember_state
 835              		.cfi_def_cfa_offset 4
 836              		@ sp needed
 837 004e 5DF804FB 		ldr	pc, [sp], #4
 838              	.L58:
 839              		.cfi_restore_state
 294:Core/Src/main.c ****   }
 840              		.loc 1 294 5 is_stmt 1 view .LVU200
 841 0052 FFF7FEFF 		bl	Error_Handler
 842              	.LVL40:
 843              	.L59:
 304:Core/Src/main.c ****   }
 844              		.loc 1 304 5 view .LVU201
 845 0056 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/cc3EDDyx.s 			page 30


 846              	.LVL41:
 847              	.L61:
 848 005a 00BF     		.align	2
 849              	.L60:
 850 005c 00000000 		.word	hadc1
 851 0060 00200140 		.word	1073815552
 852 0064 0100000F 		.word	251658241
 853              		.cfi_endproc
 854              	.LFE247:
 856              		.section	.text.MX_ADC2_Init,"ax",%progbits
 857              		.align	1
 858              		.syntax unified
 859              		.thumb
 860              		.thumb_func
 862              	MX_ADC2_Init:
 863              	.LFB248:
 318:Core/Src/main.c **** 
 864              		.loc 1 318 1 view -0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 16
 867              		@ frame_needed = 0, uses_anonymous_args = 0
 868 0000 00B5     		push	{lr}
 869              		.cfi_def_cfa_offset 4
 870              		.cfi_offset 14, -4
 871 0002 85B0     		sub	sp, sp, #20
 872              		.cfi_def_cfa_offset 24
 324:Core/Src/main.c **** 
 873              		.loc 1 324 3 view .LVU203
 324:Core/Src/main.c **** 
 874              		.loc 1 324 26 is_stmt 0 view .LVU204
 875 0004 0023     		movs	r3, #0
 876 0006 0093     		str	r3, [sp]
 877 0008 0193     		str	r3, [sp, #4]
 878 000a 0293     		str	r3, [sp, #8]
 879 000c 0393     		str	r3, [sp, #12]
 332:Core/Src/main.c ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 880              		.loc 1 332 3 is_stmt 1 view .LVU205
 332:Core/Src/main.c ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 881              		.loc 1 332 18 is_stmt 0 view .LVU206
 882 000e 1348     		ldr	r0, .L68
 883 0010 134A     		ldr	r2, .L68+4
 884 0012 0260     		str	r2, [r0]
 333:Core/Src/main.c ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 885              		.loc 1 333 3 is_stmt 1 view .LVU207
 333:Core/Src/main.c ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 886              		.loc 1 333 29 is_stmt 0 view .LVU208
 887 0014 4360     		str	r3, [r0, #4]
 334:Core/Src/main.c ****   hadc2.Init.ScanConvMode = DISABLE;
 888              		.loc 1 334 3 is_stmt 1 view .LVU209
 334:Core/Src/main.c ****   hadc2.Init.ScanConvMode = DISABLE;
 889              		.loc 1 334 25 is_stmt 0 view .LVU210
 890 0016 8360     		str	r3, [r0, #8]
 335:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 891              		.loc 1 335 3 is_stmt 1 view .LVU211
 335:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 892              		.loc 1 335 27 is_stmt 0 view .LVU212
 893 0018 0361     		str	r3, [r0, #16]
ARM GAS  /tmp/cc3EDDyx.s 			page 31


 336:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 894              		.loc 1 336 3 is_stmt 1 view .LVU213
 336:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 895              		.loc 1 336 33 is_stmt 0 view .LVU214
 896 001a 0376     		strb	r3, [r0, #24]
 337:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 897              		.loc 1 337 3 is_stmt 1 view .LVU215
 337:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 898              		.loc 1 337 36 is_stmt 0 view .LVU216
 899 001c 80F82030 		strb	r3, [r0, #32]
 338:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 900              		.loc 1 338 3 is_stmt 1 view .LVU217
 338:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 901              		.loc 1 338 35 is_stmt 0 view .LVU218
 902 0020 C362     		str	r3, [r0, #44]
 339:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 903              		.loc 1 339 3 is_stmt 1 view .LVU219
 339:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 904              		.loc 1 339 31 is_stmt 0 view .LVU220
 905 0022 104A     		ldr	r2, .L68+8
 906 0024 8262     		str	r2, [r0, #40]
 340:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 907              		.loc 1 340 3 is_stmt 1 view .LVU221
 340:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 908              		.loc 1 340 24 is_stmt 0 view .LVU222
 909 0026 C360     		str	r3, [r0, #12]
 341:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 910              		.loc 1 341 3 is_stmt 1 view .LVU223
 341:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 911              		.loc 1 341 30 is_stmt 0 view .LVU224
 912 0028 0122     		movs	r2, #1
 913 002a C261     		str	r2, [r0, #28]
 342:Core/Src/main.c ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 914              		.loc 1 342 3 is_stmt 1 view .LVU225
 342:Core/Src/main.c ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 915              		.loc 1 342 36 is_stmt 0 view .LVU226
 916 002c 80F83030 		strb	r3, [r0, #48]
 343:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 917              		.loc 1 343 3 is_stmt 1 view .LVU227
 343:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 918              		.loc 1 343 27 is_stmt 0 view .LVU228
 919 0030 4261     		str	r2, [r0, #20]
 344:Core/Src/main.c ****   {
 920              		.loc 1 344 3 is_stmt 1 view .LVU229
 344:Core/Src/main.c ****   {
 921              		.loc 1 344 7 is_stmt 0 view .LVU230
 922 0032 FFF7FEFF 		bl	HAL_ADC_Init
 923              	.LVL42:
 344:Core/Src/main.c ****   {
 924              		.loc 1 344 6 view .LVU231
 925 0036 60B9     		cbnz	r0, .L66
 351:Core/Src/main.c ****   sConfig.Rank = 1;
 926              		.loc 1 351 3 is_stmt 1 view .LVU232
 351:Core/Src/main.c ****   sConfig.Rank = 1;
 927              		.loc 1 351 19 is_stmt 0 view .LVU233
 928 0038 0123     		movs	r3, #1
 929 003a 0093     		str	r3, [sp]
ARM GAS  /tmp/cc3EDDyx.s 			page 32


 352:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 930              		.loc 1 352 3 is_stmt 1 view .LVU234
 352:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 931              		.loc 1 352 16 is_stmt 0 view .LVU235
 932 003c 0193     		str	r3, [sp, #4]
 353:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 933              		.loc 1 353 3 is_stmt 1 view .LVU236
 353:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 934              		.loc 1 353 24 is_stmt 0 view .LVU237
 935 003e 0023     		movs	r3, #0
 936 0040 0293     		str	r3, [sp, #8]
 354:Core/Src/main.c ****   {
 937              		.loc 1 354 3 is_stmt 1 view .LVU238
 354:Core/Src/main.c ****   {
 938              		.loc 1 354 7 is_stmt 0 view .LVU239
 939 0042 6946     		mov	r1, sp
 940 0044 0548     		ldr	r0, .L68
 941 0046 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 942              	.LVL43:
 354:Core/Src/main.c ****   {
 943              		.loc 1 354 6 view .LVU240
 944 004a 20B9     		cbnz	r0, .L67
 362:Core/Src/main.c **** 
 945              		.loc 1 362 1 view .LVU241
 946 004c 05B0     		add	sp, sp, #20
 947              		.cfi_remember_state
 948              		.cfi_def_cfa_offset 4
 949              		@ sp needed
 950 004e 5DF804FB 		ldr	pc, [sp], #4
 951              	.L66:
 952              		.cfi_restore_state
 346:Core/Src/main.c ****   }
 953              		.loc 1 346 5 is_stmt 1 view .LVU242
 954 0052 FFF7FEFF 		bl	Error_Handler
 955              	.LVL44:
 956              	.L67:
 356:Core/Src/main.c ****   }
 957              		.loc 1 356 5 view .LVU243
 958 0056 FFF7FEFF 		bl	Error_Handler
 959              	.LVL45:
 960              	.L69:
 961 005a 00BF     		.align	2
 962              	.L68:
 963 005c 00000000 		.word	hadc2
 964 0060 00210140 		.word	1073815808
 965 0064 0100000F 		.word	251658241
 966              		.cfi_endproc
 967              	.LFE248:
 969              		.section	.text.MX_TIM6_Init,"ax",%progbits
 970              		.align	1
 971              		.syntax unified
 972              		.thumb
 973              		.thumb_func
 975              	MX_TIM6_Init:
 976              	.LFB249:
 370:Core/Src/main.c **** 
 977              		.loc 1 370 1 view -0
ARM GAS  /tmp/cc3EDDyx.s 			page 33


 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 8
 980              		@ frame_needed = 0, uses_anonymous_args = 0
 981 0000 00B5     		push	{lr}
 982              		.cfi_def_cfa_offset 4
 983              		.cfi_offset 14, -4
 984 0002 83B0     		sub	sp, sp, #12
 985              		.cfi_def_cfa_offset 16
 376:Core/Src/main.c **** 
 986              		.loc 1 376 3 view .LVU245
 376:Core/Src/main.c **** 
 987              		.loc 1 376 27 is_stmt 0 view .LVU246
 988 0004 0023     		movs	r3, #0
 989 0006 0093     		str	r3, [sp]
 990 0008 0193     		str	r3, [sp, #4]
 381:Core/Src/main.c ****   htim6.Init.Prescaler = 15999;
 991              		.loc 1 381 3 is_stmt 1 view .LVU247
 381:Core/Src/main.c ****   htim6.Init.Prescaler = 15999;
 992              		.loc 1 381 18 is_stmt 0 view .LVU248
 993 000a 0E48     		ldr	r0, .L76
 994 000c 0E4A     		ldr	r2, .L76+4
 995 000e 0260     		str	r2, [r0]
 382:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 996              		.loc 1 382 3 is_stmt 1 view .LVU249
 382:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 997              		.loc 1 382 24 is_stmt 0 view .LVU250
 998 0010 43F67F62 		movw	r2, #15999
 999 0014 4260     		str	r2, [r0, #4]
 383:Core/Src/main.c ****   htim6.Init.Period = 200;
 1000              		.loc 1 383 3 is_stmt 1 view .LVU251
 383:Core/Src/main.c ****   htim6.Init.Period = 200;
 1001              		.loc 1 383 26 is_stmt 0 view .LVU252
 1002 0016 8360     		str	r3, [r0, #8]
 384:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1003              		.loc 1 384 3 is_stmt 1 view .LVU253
 384:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1004              		.loc 1 384 21 is_stmt 0 view .LVU254
 1005 0018 C822     		movs	r2, #200
 1006 001a C260     		str	r2, [r0, #12]
 385:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 1007              		.loc 1 385 3 is_stmt 1 view .LVU255
 385:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 1008              		.loc 1 385 32 is_stmt 0 view .LVU256
 1009 001c 8361     		str	r3, [r0, #24]
 386:Core/Src/main.c ****   {
 1010              		.loc 1 386 3 is_stmt 1 view .LVU257
 386:Core/Src/main.c ****   {
 1011              		.loc 1 386 7 is_stmt 0 view .LVU258
 1012 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 1013              	.LVL46:
 386:Core/Src/main.c ****   {
 1014              		.loc 1 386 6 view .LVU259
 1015 0022 50B9     		cbnz	r0, .L74
 390:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1016              		.loc 1 390 3 is_stmt 1 view .LVU260
 390:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1017              		.loc 1 390 37 is_stmt 0 view .LVU261
ARM GAS  /tmp/cc3EDDyx.s 			page 34


 1018 0024 0023     		movs	r3, #0
 1019 0026 0093     		str	r3, [sp]
 391:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 1020              		.loc 1 391 3 is_stmt 1 view .LVU262
 391:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 1021              		.loc 1 391 33 is_stmt 0 view .LVU263
 1022 0028 0193     		str	r3, [sp, #4]
 392:Core/Src/main.c ****   {
 1023              		.loc 1 392 3 is_stmt 1 view .LVU264
 392:Core/Src/main.c ****   {
 1024              		.loc 1 392 7 is_stmt 0 view .LVU265
 1025 002a 6946     		mov	r1, sp
 1026 002c 0548     		ldr	r0, .L76
 1027 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1028              	.LVL47:
 392:Core/Src/main.c ****   {
 1029              		.loc 1 392 6 view .LVU266
 1030 0032 20B9     		cbnz	r0, .L75
 400:Core/Src/main.c **** 
 1031              		.loc 1 400 1 view .LVU267
 1032 0034 03B0     		add	sp, sp, #12
 1033              		.cfi_remember_state
 1034              		.cfi_def_cfa_offset 4
 1035              		@ sp needed
 1036 0036 5DF804FB 		ldr	pc, [sp], #4
 1037              	.L74:
 1038              		.cfi_restore_state
 388:Core/Src/main.c ****   }
 1039              		.loc 1 388 5 is_stmt 1 view .LVU268
 1040 003a FFF7FEFF 		bl	Error_Handler
 1041              	.LVL48:
 1042              	.L75:
 394:Core/Src/main.c ****   }
 1043              		.loc 1 394 5 view .LVU269
 1044 003e FFF7FEFF 		bl	Error_Handler
 1045              	.LVL49:
 1046              	.L77:
 1047 0042 00BF     		.align	2
 1048              	.L76:
 1049 0044 00000000 		.word	htim6
 1050 0048 00100040 		.word	1073745920
 1051              		.cfi_endproc
 1052              	.LFE249:
 1054              		.section	.text.MX_TIM7_Init,"ax",%progbits
 1055              		.align	1
 1056              		.syntax unified
 1057              		.thumb
 1058              		.thumb_func
 1060              	MX_TIM7_Init:
 1061              	.LFB250:
 408:Core/Src/main.c **** 
 1062              		.loc 1 408 1 view -0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 8
 1065              		@ frame_needed = 0, uses_anonymous_args = 0
 1066 0000 00B5     		push	{lr}
 1067              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc3EDDyx.s 			page 35


 1068              		.cfi_offset 14, -4
 1069 0002 83B0     		sub	sp, sp, #12
 1070              		.cfi_def_cfa_offset 16
 414:Core/Src/main.c **** 
 1071              		.loc 1 414 3 view .LVU271
 414:Core/Src/main.c **** 
 1072              		.loc 1 414 27 is_stmt 0 view .LVU272
 1073 0004 0023     		movs	r3, #0
 1074 0006 0093     		str	r3, [sp]
 1075 0008 0193     		str	r3, [sp, #4]
 419:Core/Src/main.c ****   htim7.Init.Prescaler = 15999;
 1076              		.loc 1 419 3 is_stmt 1 view .LVU273
 419:Core/Src/main.c ****   htim7.Init.Prescaler = 15999;
 1077              		.loc 1 419 18 is_stmt 0 view .LVU274
 1078 000a 0E48     		ldr	r0, .L84
 1079 000c 0E4A     		ldr	r2, .L84+4
 1080 000e 0260     		str	r2, [r0]
 420:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 1081              		.loc 1 420 3 is_stmt 1 view .LVU275
 420:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 1082              		.loc 1 420 24 is_stmt 0 view .LVU276
 1083 0010 43F67F62 		movw	r2, #15999
 1084 0014 4260     		str	r2, [r0, #4]
 421:Core/Src/main.c ****   htim7.Init.Period = 350;
 1085              		.loc 1 421 3 is_stmt 1 view .LVU277
 421:Core/Src/main.c ****   htim7.Init.Period = 350;
 1086              		.loc 1 421 26 is_stmt 0 view .LVU278
 1087 0016 8360     		str	r3, [r0, #8]
 422:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1088              		.loc 1 422 3 is_stmt 1 view .LVU279
 422:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1089              		.loc 1 422 21 is_stmt 0 view .LVU280
 1090 0018 4FF4AF72 		mov	r2, #350
 1091 001c C260     		str	r2, [r0, #12]
 423:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 1092              		.loc 1 423 3 is_stmt 1 view .LVU281
 423:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 1093              		.loc 1 423 32 is_stmt 0 view .LVU282
 1094 001e 8361     		str	r3, [r0, #24]
 424:Core/Src/main.c ****   {
 1095              		.loc 1 424 3 is_stmt 1 view .LVU283
 424:Core/Src/main.c ****   {
 1096              		.loc 1 424 7 is_stmt 0 view .LVU284
 1097 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1098              	.LVL50:
 424:Core/Src/main.c ****   {
 1099              		.loc 1 424 6 view .LVU285
 1100 0024 50B9     		cbnz	r0, .L82
 428:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1101              		.loc 1 428 3 is_stmt 1 view .LVU286
 428:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1102              		.loc 1 428 37 is_stmt 0 view .LVU287
 1103 0026 0023     		movs	r3, #0
 1104 0028 0093     		str	r3, [sp]
 429:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 1105              		.loc 1 429 3 is_stmt 1 view .LVU288
 429:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
ARM GAS  /tmp/cc3EDDyx.s 			page 36


 1106              		.loc 1 429 33 is_stmt 0 view .LVU289
 1107 002a 0193     		str	r3, [sp, #4]
 430:Core/Src/main.c ****   {
 1108              		.loc 1 430 3 is_stmt 1 view .LVU290
 430:Core/Src/main.c ****   {
 1109              		.loc 1 430 7 is_stmt 0 view .LVU291
 1110 002c 6946     		mov	r1, sp
 1111 002e 0548     		ldr	r0, .L84
 1112 0030 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1113              	.LVL51:
 430:Core/Src/main.c ****   {
 1114              		.loc 1 430 6 view .LVU292
 1115 0034 20B9     		cbnz	r0, .L83
 438:Core/Src/main.c **** 
 1116              		.loc 1 438 1 view .LVU293
 1117 0036 03B0     		add	sp, sp, #12
 1118              		.cfi_remember_state
 1119              		.cfi_def_cfa_offset 4
 1120              		@ sp needed
 1121 0038 5DF804FB 		ldr	pc, [sp], #4
 1122              	.L82:
 1123              		.cfi_restore_state
 426:Core/Src/main.c ****   }
 1124              		.loc 1 426 5 is_stmt 1 view .LVU294
 1125 003c FFF7FEFF 		bl	Error_Handler
 1126              	.LVL52:
 1127              	.L83:
 432:Core/Src/main.c ****   }
 1128              		.loc 1 432 5 view .LVU295
 1129 0040 FFF7FEFF 		bl	Error_Handler
 1130              	.LVL53:
 1131              	.L85:
 1132              		.align	2
 1133              	.L84:
 1134 0044 00000000 		.word	htim7
 1135 0048 00140040 		.word	1073746944
 1136              		.cfi_endproc
 1137              	.LFE250:
 1139              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1140              		.align	1
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1145              	MX_USART2_UART_Init:
 1146              	.LFB251:
 446:Core/Src/main.c **** 
 1147              		.loc 1 446 1 view -0
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 0
 1150              		@ frame_needed = 0, uses_anonymous_args = 0
 1151 0000 08B5     		push	{r3, lr}
 1152              		.cfi_def_cfa_offset 8
 1153              		.cfi_offset 3, -8
 1154              		.cfi_offset 14, -4
 455:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 1155              		.loc 1 455 3 view .LVU297
 455:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
ARM GAS  /tmp/cc3EDDyx.s 			page 37


 1156              		.loc 1 455 19 is_stmt 0 view .LVU298
 1157 0002 0A48     		ldr	r0, .L90
 1158 0004 0A4B     		ldr	r3, .L90+4
 1159 0006 0360     		str	r3, [r0]
 456:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1160              		.loc 1 456 3 is_stmt 1 view .LVU299
 456:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1161              		.loc 1 456 24 is_stmt 0 view .LVU300
 1162 0008 4FF41653 		mov	r3, #9600
 1163 000c 4360     		str	r3, [r0, #4]
 457:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1164              		.loc 1 457 3 is_stmt 1 view .LVU301
 457:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1165              		.loc 1 457 26 is_stmt 0 view .LVU302
 1166 000e 0023     		movs	r3, #0
 1167 0010 8360     		str	r3, [r0, #8]
 458:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1168              		.loc 1 458 3 is_stmt 1 view .LVU303
 458:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1169              		.loc 1 458 24 is_stmt 0 view .LVU304
 1170 0012 C360     		str	r3, [r0, #12]
 459:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1171              		.loc 1 459 3 is_stmt 1 view .LVU305
 459:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1172              		.loc 1 459 22 is_stmt 0 view .LVU306
 1173 0014 0361     		str	r3, [r0, #16]
 460:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1174              		.loc 1 460 3 is_stmt 1 view .LVU307
 460:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1175              		.loc 1 460 20 is_stmt 0 view .LVU308
 1176 0016 0C22     		movs	r2, #12
 1177 0018 4261     		str	r2, [r0, #20]
 461:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1178              		.loc 1 461 3 is_stmt 1 view .LVU309
 461:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1179              		.loc 1 461 25 is_stmt 0 view .LVU310
 1180 001a 8361     		str	r3, [r0, #24]
 462:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1181              		.loc 1 462 3 is_stmt 1 view .LVU311
 462:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1182              		.loc 1 462 28 is_stmt 0 view .LVU312
 1183 001c C361     		str	r3, [r0, #28]
 463:Core/Src/main.c ****   {
 1184              		.loc 1 463 3 is_stmt 1 view .LVU313
 463:Core/Src/main.c ****   {
 1185              		.loc 1 463 7 is_stmt 0 view .LVU314
 1186 001e FFF7FEFF 		bl	HAL_UART_Init
 1187              	.LVL54:
 463:Core/Src/main.c ****   {
 1188              		.loc 1 463 6 view .LVU315
 1189 0022 00B9     		cbnz	r0, .L89
 471:Core/Src/main.c **** 
 1190              		.loc 1 471 1 view .LVU316
 1191 0024 08BD     		pop	{r3, pc}
 1192              	.L89:
 465:Core/Src/main.c ****   }
 1193              		.loc 1 465 5 is_stmt 1 view .LVU317
ARM GAS  /tmp/cc3EDDyx.s 			page 38


 1194 0026 FFF7FEFF 		bl	Error_Handler
 1195              	.LVL55:
 1196              	.L91:
 1197 002a 00BF     		.align	2
 1198              	.L90:
 1199 002c 00000000 		.word	huart2
 1200 0030 00440040 		.word	1073759232
 1201              		.cfi_endproc
 1202              	.LFE251:
 1204              		.section	.text.SystemClock_Config,"ax",%progbits
 1205              		.align	1
 1206              		.global	SystemClock_Config
 1207              		.syntax unified
 1208              		.thumb
 1209              		.thumb_func
 1211              	SystemClock_Config:
 1212              	.LFB246:
 224:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1213              		.loc 1 224 1 view -0
 1214              		.cfi_startproc
 1215              		@ args = 0, pretend = 0, frame = 80
 1216              		@ frame_needed = 0, uses_anonymous_args = 0
 1217 0000 00B5     		push	{lr}
 1218              		.cfi_def_cfa_offset 4
 1219              		.cfi_offset 14, -4
 1220 0002 95B0     		sub	sp, sp, #84
 1221              		.cfi_def_cfa_offset 88
 225:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1222              		.loc 1 225 3 view .LVU319
 225:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1223              		.loc 1 225 22 is_stmt 0 view .LVU320
 1224 0004 3422     		movs	r2, #52
 1225 0006 0021     		movs	r1, #0
 1226 0008 07A8     		add	r0, sp, #28
 1227 000a FFF7FEFF 		bl	memset
 1228              	.LVL56:
 226:Core/Src/main.c **** 
 1229              		.loc 1 226 3 is_stmt 1 view .LVU321
 226:Core/Src/main.c **** 
 1230              		.loc 1 226 22 is_stmt 0 view .LVU322
 1231 000e 0023     		movs	r3, #0
 1232 0010 0293     		str	r3, [sp, #8]
 1233 0012 0393     		str	r3, [sp, #12]
 1234 0014 0493     		str	r3, [sp, #16]
 1235 0016 0593     		str	r3, [sp, #20]
 1236 0018 0693     		str	r3, [sp, #24]
 230:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1237              		.loc 1 230 3 is_stmt 1 view .LVU323
 1238              	.LBB10:
 230:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1239              		.loc 1 230 3 view .LVU324
 1240 001a 0093     		str	r3, [sp]
 230:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1241              		.loc 1 230 3 view .LVU325
 1242 001c 1A4A     		ldr	r2, .L98
 1243 001e 116C     		ldr	r1, [r2, #64]
 1244 0020 41F08051 		orr	r1, r1, #268435456
ARM GAS  /tmp/cc3EDDyx.s 			page 39


 1245 0024 1164     		str	r1, [r2, #64]
 230:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1246              		.loc 1 230 3 view .LVU326
 1247 0026 126C     		ldr	r2, [r2, #64]
 1248 0028 02F08052 		and	r2, r2, #268435456
 1249 002c 0092     		str	r2, [sp]
 230:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1250              		.loc 1 230 3 view .LVU327
 1251 002e 009A     		ldr	r2, [sp]
 1252              	.LBE10:
 230:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1253              		.loc 1 230 3 view .LVU328
 231:Core/Src/main.c **** 
 1254              		.loc 1 231 3 view .LVU329
 1255              	.LBB11:
 231:Core/Src/main.c **** 
 1256              		.loc 1 231 3 view .LVU330
 1257 0030 0193     		str	r3, [sp, #4]
 231:Core/Src/main.c **** 
 1258              		.loc 1 231 3 view .LVU331
 1259 0032 1649     		ldr	r1, .L98+4
 1260 0034 0A68     		ldr	r2, [r1]
 1261 0036 22F44042 		bic	r2, r2, #49152
 1262 003a 42F48042 		orr	r2, r2, #16384
 1263 003e 0A60     		str	r2, [r1]
 231:Core/Src/main.c **** 
 1264              		.loc 1 231 3 view .LVU332
 1265 0040 0A68     		ldr	r2, [r1]
 1266 0042 02F44042 		and	r2, r2, #49152
 1267 0046 0192     		str	r2, [sp, #4]
 231:Core/Src/main.c **** 
 1268              		.loc 1 231 3 view .LVU333
 1269 0048 019A     		ldr	r2, [sp, #4]
 1270              	.LBE11:
 231:Core/Src/main.c **** 
 1271              		.loc 1 231 3 view .LVU334
 236:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1272              		.loc 1 236 3 view .LVU335
 236:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1273              		.loc 1 236 36 is_stmt 0 view .LVU336
 1274 004a 0222     		movs	r2, #2
 1275 004c 0792     		str	r2, [sp, #28]
 237:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1276              		.loc 1 237 3 is_stmt 1 view .LVU337
 237:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1277              		.loc 1 237 30 is_stmt 0 view .LVU338
 1278 004e 0122     		movs	r2, #1
 1279 0050 0A92     		str	r2, [sp, #40]
 238:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1280              		.loc 1 238 3 is_stmt 1 view .LVU339
 238:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1281              		.loc 1 238 41 is_stmt 0 view .LVU340
 1282 0052 1022     		movs	r2, #16
 1283 0054 0B92     		str	r2, [sp, #44]
 239:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1284              		.loc 1 239 3 is_stmt 1 view .LVU341
 239:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  /tmp/cc3EDDyx.s 			page 40


 1285              		.loc 1 239 34 is_stmt 0 view .LVU342
 1286 0056 0D93     		str	r3, [sp, #52]
 240:Core/Src/main.c ****   {
 1287              		.loc 1 240 3 is_stmt 1 view .LVU343
 240:Core/Src/main.c ****   {
 1288              		.loc 1 240 7 is_stmt 0 view .LVU344
 1289 0058 07A8     		add	r0, sp, #28
 1290 005a FFF7FEFF 		bl	HAL_RCC_OscConfig
 1291              	.LVL57:
 240:Core/Src/main.c ****   {
 1292              		.loc 1 240 6 view .LVU345
 1293 005e 78B9     		cbnz	r0, .L96
 247:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1294              		.loc 1 247 3 is_stmt 1 view .LVU346
 247:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1295              		.loc 1 247 31 is_stmt 0 view .LVU347
 1296 0060 0F23     		movs	r3, #15
 1297 0062 0293     		str	r3, [sp, #8]
 249:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1298              		.loc 1 249 3 is_stmt 1 view .LVU348
 249:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1299              		.loc 1 249 34 is_stmt 0 view .LVU349
 1300 0064 0021     		movs	r1, #0
 1301 0066 0391     		str	r1, [sp, #12]
 250:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1302              		.loc 1 250 3 is_stmt 1 view .LVU350
 250:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1303              		.loc 1 250 35 is_stmt 0 view .LVU351
 1304 0068 0491     		str	r1, [sp, #16]
 251:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1305              		.loc 1 251 3 is_stmt 1 view .LVU352
 251:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1306              		.loc 1 251 36 is_stmt 0 view .LVU353
 1307 006a 4FF48053 		mov	r3, #4096
 1308 006e 0593     		str	r3, [sp, #20]
 252:Core/Src/main.c **** 
 1309              		.loc 1 252 3 is_stmt 1 view .LVU354
 252:Core/Src/main.c **** 
 1310              		.loc 1 252 36 is_stmt 0 view .LVU355
 1311 0070 0691     		str	r1, [sp, #24]
 254:Core/Src/main.c ****   {
 1312              		.loc 1 254 3 is_stmt 1 view .LVU356
 254:Core/Src/main.c ****   {
 1313              		.loc 1 254 7 is_stmt 0 view .LVU357
 1314 0072 02A8     		add	r0, sp, #8
 1315 0074 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1316              	.LVL58:
 254:Core/Src/main.c ****   {
 1317              		.loc 1 254 6 view .LVU358
 1318 0078 20B9     		cbnz	r0, .L97
 258:Core/Src/main.c **** 
 1319              		.loc 1 258 1 view .LVU359
 1320 007a 15B0     		add	sp, sp, #84
 1321              		.cfi_remember_state
 1322              		.cfi_def_cfa_offset 4
 1323              		@ sp needed
 1324 007c 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/cc3EDDyx.s 			page 41


 1325              	.L96:
 1326              		.cfi_restore_state
 242:Core/Src/main.c ****   }
 1327              		.loc 1 242 5 is_stmt 1 view .LVU360
 1328 0080 FFF7FEFF 		bl	Error_Handler
 1329              	.LVL59:
 1330              	.L97:
 256:Core/Src/main.c ****   }
 1331              		.loc 1 256 5 view .LVU361
 1332 0084 FFF7FEFF 		bl	Error_Handler
 1333              	.LVL60:
 1334              	.L99:
 1335              		.align	2
 1336              	.L98:
 1337 0088 00380240 		.word	1073887232
 1338 008c 00700040 		.word	1073770496
 1339              		.cfi_endproc
 1340              	.LFE246:
 1342              		.section	.text.main,"ax",%progbits
 1343              		.align	1
 1344              		.global	main
 1345              		.syntax unified
 1346              		.thumb
 1347              		.thumb_func
 1349              	main:
 1350              	.LFB245:
 170:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1351              		.loc 1 170 1 view -0
 1352              		.cfi_startproc
 1353              		@ Volatile: function does not return.
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
 1356 0000 08B5     		push	{r3, lr}
 1357              		.cfi_def_cfa_offset 8
 1358              		.cfi_offset 3, -8
 1359              		.cfi_offset 14, -4
 178:Core/Src/main.c **** 
 1360              		.loc 1 178 3 view .LVU363
 1361 0002 FFF7FEFF 		bl	HAL_Init
 1362              	.LVL61:
 185:Core/Src/main.c **** 
 1363              		.loc 1 185 3 view .LVU364
 1364 0006 FFF7FEFF 		bl	SystemClock_Config
 1365              	.LVL62:
 192:Core/Src/main.c ****   MX_ADC1_Init();
 1366              		.loc 1 192 3 view .LVU365
 1367 000a FFF7FEFF 		bl	MX_GPIO_Init
 1368              	.LVL63:
 193:Core/Src/main.c ****   MX_ADC2_Init();
 1369              		.loc 1 193 3 view .LVU366
 1370 000e FFF7FEFF 		bl	MX_ADC1_Init
 1371              	.LVL64:
 194:Core/Src/main.c ****   MX_TIM6_Init();
 1372              		.loc 1 194 3 view .LVU367
 1373 0012 FFF7FEFF 		bl	MX_ADC2_Init
 1374              	.LVL65:
 195:Core/Src/main.c ****   MX_TIM7_Init();
ARM GAS  /tmp/cc3EDDyx.s 			page 42


 1375              		.loc 1 195 3 view .LVU368
 1376 0016 FFF7FEFF 		bl	MX_TIM6_Init
 1377              	.LVL66:
 196:Core/Src/main.c ****   MX_USART2_UART_Init();
 1378              		.loc 1 196 3 view .LVU369
 1379 001a FFF7FEFF 		bl	MX_TIM7_Init
 1380              	.LVL67:
 197:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1381              		.loc 1 197 3 view .LVU370
 1382 001e FFF7FEFF 		bl	MX_USART2_UART_Init
 1383              	.LVL68:
 199:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim7);
 1384              		.loc 1 199 3 view .LVU371
 1385 0022 0948     		ldr	r0, .L103
 1386 0024 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1387              	.LVL69:
 200:Core/Src/main.c **** 
 1388              		.loc 1 200 3 view .LVU372
 1389 0028 0848     		ldr	r0, .L103+4
 1390 002a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1391              	.LVL70:
 202:Core/Src/main.c ****   emergency_int = 0;
 1392              		.loc 1 202 3 view .LVU373
 202:Core/Src/main.c ****   emergency_int = 0;
 1393              		.loc 1 202 13 is_stmt 0 view .LVU374
 1394 002e 0023     		movs	r3, #0
 1395 0030 074A     		ldr	r2, .L103+8
 1396 0032 1370     		strb	r3, [r2]
 203:Core/Src/main.c ****   check_sys_voltage_int = 0;
 1397              		.loc 1 203 3 is_stmt 1 view .LVU375
 203:Core/Src/main.c ****   check_sys_voltage_int = 0;
 1398              		.loc 1 203 17 is_stmt 0 view .LVU376
 1399 0034 074A     		ldr	r2, .L103+12
 1400 0036 1370     		strb	r3, [r2]
 204:Core/Src/main.c ****   check_sensor_int = 0;
 1401              		.loc 1 204 3 is_stmt 1 view .LVU377
 204:Core/Src/main.c ****   check_sensor_int = 0;
 1402              		.loc 1 204 25 is_stmt 0 view .LVU378
 1403 0038 074A     		ldr	r2, .L103+16
 1404 003a 1370     		strb	r3, [r2]
 205:Core/Src/main.c ****   /* USER CODE END 2 */
 1405              		.loc 1 205 3 is_stmt 1 view .LVU379
 205:Core/Src/main.c ****   /* USER CODE END 2 */
 1406              		.loc 1 205 20 is_stmt 0 view .LVU380
 1407 003c 074A     		ldr	r2, .L103+20
 1408 003e 1370     		strb	r3, [r2]
 1409              	.L101:
 210:Core/Src/main.c ****   {
 1410              		.loc 1 210 3 is_stmt 1 discriminator 1 view .LVU381
 213:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 1411              		.loc 1 213 5 discriminator 1 view .LVU382
 1412 0040 FFF7FEFF 		bl	FSM_run
 1413              	.LVL71:
 210:Core/Src/main.c ****   {
 1414              		.loc 1 210 9 discriminator 1 view .LVU383
 1415 0044 FCE7     		b	.L101
 1416              	.L104:
ARM GAS  /tmp/cc3EDDyx.s 			page 43


 1417 0046 00BF     		.align	2
 1418              	.L103:
 1419 0048 00000000 		.word	htim6
 1420 004c 00000000 		.word	htim7
 1421 0050 00000000 		.word	cur_state
 1422 0054 00000000 		.word	emergency_int
 1423 0058 00000000 		.word	check_sys_voltage_int
 1424 005c 00000000 		.word	check_sensor_int
 1425              		.cfi_endproc
 1426              	.LFE245:
 1428              		.global	StateMachine
 1429              		.section	.data.StateMachine,"aw"
 1430              		.align	2
 1433              	StateMachine:
 1434 0000 00       		.byte	0
 1435 0001 000000   		.space	3
 1436 0004 00000000 		.word	fn_StateRunning
 1437 0008 01       		.byte	1
 1438 0009 000000   		.space	3
 1439 000c 00000000 		.word	fn_StateWaiting
 1440              		.global	last_message_time
 1441              		.section	.bss.last_message_time,"aw",%nobits
 1442              		.align	2
 1445              	last_message_time:
 1446 0000 00000000 		.space	4
 1447              		.global	check_sensor_int
 1448              		.section	.bss.check_sensor_int,"aw",%nobits
 1451              	check_sensor_int:
 1452 0000 00       		.space	1
 1453              		.global	check_sys_voltage_int
 1454              		.section	.bss.check_sys_voltage_int,"aw",%nobits
 1457              	check_sys_voltage_int:
 1458 0000 00       		.space	1
 1459              		.global	emergency_int
 1460              		.section	.bss.emergency_int,"aw",%nobits
 1463              	emergency_int:
 1464 0000 00       		.space	1
 1465              		.global	cur_state
 1466              		.section	.bss.cur_state,"aw",%nobits
 1469              	cur_state:
 1470 0000 00       		.space	1
 1471              		.global	huart2
 1472              		.section	.bss.huart2,"aw",%nobits
 1473              		.align	2
 1476              	huart2:
 1477 0000 00000000 		.space	68
 1477      00000000 
 1477      00000000 
 1477      00000000 
 1477      00000000 
 1478              		.global	htim7
 1479              		.section	.bss.htim7,"aw",%nobits
 1480              		.align	2
 1483              	htim7:
 1484 0000 00000000 		.space	72
 1484      00000000 
 1484      00000000 
ARM GAS  /tmp/cc3EDDyx.s 			page 44


 1484      00000000 
 1484      00000000 
 1485              		.global	htim6
 1486              		.section	.bss.htim6,"aw",%nobits
 1487              		.align	2
 1490              	htim6:
 1491 0000 00000000 		.space	72
 1491      00000000 
 1491      00000000 
 1491      00000000 
 1491      00000000 
 1492              		.global	hadc2
 1493              		.section	.bss.hadc2,"aw",%nobits
 1494              		.align	2
 1497              	hadc2:
 1498 0000 00000000 		.space	72
 1498      00000000 
 1498      00000000 
 1498      00000000 
 1498      00000000 
 1499              		.global	hadc1
 1500              		.section	.bss.hadc1,"aw",%nobits
 1501              		.align	2
 1504              	hadc1:
 1505 0000 00000000 		.space	72
 1505      00000000 
 1505      00000000 
 1505      00000000 
 1505      00000000 
 1506              		.text
 1507              	.Letext0:
 1508              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1509              		.file 4 "/home/alessandro/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 1510              		.file 5 "/home/alessandro/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 1511              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1512              		.file 7 "/home/alessandro/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 1513              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1514              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1515              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1516              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1517              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1518              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1519              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1520              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1521              		.file 16 "Core/Inc/main.h"
 1522              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1523              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1524              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1525              		.file 20 "/home/alessandro/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/a
 1526              		.file 21 "/home/alessandro/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/a
 1527              		.file 22 "<built-in>"
ARM GAS  /tmp/cc3EDDyx.s 			page 45


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc3EDDyx.s:21     .rodata.fn_StateWaiting.str1.4:00000000 $d
     /tmp/cc3EDDyx.s:26     .text.fn_StateWaiting:00000000 $t
     /tmp/cc3EDDyx.s:32     .text.fn_StateWaiting:00000000 fn_StateWaiting
     /tmp/cc3EDDyx.s:110    .text.fn_StateWaiting:00000050 $d
     /tmp/cc3EDDyx.s:1463   .bss.emergency_int:00000000 emergency_int
     /tmp/cc3EDDyx.s:1445   .bss.last_message_time:00000000 last_message_time
     /tmp/cc3EDDyx.s:1469   .bss.cur_state:00000000 cur_state
     /tmp/cc3EDDyx.s:1490   .bss.htim6:00000000 htim6
     /tmp/cc3EDDyx.s:1483   .bss.htim7:00000000 htim7
     /tmp/cc3EDDyx.s:1457   .bss.check_sys_voltage_int:00000000 check_sys_voltage_int
     /tmp/cc3EDDyx.s:1451   .bss.check_sensor_int:00000000 check_sensor_int
     /tmp/cc3EDDyx.s:1476   .bss.huart2:00000000 huart2
     /tmp/cc3EDDyx.s:123    .text.MX_GPIO_Init:00000000 $t
     /tmp/cc3EDDyx.s:128    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cc3EDDyx.s:275    .text.MX_GPIO_Init:000000ac $d
     /tmp/cc3EDDyx.s:282    .text.HAL_GPIO_EXTI_Callback:00000000 $t
     /tmp/cc3EDDyx.s:288    .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
     /tmp/cc3EDDyx.s:307    .text.HAL_GPIO_EXTI_Callback:00000008 $d
     /tmp/cc3EDDyx.s:312    .rodata.HAL_TIM_PeriodElapsedCallback.str1.4:00000000 $d
     /tmp/cc3EDDyx.s:316    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/cc3EDDyx.s:322    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc3EDDyx.s:375    .text.HAL_TIM_PeriodElapsedCallback:0000002c $d
     /tmp/cc3EDDyx.s:389    .rodata.checkSensor.str1.4:00000000 $d
     /tmp/cc3EDDyx.s:393    .text.checkSensor:00000000 $t
     /tmp/cc3EDDyx.s:399    .text.checkSensor:00000000 checkSensor
     /tmp/cc3EDDyx.s:501    .text.checkSensor:00000080 $d
     /tmp/cc3EDDyx.s:1504   .bss.hadc1:00000000 hadc1
     /tmp/cc3EDDyx.s:512    .rodata.checkSystemVoltage.str1.4:00000000 $d
     /tmp/cc3EDDyx.s:516    .text.checkSystemVoltage:00000000 $t
     /tmp/cc3EDDyx.s:522    .text.checkSystemVoltage:00000000 checkSystemVoltage
     /tmp/cc3EDDyx.s:544    .text.checkSystemVoltage:00000010 $d
     /tmp/cc3EDDyx.s:550    .text.fn_StateRunning:00000000 $t
     /tmp/cc3EDDyx.s:556    .text.fn_StateRunning:00000000 fn_StateRunning
     /tmp/cc3EDDyx.s:637    .text.fn_StateRunning:0000004c $d
     /tmp/cc3EDDyx.s:648    .rodata.FSM_run.str1.4:00000000 $d
     /tmp/cc3EDDyx.s:652    .text.FSM_run:00000000 $t
     /tmp/cc3EDDyx.s:658    .text.FSM_run:00000000 FSM_run
     /tmp/cc3EDDyx.s:698    .text.FSM_run:00000024 $d
     /tmp/cc3EDDyx.s:1433   .data.StateMachine:00000000 StateMachine
     /tmp/cc3EDDyx.s:706    .text.Error_Handler:00000000 $t
     /tmp/cc3EDDyx.s:712    .text.Error_Handler:00000000 Error_Handler
     /tmp/cc3EDDyx.s:744    .text.MX_ADC1_Init:00000000 $t
     /tmp/cc3EDDyx.s:749    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/cc3EDDyx.s:850    .text.MX_ADC1_Init:0000005c $d
     /tmp/cc3EDDyx.s:857    .text.MX_ADC2_Init:00000000 $t
     /tmp/cc3EDDyx.s:862    .text.MX_ADC2_Init:00000000 MX_ADC2_Init
     /tmp/cc3EDDyx.s:963    .text.MX_ADC2_Init:0000005c $d
     /tmp/cc3EDDyx.s:1497   .bss.hadc2:00000000 hadc2
     /tmp/cc3EDDyx.s:970    .text.MX_TIM6_Init:00000000 $t
     /tmp/cc3EDDyx.s:975    .text.MX_TIM6_Init:00000000 MX_TIM6_Init
     /tmp/cc3EDDyx.s:1049   .text.MX_TIM6_Init:00000044 $d
     /tmp/cc3EDDyx.s:1055   .text.MX_TIM7_Init:00000000 $t
     /tmp/cc3EDDyx.s:1060   .text.MX_TIM7_Init:00000000 MX_TIM7_Init
     /tmp/cc3EDDyx.s:1134   .text.MX_TIM7_Init:00000044 $d
     /tmp/cc3EDDyx.s:1140   .text.MX_USART2_UART_Init:00000000 $t
ARM GAS  /tmp/cc3EDDyx.s 			page 46


     /tmp/cc3EDDyx.s:1145   .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/cc3EDDyx.s:1199   .text.MX_USART2_UART_Init:0000002c $d
     /tmp/cc3EDDyx.s:1205   .text.SystemClock_Config:00000000 $t
     /tmp/cc3EDDyx.s:1211   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc3EDDyx.s:1337   .text.SystemClock_Config:00000088 $d
     /tmp/cc3EDDyx.s:1343   .text.main:00000000 $t
     /tmp/cc3EDDyx.s:1349   .text.main:00000000 main
     /tmp/cc3EDDyx.s:1419   .text.main:00000048 $d
     /tmp/cc3EDDyx.s:1430   .data.StateMachine:00000000 $d
     /tmp/cc3EDDyx.s:1442   .bss.last_message_time:00000000 $d
     /tmp/cc3EDDyx.s:1452   .bss.check_sensor_int:00000000 $d
     /tmp/cc3EDDyx.s:1458   .bss.check_sys_voltage_int:00000000 $d
     /tmp/cc3EDDyx.s:1464   .bss.emergency_int:00000000 $d
     /tmp/cc3EDDyx.s:1470   .bss.cur_state:00000000 $d
     /tmp/cc3EDDyx.s:1473   .bss.huart2:00000000 $d
     /tmp/cc3EDDyx.s:1480   .bss.htim7:00000000 $d
     /tmp/cc3EDDyx.s:1487   .bss.htim6:00000000 $d
     /tmp/cc3EDDyx.s:1494   .bss.hadc2:00000000 $d
     /tmp/cc3EDDyx.s:1501   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_TIM_Base_Start_IT
HAL_UART_Transmit
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2f
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_Stop
snprintf
strlen
HAL_ADC_GetValue
HAL_TIM_Base_Stop_IT
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
